<Ui xmlns="http://www.blizzard.com/wow/ui/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.blizzard.com/wow/ui/ ..\FrameXML\UI.xsd">

	<Script file="TPerl_FrameOptions.lua"/>
	<Script file="localization.lua"/>
	<Script file="localization.deDE.lua"/>
	<Script file="localization.frFR.lua"/>
	<Script file="localization.esES.lua"/>
	<Script file="localization.zhCN.lua"/>
	<Script file="localization.zhTW.lua"/>
	<Script file="localization.koKR.lua"/>
	<Script file="localization.ruRU.lua"/>
	<Script file="localization.itIT.lua"/>

	<Frame name="TPerl_Frame_Title" virtual="true" hidden="false" inherits="TPerlBackdropTemplate">
		<Scripts>
			<OnLoad>
				self:OnBackdropLoaded()
				self.Setup = function(self)
					local text = _G[self:GetName().."_Text"]
					text:SetTextColor(1, 1, 1, 1)
					text:SetText(TPerl_Version.." "..TPerl_GetRevision())
					--TPerl_DoGradient(self, true)
				end
			</OnLoad>
			<OnShow>
				self:Setup()
			</OnShow>
		</Scripts>
		<Anchors>
			<Anchor point="CENTER" relativePoint="TOP">
				<Offset>
					<AbsDimension x="0" y="0"/>
				</Offset>
			</Anchor>
		</Anchors>
		<Layers>
			<Layer level="ARTWORK">
				<FontString name="$parent_Text" inherits="GameFontNormalSmall" text="X-Perl UnitFrames" justifyH="LEFT">
					<Anchors>
						<Anchor point="LEFT">
							<Offset>
								<AbsDimension x="4" y="0"/>
							</Offset>
						</Anchor>
						<Anchor point="RIGHT">
							<Offset>
								<AbsDimension x="-4" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
	</Frame>

	<Frame name="TPerl_OptionsTemplateNaked" inherits="TPerlBackdropTemplate" movable="true" enableMouse="true" frameStrata="HIGH" virtual="true">
		<Scripts>
			<OnLoad>
				self:OnBackdropLoaded()
				self.Setup = TPerl_Options_SetupFunc
			</OnLoad>
			<OnShow>
				self:Setup()
			</OnShow>
			<OnMouseDown>
				if (button == "LeftButton") then
					self:StartMoving()
				end
			</OnMouseDown>
			<OnMouseUp>
				self:StopMovingOrSizing()
			</OnMouseUp>
		</Scripts>
		<Anchors>
			<Anchor point="CENTER"/>
		</Anchors>
		<KeyValues>
			<KeyValue key="backdropInfo" value="TPerl_Options_Backdrop_256_16_3333" type="global"/>
		</KeyValues>
		<Frames>
			<Frame name="$parent_Title" inherits="TPerl_Frame_Title">
				<Anchors>
					<Anchor point="TOPLEFT">
						<Offset>
							<AbsDimension x="5" y="-3"/>
						</Offset>
					</Anchor>
					<Anchor point="BOTTOMRIGHT" relativePoint="TOPRIGHT">
						<Offset>
							<AbsDimension x="-5" y="-24"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Frame>
			<Frame name="$parent_Area" inherits="TPerlBackdropTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Title">
						<Offset>
							<AbsDimension x="3" y="-3"/>
						</Offset>
					</Anchor>
					<Anchor point="BOTTOMRIGHT" relativePoint="BOTTOMRIGHT">
						<Offset>
							<AbsDimension x="-8" y="-8"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Frame>
		</Frames>
	</Frame>

	<Frame name="TPerl_OptionsTemplate" inherits="TPerl_OptionsTemplateNaked" virtual="true">
		<Frames>
			<Frame name="$parent_Area_Align" inherits="TPerlBackdropTemplate">
				<KeyValues>
					<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_6" type="global"/>
				</KeyValues>
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Title">
						<Offset>
							<AbsDimension x="3" y="-3"/>
						</Offset>
					</Anchor>
					<Anchor point="BOTTOMRIGHT" relativePoint="TOPLEFT">
						<Offset>
							<AbsDimension x="158" y="-280"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Frame>
			<Frame name="$parent_Area_Global" inherits="TPerlBackdropTemplate">
				<KeyValues>
					<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_6" type="global"/>
				</KeyValues>
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Area_Align">
						<Offset>
							<AbsDimension x="0" y="-5"/>
						</Offset>
					</Anchor>
					<Anchor point="BOTTOMRIGHT" relativePoint="BOTTOMLEFT">
						<Offset>
							<AbsDimension x="158" y="8"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Frame>
			<Frame name="$parent_Area_Tabs" inherits="TPerlBackdropTemplate">
				<KeyValues>
					<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_6" type="global"/>
				</KeyValues>
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Title">
						<Offset>
							<AbsDimension x="160" y="-15"/>
						</Offset>
					</Anchor>
					<Anchor point="BOTTOMRIGHT" relativePoint="BOTTOMRIGHT">
						<Offset>
							<AbsDimension x="-8" y="8"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Frame>
		</Frames>
	</Frame>

	<Button name="TPerlOptionsButtonTemplate" virtual="true">
		<Size>
			<AbsDimension x="90" y="21"/>
		</Size>
		<ButtonText name="$parentText" setAllPoints="true"/>
		<NormalFont style="GameFontNormal"/>
		<HighlightFont style="GameFontHighlight"/>
		<DisabledFont style="GameFontDisable"/>
		<NormalTexture inherits="UIPanelButtonUpTexture"/>
		<PushedTexture inherits="UIPanelButtonDownTexture"/>
		<DisabledTexture inherits="UIPanelButtonDisabledTexture"/>
		<HighlightTexture inherits="UIPanelButtonHighlightTexture"/>
	</Button>

	<Button name="TPerlSimpleTooltipButtonTemplate" virtual="true" inherits="TPerlOptionsButtonTemplate">
		<Scripts>
			<OnEnter>
				if (self.tooltipText) then
					GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
					local title = self:GetText()
					if (title) then
						GameTooltip:SetText(title, 1, 1, 1)
						GameTooltip:AddLine(self.tooltipText, nil, nil, nil, 1)
						GameTooltip:Show()
					else
						GameTooltip:SetText(self.tooltipText, nil, nil, nil, nil, true)
					end
				end
			</OnEnter>
			<OnLeave>
				GameTooltip:Hide()
			</OnLeave>
		</Scripts>
	</Button>

	<Button name="TPerlButtonTemplate" virtual="true" inherits="TPerlSimpleTooltipButtonTemplate">
		<Size>
			<AbsDimension x="90" y="21"/>
		</Size>
		<Scripts>
			<OnShow>
				self:SetWidth(_G[self:GetName().."Text"]:GetStringWidth() * 1.1 + 10)
			</OnShow>
		</Scripts>
	</Button>

	<Button name="TPerlUpArrow" inherits="TPerlSimpleTooltipButtonTemplate" virtual="true">
		<Size>
			<AbsDimension x="32" y="32"/>
		</Size>
		<NormalTexture file="Interface\Buttons\UI-ScrollBar-ScrollUpButton-Up"/>
		<PushedTexture file="Interface\Buttons\UI-ScrollBar-ScrollUpButton-Down"/>
		<DisabledTexture file="Interface\Buttons\UI-ScrollBar-ScrollUpButton-Disabled"/>
		<HighlightTexture file="Interface\Buttons\UI-ScrollBar-ScrollUpButton-Highlight" alphaMode="ADD"/>
	</Button>

	<Button name="TPerlDownArrow" inherits="TPerlSimpleTooltipButtonTemplate" virtual="true">
		<Size>
			<AbsDimension x="32" y="32"/>
		</Size>
		<NormalTexture file="Interface\Buttons\UI-ScrollBar-ScrollDownButton-Up"/>
		<PushedTexture file="Interface\Buttons\UI-ScrollBar-ScrollDownButton-Down"/>
		<DisabledTexture file="Interface\Buttons\UI-ScrollBar-ScrollDownButton-Disabled"/>
		<HighlightTexture file="Interface\Buttons\UI-ScrollBar-ScrollDownButton-Highlight" alphaMode="ADD"/>
	</Button>

	<Button name="TPerlLeftArrow" virtual="true">
		<Size>
			<AbsDimension x="33" y="32"/>
		</Size>
		<HitRectInsets>
			<AbsInset left="6" right="6" top="4" bottom="4"/>
		</HitRectInsets>
		<NormalTexture file="Interface\Addons\TPerl_Options\Images\LeftRightArrows">
			<TexCoords left="0" right="0.25" top="0" bottom="0.5"/>
		</NormalTexture>
		<PushedTexture file="Interface\Addons\TPerl_Options\Images\LeftRightArrows">
			<TexCoords left="0.25" right="0.5" top="0" bottom="0.5"/>
		</PushedTexture>
		<DisabledTexture file="Interface\Addons\TPerl_Options\Images\LeftRightArrows">
			<TexCoords left="0.5" right="0.75" top="0" bottom="0.5"/>
		</DisabledTexture>
		<HighlightTexture file="Interface\Addons\TPerl_Options\Images\LeftRightArrows" alphaMode="ADD">
			<TexCoords left="0.75" right="1" top="0" bottom="0.5"/>
		</HighlightTexture>
	</Button>

	<Button name="TPerlRightArrow" virtual="true">
		<Size>
			<AbsDimension x="33" y="32"/>
		</Size>
		<HitRectInsets>
			<AbsInset left="6" right="6" top="4" bottom="4"/>
		</HitRectInsets>
		<NormalTexture file="Interface\Addons\TPerl_Options\Images\LeftRightArrows">
			<TexCoords left="0" right="0.25" top="0.5" bottom="1"/>
		</NormalTexture>
		<PushedTexture file="Interface\Addons\TPerl_Options\Images\LeftRightArrows">
			<TexCoords left="0.25" right="0.5" top="0.5" bottom="1"/>
		</PushedTexture>
		<DisabledTexture file="Interface\Addons\TPerl_Options\Images\LeftRightArrows">
			<TexCoords left="0.5" right="0.75" top="0.5" bottom="1"/>
		</DisabledTexture>
		<HighlightTexture file="Interface\Addons\TPerl_Options\Images\LeftRightArrows" alphaMode="ADD">
			<TexCoords left="0.75" right="1" top="0.5" bottom="1"/>
		</HighlightTexture>
	</Button>

	<Slider name="TPerlSlider" inherits="TPerlBackdropTemplate" orientation="HORIZONTAL" virtual="true">
		<KeyValues>
			<KeyValue key="backdropInfo" value="TPerl_UISlider_Backdrop_8_8_3366" type="global"/>
		</KeyValues>
		<Size>
			<AbsDimension x="140" y="16"/>
		</Size>
		<HitRectInsets>
			<AbsInset left="0" right="0" top="-10" bottom="-10"/>
		</HitRectInsets>
		<ThumbTexture name="$parentThumb" file="Interface\Buttons\UI-SliderBar-Button-Horizontal">
			<Size>
				<AbsDimension x="32" y="32"/>
			</Size>
		</ThumbTexture>
		<Layers>
			<Layer level="ARTWORK">
				<FontString name="$parentText" inherits="GameFontNormalSmall" justifyV="BOTTOM">
					<Anchors>
						<Anchor point="BOTTOMLEFT" relativePoint="TOPLEFT">
							<Offset>
								<AbsDimension x="-2" y="0"/>
							</Offset>
						</Anchor>
						<Anchor point="TOPRIGHT" relativePoint="TOPRIGHT">
							<Offset>
								<AbsDimension x="2" y="22"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
				<FontString name="$parentLow" inherits="GameFontHighlightSmall" text="LOW">
					<Anchors>
						<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT">
							<Offset>
								<AbsDimension x="2" y="3"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
				<FontString name="$parentHigh" inherits="GameFontHighlightSmall" text="HIGH">
					<Anchors>
						<Anchor point="TOPRIGHT" relativePoint="BOTTOMRIGHT">
							<Offset>
								<AbsDimension x="-2" y="3"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
				<FontString name="$parentCurrent" inherits="GameFontNormalSmall" text="0%">
					<Color r="0.4" g="0.4" b="0.80" a="1"/>
					<Anchors>
						<Anchor point="TOPLEFT" relativeTo="$parentLow"/>
						<Anchor point="BOTTOMRIGHT" relativeTo="$parentHigh"/>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<Scripts>
			<OnLoad>
				self:OnBackdropLoaded()
				TPerl_SliderSetup(self)
			</OnLoad>
			<OnEnter>
				if (self.xperlSliderEnabled) then
					if ( self.tooltipText ) then
						local p = _G[self:GetName().."Text"]
						local title = p and p:GetText()
						GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
						if (title) then
							GameTooltip:SetText(title, 1, 1, 1)
							GameTooltip:AddLine(self.tooltipText, nil, nil, nil, 1)
						else
							GameTooltip:SetText(self.tooltipText, nil, nil, nil, nil, true)
						end
						GameTooltip:Show()
					end
					_G[self:GetName().."Text"]:SetTextColor(HIGHLIGHT_FONT_COLOR.r, HIGHLIGHT_FONT_COLOR.g, HIGHLIGHT_FONT_COLOR.b)
				end
			</OnEnter>
			<OnLeave>
				if (self.xperlSliderEnabled) then
					_G[self:GetName().."Text"]:SetTextColor(NORMAL_FONT_COLOR.r, NORMAL_FONT_COLOR.g, NORMAL_FONT_COLOR.b)
				end
				GameTooltip:Hide()
			</OnLeave>
			<OnMouseWheel>
				local s = self:GetScript("OnValueChanged")
				local newValue = self:GetValue() + (self:GetValueStep() * delta)
				self:SetValue(newValue)
			</OnMouseWheel>
		</Scripts>
	</Slider>

	<EditBox name="TPerlOptEditBox" autoFocus="false" multiLine="false" ignoreArrows="true" historyLines="0" letters="20" hidden="false" inherits="InputBoxTemplate" virtual="true">
		<Size>
			<AbsDimension x="50" y="24"/>
		</Size>
		<Scripts>
			<OnLoad function="TPerl_EditBoxSetup"/>
			<OnEnterPressed>
				self:ClearFocus()
			</OnEnterPressed>
			<OnEscapePressed>
				self:ClearFocus()
			</OnEscapePressed>
		</Scripts>
	</EditBox>

	<Button name="TPerlColorPickerTemplate" virtual="true">
		<HitRectInsets>
			<AbsInset left="0" right="-80" top="0" bottom="0"/>
		</HitRectInsets>
		<Scripts>
			<OnEnter>
				if ( self.tooltipText ) then
					local p = _G[self:GetName().."Text"]
					local title = p and p:GetText()
					GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
					if (title) then
						GameTooltip:SetText(title, 1, 1, 1)
						GameTooltip:AddLine(self.tooltipText, nil, nil, nil, 1)
					else
						GameTooltip:SetText(self.tooltipText, nil, nil, nil, nil, true)
					end
					GameTooltip:Show()
				end
				_G[self:GetName().."Text"]:SetTextColor(HIGHLIGHT_FONT_COLOR.r, HIGHLIGHT_FONT_COLOR.g, HIGHLIGHT_FONT_COLOR.b)
			</OnEnter>
			<OnLeave>
				_G[self:GetName().."Text"]:SetTextColor(NORMAL_FONT_COLOR.r, NORMAL_FONT_COLOR.g, NORMAL_FONT_COLOR.b)
				GameTooltip:Hide()
			</OnLeave>
		</Scripts>
		<Size>
			<AbsDimension x="16" y="16"/>
		</Size>
		<Layers>
			<Layer level="BACKGROUND">
				<Texture name="$parent_Border">
					<Anchors>
						<Anchor point="TOPLEFT">
							<Offset>
								<AbsDimension x="1" y="-1"/>
							</Offset>
						</Anchor>
						<Anchor point="BOTTOMRIGHT">
							<Offset>
								<AbsDimension x="-1" y="1"/>
							</Offset>
						</Anchor>
					</Anchors>
					<Color r="1.0" g="1.0" b="1.0"/>
				</Texture>
			</Layer>
			<Layer level="ARTWORK">
				<FontString name="$parentText" inherits="GameFontNormalSmall">
					<Anchors>
						<Anchor point="LEFT" relativePoint="RIGHT">
							<Offset>
								<AbsDimension x="2" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<NormalTexture name="$parent_Colour" file="Interface\ChatFrame\ChatFrameColorSwatch"/>
		<HighlightTexture file="Interface\Addons\TPerl\Images\TPerl_Highlight" alphaMode="ADD">
			<TexCoords left="0" right="0.25" top="0" bottom="0.5"/>
		</HighlightTexture>
	</Button>

	<Button name="TPerlTabTemplate" virtual="true">
		<Size>
			<AbsDimension x="60" y="16"/>
		</Size>
		<Layers>
			<Layer level="BACKGROUND">
				<Texture name="$parentEnabledLeft" file="Interface\Addons\TPerl_Options\Images\TPerl_Tabs" hidden="true">
					<Anchors>
						<Anchor point="TOPLEFT"/>
						<Anchor point="BOTTOMRIGHT" relativePoint="BOTTOMLEFT">
							<Offset>
								<AbsDimension x="8" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
					<TexCoords left="0" right="0.125" top="0" bottom="0.25"/>
				</Texture>
				<Texture name="$parentEnabledRight" file="Interface\Addons\TPerl_Options\Images\TPerl_Tabs" hidden="true">
					<Anchors>
						<Anchor point="TOPRIGHT"/>
						<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT">
							<Offset>
								<AbsDimension x="-8" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
					<TexCoords left="0.875" right="1" top="0" bottom="0.25"/>
				</Texture>
				<Texture name="$parentEnabledMiddle" file="Interface\Addons\TPerl_Options\Images\TPerl_Tabs" hidden="true">
					<Anchors>
						<Anchor point="TOPLEFT" relativeTo="$parentEnabledLeft" relativePoint="TOPRIGHT"/>
						<Anchor point="BOTTOMRIGHT" relativeTo="$parentEnabledRight" relativePoint="BOTTOMLEFT"/>
					</Anchors>
					<TexCoords left="0.125" right="0.875" top="0" bottom="0.25"/>
				</Texture>
				<Texture name="$parentDisabledLeft" file="Interface\Addons\TPerl_Options\Images\TPerl_Tabs">
					<Anchors>
						<Anchor point="TOPLEFT">
							<Offset>
								<AbsDimension x="0" y="-1"/>
							</Offset>
						</Anchor>
						<Anchor point="BOTTOMRIGHT" relativePoint="BOTTOMLEFT">
							<Offset>
								<AbsDimension x="8" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
					<TexCoords left="0" right="0.125" top="0.26" bottom="0.5"/>
				</Texture>
				<Texture name="$parentDisabledRight" file="Interface\Addons\TPerl_Options\Images\TPerl_Tabs">
					<Anchors>
						<Anchor point="TOPRIGHT">
							<Offset>
								<AbsDimension x="0" y="-1"/>
							</Offset>
						</Anchor>
						<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT">
							<Offset>
								<AbsDimension x="-8" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
					<TexCoords left="0.875" right="1" top="0.26" bottom="0.5"/>
				</Texture>
				<Texture name="$parentDisabledMiddle" file="Interface\Addons\TPerl_Options\Images\TPerl_Tabs">
					<Anchors>
						<Anchor point="TOPLEFT" relativeTo="$parentDisabledLeft" relativePoint="TOPRIGHT"/>
						<Anchor point="BOTTOMRIGHT" relativeTo="$parentDisabledRight" relativePoint="BOTTOMLEFT"/>
					</Anchors>
					<TexCoords left="0.125" right="0.875" top="0.26" bottom="0.5"/>
				</Texture>
			</Layer>
		</Layers>

		<ButtonText name="$parentText">
			<Anchors>
				<Anchor point="CENTER"/>
			</Anchors>
		</ButtonText>
		<NormalFont style="GameFontNormalSmall"/>
		<HighlightFont style="GameFontHighlightSmall"/>
		<DisabledFont style="GameFontDisableSmall"/>
		<HighlightTexture name="$parentHighlightTexture" file="Interface\AddOns\TPerl_Options\Images\TPerl_Tabs" alphaMode="ADD">
			<TexCoords left="0" right="1" top="0.75" bottom="1"/>
			<Anchors>
				<Anchor point="TOPLEFT">
					<Offset>
						<AbsDimension x="3" y="-2"/>
					</Offset>
				</Anchor>
				<Anchor point="BOTTOMRIGHT">
					<Offset>
						<AbsDimension x="-3" y="2"/>
					</Offset>
				</Anchor>
			</Anchors>
		</HighlightTexture>
		<Scripts>
			<OnShow>
				self:SetText(_G["TPERL_CONF_TITLE"..self:GetID()])
				local f = _G[self:GetName().."Text"]
				self:SetWidth(f:GetStringWidth() + 13.5)
				TPerl_Options_SetTabColor(self, TPerlDB.optionsColour)
				self:SetScript("OnShow", nil)
			</OnShow>
		</Scripts>
	</Button>

	<CheckButton name="TPerlCheckButtonTemplate" virtual="true">
		<Size>
			<AbsDimension x="28" y="28"/>
		</Size>
		<Scripts>
			<OnEnter function="TPerl_Options_CheckButton_OnEnter"/>
			<OnLeave>
				_G[self:GetName().."Text"]:SetTextColor(NORMAL_FONT_COLOR.r, NORMAL_FONT_COLOR.g, NORMAL_FONT_COLOR.b)
				if self.flashFrame and not InCombatLockdown() then
					local array
					if #self.flashFrame == 0 then
						array = {self.flashFrame}
					else
						array = self.flashFrame
					end
					for i, f in pairs(array) do
						if f and TPerl_FrameIsFlashing(f) then
							TPerl_FrameFlashStop(f)
							f:Show()
						end
					end
					if self.configClick then
						self.configClick(self)
					end
				end
				GameTooltip:Hide()
			</OnLeave>
			<OnClick>
				if self.configBase then
					if self:GetChecked() then
						TPerl_Options_SetIndex(self, 1)
					else
						TPerl_Options_SetIndex(self, nil)
					end
				elseif type(self.configSelection) == "table" then
					if self.configIndex == nil then
						error("No index for configSelection in "..self:GetName())
					end

					for k, v in pairs(self.configSelection) do
						local table
						if type(v) == "table" then
							table = v
						else
							RunScript("TPerlTemp = "..v)
							table = TPerlTemp
							TPerlTemp = nil
						end

						if type(table) == "table" then
							if self:GetChecked() then
								table[self.configIndex] = 1
							else
								table[self.configIndex] = nil
							end
						end
					end
				elseif self.XconfigVar then
					if self.XconfigVars then
						local sets = _G[self.XconfigVars]
						if sets then
							sets[self.XconfigVar] = TPerl_GetCheck(self)
						end
					else
						TPerlConfigHelper[self.XconfigVar] = TPerl_GetCheck(self)
					end
				end

				local tex = self:GetCheckedTexture()
				tex:SetVertexColor(1, 1, 1)

				if self.configClick then
					self.configClick(self)
				end
				if self.Validate then
					self.Validate()
				end
			</OnClick>
			<OnShow>
				if self.configBase then
					self:SetChecked(TPerl_Options_GetIndex(self))
				elseif self.XconfigVar then
					if self.XconfigVars then
						local sets = _G[self.XconfigVars]
						if sets then
							if sets[self.XconfigVar] == 1 then
								self:SetChecked(true)
							else
								self:SetChecked(false)
							end
						end
					else
						if TPerlConfigHelper[self.XconfigVar] == 1 then
							self:SetChecked(true)
						else
							self:SetChecked(false)
						end
					end
				elseif self.configSelection then
					local vars, ticked = 0, 0
					for i, var in pairs(self.configSelection) do
						vars = vars + 1

						local table
						if type(var) == "table" then
							table = var
						else
							RunScript("TPerlTemp = "..var)
							table = TPerlTemp
							TPerlTemp = nil
						end

						if type(table) == "table" and table[self.configIndex] then
							ticked = ticked + 1
						end
					end

					local tex = self:GetCheckedTexture()
					tex:SetVertexColor(1, 1, 1)

					if ticked == 0 then
						self:SetChecked(false)
					elseif ticked == vars then
						self:SetChecked(true)
					else
						self:SetChecked(true)
						tex:SetVertexColor(0.6, 0.6, 0.4)
					end
				end

				if (self.Validate) then
					self.Validate()
				end
			</OnShow>
		</Scripts>
		<Layers>
			<Layer level="ARTWORK">
				<FontString name="$parentText" inherits="GameFontNormalSmall" justifyH="left">
					<Size>
						<AbsDimension x="200" y="22"/>
					</Size>
					<Anchors>
						<Anchor point="LEFT" relativePoint="RIGHT">
							<Offset>
								<AbsDimension x="-2" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<NormalTexture file="Interface\Buttons\UI-CheckBox-Up"/>
		<PushedTexture file="Interface\Buttons\UI-CheckBox-Down"/>
		<HighlightTexture file="Interface\Buttons\UI-CheckBox-Highlight" alphaMode="ADD"/>
		<CheckedTexture file="Interface\Buttons\UI-CheckBox-Check"/>
		<DisabledCheckedTexture file="Interface\Buttons\UI-CheckBox-Check-Disabled"/>
	</CheckButton>

	<CheckButton name="TPerlRadioButtonTemplate" virtual="true">
		<Size>
			<AbsDimension x="20" y="20"/>
		</Size>
		<NormalTexture file="Interface\Buttons\UI-RadioButton">
			<TexCoords left="0" right="0.234375" top="0" bottom="1"/>
		</NormalTexture>
		<CheckedTexture file="Interface\Buttons\UI-RadioButton">
			<TexCoords left="0.25" right="0.484375" top="0" bottom="1"/>
		</CheckedTexture>
		<HighlightTexture file="Interface\Buttons\UI-RadioButton" alphaMode="ADD">
			<TexCoords left="0.5" right="0.734375" top="0" bottom="1"/>
		</HighlightTexture>

		<Layers>
			<Layer level="ARTWORK">
				<FontString name="$parentText" inherits="GameFontNormalSmall">
					<Anchors>
						<Anchor point="LEFT" relativePoint="RIGHT"/>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<Scripts>
			<OnEnter>
				if ( self.tooltipText ) then
					local p = _G[self:GetName().."Text"]
					local title = p and p:GetText()
					GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
					if (title) then
						GameTooltip:SetText(title, 1, 1, 1)
						GameTooltip:AddLine(self.tooltipText, nil, nil, nil, 1)
					else
						GameTooltip:SetText(self.tooltipText, nil, nil, nil, nil, true)
					end
					GameTooltip:Show()
				end
				_G[self:GetName().."Text"]:SetTextColor(HIGHLIGHT_FONT_COLOR.r, HIGHLIGHT_FONT_COLOR.g, HIGHLIGHT_FONT_COLOR.b)
			</OnEnter>
			<OnLeave>
				_G[self:GetName().."Text"]:SetTextColor(NORMAL_FONT_COLOR.r, NORMAL_FONT_COLOR.g, NORMAL_FONT_COLOR.b)
				GameTooltip:Hide()
			</OnLeave>
		</Scripts>
	</CheckButton>

	<!-- Options Frames -->
	<Frame name="TPerl_ColourPicker" frameStrata="DIALOG" inherits="TPerl_OptionsTemplateNaked" parent="UIParent" hidden="true">
		<Scripts>
			<OnShow>
				self.ok = nil
				self:Setup()
			</OnShow>
		</Scripts>
		<Size>
			<AbsDimension x="230" y="200"/>
		</Size>
		<Frames>
			<ColorSelect name="$parent_ColorSelect">
				<Size>
					<AbsDimension x="176" y="128"/>
				</Size>
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parent_Area"/>
				</Anchors>
				<Scripts>
					<OnShow>
						if (type(TPerl_ColourPicker.varGet) ~= "function") then
							error("varGet must be a function")
						end

						local val = TPerl_ColourPicker.varGet()
						if (type(val) ~= "table" or not val.r or not val.g or not val.b) then
							error("varGet's return must be a function table of {r, g, b[, a]}")
						end

						self:SetColorRGB(val.r, val.g, val.b)

						if (TPerl_ColourPicker.alpha) then
							TPerl_ColourPicker_Alpha:SetMinMaxValues(0, 1)
							TPerl_ColourPicker_Alpha:SetValue(val.a)
							TPerl_ColourPicker_Alpha:Show()
							TPerl_ColourPicker:SetHeight(230)
						else
							TPerl_ColourPicker_Alpha:Hide()
							TPerl_ColourPicker:SetHeight(200)
						end

						TPerl_Options_Mask:Show()
					</OnShow>
					<OnHide>
						TPerl_Options_Mask:Hide()
						self.varSet = nil
						self.varGet = nil
					</OnHide>
					<OnColorSelect>
						_G[self:GetParent():GetName().."_ColorSelect_Swatch"]:SetColorTexture(r, g, b)
						TPerl_ColourPickerRed:SetText(floor(r * 255))
						TPerl_ColourPickerGreen:SetText(floor(g * 255))
						TPerl_ColourPickerBlue:SetText(floor(b * 255))
					</OnColorSelect>
				</Scripts>
				<ColorWheelTexture>
					<Size>
						<AbsDimension x="128" y="128"/>
					</Size>
					<Anchors>
						<Anchor point="TOPLEFT"/>
					</Anchors>
				</ColorWheelTexture>
				<ColorWheelThumbTexture file="Interface\Buttons\UI-ColorPicker-Buttons">
					<Size>
						<AbsDimension x="10" y="10"/>
					</Size>
					<TexCoords left="0" right="0.15625" top="0" bottom="0.625"/>
				</ColorWheelThumbTexture>
				<ColorValueTexture>
					<Size>
						<AbsDimension x="32" y="128"/>
					</Size>
					<Anchors>
						<Anchor point="TOPRIGHT">
							<Offset>
								<AbsDimension x="-5" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
				</ColorValueTexture>
				<ColorValueThumbTexture file="Interface\Buttons\UI-ColorPicker-Buttons">
					<Size>
						<AbsDimension x="48" y="14"/>
					</Size>
					<TexCoords left="0.25" right="1.0" top="0" bottom="0.875"/>
				</ColorValueThumbTexture>
				<Layers>
					<Layer level="ARTWORK">
						<Texture name="$parent_Swatch">
							<Size>
								<AbsDimension x="32" y="32"/>
							</Size>
							<Anchors>
								<Anchor point="TOPLEFT" relativePoint="TOPRIGHT">
									<Offset>
										<AbsDimension x="5" y="0"/>
									</Offset>
								</Anchor>
							</Anchors>
							<Color r="1.0" g="1.0" b="1.0" a="1.0"/>
						</Texture>
					</Layer>
				</Layers>
			</ColorSelect>
			<Button name="$parent_OK" inherits="TPerlButtonTemplate">
				<Size>
					<AbsDimension x="80" y="24"/>
				</Size>
				<Anchors>
					<Anchor point="BOTTOMLEFT" relativeTo="$parent_Area">
						<Offset>
							<AbsDimension x="0" y="16"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad>
						self:SetText(TPERL_OK)
					</OnLoad>
					<OnClick>
						local r, g, b = _G[self:GetParent():GetName().."_ColorSelect"]:GetColorRGB()
						local a = TPerl_ColourPicker_Alpha:GetValue()

						local varSet = TPerl_ColourPicker.varSet
						if (type(varSet) ~= "function") then
							error("varSet must be a function")
						end

						if (TPerl_ColourPicker.alpha) then
							varSet({["r"] = r, ["g"] = g, ["b"] = b, ["a"] = a})
						else
							varSet({["r"] = r, ["g"] = g, ["b"] = b})
						end

						self:GetParent():Hide()
						if (TPerl_ColourPicker.ParentFrame) then
							TPerl_ColourPicker.ParentFrame:Show()
							TPerl_ColourPicker.ParentFrame = nil
						end
						TPerlLocked = 0

						TPerl_OptionActions()
					</OnClick>
				</Scripts>
			</Button>
			<Button name="$parent_Cancel" inherits="TPerlButtonTemplate">
				<Size>
					<AbsDimension x="80" y="24"/>
				</Size>
				<Anchors>
					<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT" relativeTo="$parent_OK">
						<Offset>
							<AbsDimension x="8" y="0"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad>
						self:SetText(TPERL_CANCEL)
					</OnLoad>
					<OnClick>
						self:GetParent():Hide()
						if (TPerl_ColourPicker.ParentFrame) then
							TPerl_ColourPicker.ParentFrame:Show()
							TPerl_ColourPicker.ParentFrame = nil
						end
						TPerlLocked = 0
					</OnClick>
				</Scripts>
			</Button>
			<Slider name="$parent_Alpha" inherits="TPerlSlider">
				<Size>
					<AbsDimension x="150" y="20"/>
				</Size>
				<Anchors>
					<Anchor point="BOTTOMLEFT" relativeTo="$parent_OK" relativePoint="TOPLEFT">
						<Offset>
							<AbsDimension x="5" y="10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad>
						TPerl_SliderSetup(self, true)
						TPerl_OptionsSetMyText(self, "TPERL_CONF_ALPHA")
					</OnLoad>
					<OnValueChanged>
						TPerl_ColourPicker.alphaValue = value
						_G[self:GetName().."Current"]:SetText(floor(100 * value + 0.5).."%")
						_G[self:GetParent():GetName().."_ColorSelect_Swatch"]:SetAlpha(value)
					</OnValueChanged>
				</Scripts>
			</Slider>
		</Frames>
		<Layers>
			<Layer level="ARTWORK">
				<FontString name="$parentRed" inherits="GameFontNormalSmall">
					<Size>
						<AbsDimension x="50" y="14"/>
					</Size>
					<Anchors>
						<Anchor point="RIGHT">
							<Offset>
								<AbsDimension x="-5" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
					<Color r="1" g="0" b="0"/>
				</FontString>
				<FontString name="$parentGreen" inherits="GameFontNormalSmall">
					<Size>
						<AbsDimension x="50" y="14"/>
					</Size>
					<Anchors>
						<Anchor point="TOPRIGHT" relativePoint="BOTTOMRIGHT" relativeTo="$parentRed"/>
					</Anchors>
					<Color r="0" g="1" b="0"/>
				</FontString>
				<FontString name="$parentBlue" inherits="GameFontNormalSmall">
					<Size>
						<AbsDimension x="50" y="14"/>
					</Size>
					<Anchors>
						<Anchor point="TOPRIGHT" relativePoint="BOTTOMRIGHT" relativeTo="$parentGreen"/>
					</Anchors>
					<Color r="0" g="0" b="1"/>
				</FontString>
			</Layer>
		</Layers>
	</Frame>

	<Button name="TPerl_Options_ButtonSelector" virtual="true">
		<Size>
			<AbsDimension x="170" y="15"/>
		</Size>
		<Scripts>
			<OnLoad>
				self.name = _G[self:GetName().."name"]
				self.tex = self:GetNormalTexture()
			</OnLoad>
			<OnClick>
				self:GetParent().Selection = self:GetID() + self:GetParent().scrollBar.bar:GetValue() + 1
				self:GetParent():SetBarColours()
			</OnClick>
			<OnMouseWheel>
				if (delta > 0) then
					self:GetParent().scrollBar.bar:SetValue(self:GetParent().scrollBar.bar:GetValue() - 1)
				else
					self:GetParent().scrollBar.bar:SetValue(self:GetParent().scrollBar.bar:GetValue() + 1)
				end
			</OnMouseWheel>
		</Scripts>
		<NormalTexture file="Interface\TargetingFrame\UI-StatusBar"/>
		<HighlightTexture file="Interface\Addons\TPerl\Images\TPerl_Highlight" alphaMode="ADD">
			<TexCoords left="0" right="1" top="0.5" bottom="1"/>
		</HighlightTexture>
		<Layers>
			<Layer level="OVERLAY">
				<FontString name="$parentname" inherits="GameFontNormal" setAllPoints="true">
					<Color r="1" g="1" b="1"/>
				</FontString>
			</Layer>
		</Layers>
	</Button>

	<!-- Options Frames -->
	<Frame name="TPerl_Options_TextureSelect" frameStrata="DIALOG" inherits="TPerl_OptionsTemplateNaked" parent="UIParent" hidden="true">
		<Scripts>
			<OnLoad function="TPerl_Options_TextureSelect_Onload"/>
			<OnShow>
				if (not self.list) then
					self.list = TPerl_AllBarTextures()
				end
				if (TPerlDB and TPerlDB.bar.texture and self.list) then
					for k, v in pairs(self.list) do
						if (TPerlDB.bar.texture[1] == v[1] and TPerlDB.bar.texture[2] == v[2]) then
							self.Selection = k
						end
					end
				end

				self.scrollBar.bar:SetValue(max(0, min(self.Selection - 5, self.list and #self.list - 8 or 0)))
				self:SetBarColours()
				self:Setup()

				TPerl_Options_Mask:Show()
			</OnShow>
			<OnHide>
				TPerl_Options_Mask:Hide()
			</OnHide>
			<OnMouseWheel>
				if (delta > 0) then
					self.scrollBar.bar:SetValue(self.scrollBar.bar:GetValue() - 1)
				else
					self.scrollBar.bar:SetValue(self.scrollBar.bar:GetValue() + 1)
				end
			</OnMouseWheel>
		</Scripts>
		<Size>
			<AbsDimension x="215" y="260"/>
		</Size>
		<Frames>
			<Button name="$parent0" inherits="TPerl_Options_ButtonSelector" id="0">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parent_Area">
						<Offset>
							<AbsDimension x="5" y="-5"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Button>
			<Button name="$parent1" inherits="TPerl_Options_ButtonSelector" id="1">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent0">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Button>
			<Button name="$parent2" inherits="TPerl_Options_ButtonSelector" id="2">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent1">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Button>
			<Button name="$parent3" inherits="TPerl_Options_ButtonSelector" id="3">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent2">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Button>
			<Button name="$parent4" inherits="TPerl_Options_ButtonSelector" id="4">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent3">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Button>
			<Button name="$parent5" inherits="TPerl_Options_ButtonSelector" id="5">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent4">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Button>
			<Button name="$parent6" inherits="TPerl_Options_ButtonSelector" id="6">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent5">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Button>
			<Button name="$parent7" inherits="TPerl_Options_ButtonSelector" id="7">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent6">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Button>
			<Button name="$parent8" inherits="TPerl_Options_ButtonSelector" id="8">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent7">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Button>
			<Button name="$parent9" inherits="TPerl_Options_ButtonSelector" id="9">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent8">
						<Offset>
							<AbsDimension x="0" y="-4"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Button>
			<ScrollFrame name="$parentscrollBar" inherits="FauxScrollFrameTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativePoint="TOPRIGHT" relativeTo="$parent0">
						<Offset>
							<AbsDimension x="-25" y="0"/>
						</Offset>
					</Anchor>
					<Anchor point="BOTTOMRIGHT" relativePoint="BOTTOMRIGHT" relativeTo="$parent9">
						<Offset>
							<AbsDimension x="0" y="0"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad>
						self.bar = _G[self:GetName().."ScrollBar"]
					</OnLoad>
					<OnVerticalScroll>
						FauxScrollFrame_OnVerticalScroll(self, offset, 1, self:GetParent().UpdateFunction)
					</OnVerticalScroll>
					<OnMouseWheel>
						if (delta > 0) then
							self.bar:SetValue(self.bar:GetValue() - 1)
						else
							self.bar:SetValue(self.bar:GetValue() + 1)
						end
					</OnMouseWheel>
				</Scripts>
			</ScrollFrame>
			<Button name="$parent_OK" inherits="TPerlButtonTemplate" text="TPERL_OK">
				<Size>
					<AbsDimension x="80" y="24"/>
				</Size>
				<Anchors>
					<Anchor point="BOTTOMLEFT" relativeTo="$parent_Area">
						<Offset>
							<AbsDimension x="0" y="16"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						if (TPerlDB) then
							TPerlDB.bar.texture = self:GetParent().list[self:GetParent().Selection]
							TPerl_Options_TextureSelect:Hide()
							TPerl_SetBarTextures()
						end
					</OnClick>
				</Scripts>
			</Button>
			<Button name="$parent_Cancel" inherits="TPerlButtonTemplate" text="TPERL_CANCEL">
				<Size>
					<AbsDimension x="80" y="24"/>
				</Size>
				<Anchors>
					<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT" relativeTo="$parent_OK">
						<Offset>
							<AbsDimension x="8" y="0"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						TPerl_Options_TextureSelect:Hide()
					</OnClick>
				</Scripts>
			</Button>
		</Frames>
	</Frame>

	<Frame name="TPerl_OptClassSelTemplate" inherits="TPerlBackdropTemplate" virtual="true">
		<Size>
			<AbsDimension x="160" y="24"/>
		</Size>
		<Frames>
			<CheckButton name="$parent_Enable" inherits="TPerlCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT"/></Anchors>
				<Scripts>
					<OnLoad>
						self:SetID(self:GetParent():GetID())
						self.tooltipText = TPERL_CONF_RAID_CLASS_DESC
						TPerl_Options_RegisterProtected(self)
					</OnLoad>
					<OnShow>
						local class = TPerlDB.raid.class[self:GetID()].name
						local textFrame = _G[self:GetName().."Text"]
						textFrame:SetText(LOCALIZED_CLASS_NAMES_MALE[class])
						self:SetHitRectInsets(0, -(textFrame:GetStringWidth()), 0, 0)
						self:SetChecked(TPerlDB.raid.class[self:GetID()].enable)
					</OnShow>
					<OnClick>
						if self:GetChecked() then
							TPerlDB.raid.class[self:GetID()].enable = true
						else
							TPerlDB.raid.class[self:GetID()].enable = nil
						end
						TPerl_Raid_ChangeAttributes()
						TPerl_Raid_OptionActions()
					</OnClick>
				</Scripts>
			</CheckButton>

			<Button name="$parent_Down" inherits="TPerlDownArrow">
				<HitRectInsets>
					<AbsInset left="7" right="0" top="0" bottom="0"/>
				</HitRectInsets>
				<Anchors>
					<Anchor point="TOPRIGHT">
						<Offset>
							<AbsDimension x="0" y="0"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad>
						self:SetID(self:GetParent():GetID())
						self.tooltipText = TPERL_CONF_RAID_CLASS_DOWN
						if (self:GetID() == ((WOW_PROJECT_ID == WOW_PROJECT_CLASSIC and 9) or (WOW_PROJECT_ID == WOW_PROJECT_CATA_CLASSIC and 10) or (WOW_PROJECT_ID == WOW_PROJECT_MISTS_CLASSIC and 11) or 13)) then
							self:Hide()
						end
					</OnLoad>
					<OnClick>
						TPerl_Options_MoveRaidClassDown(self)
						TPerl_Raid_ChangeAttributes()
						TPerl_Raid_OptionActions()
					</OnClick>
				</Scripts>
			</Button>
			<Button name="$parent_Up" inherits="TPerlUpArrow">
				<HitRectInsets>
					<AbsInset left="0" right="7" top="0" bottom="0"/>
				</HitRectInsets>
				<Anchors>
					<Anchor point="TOPRIGHT" relativePoint="TOPLEFT" relativeTo="$parent_Down">
						<Offset>
							<AbsDimension x="14" y="0"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad>
						self:SetID(self:GetParent():GetID())
						self.tooltipText = TPERL_CONF_RAID_CLASS_UP
						if (self:GetID() == 1) then
							self:Hide()
						end
					</OnLoad>
					<OnClick>
						TPerl_Options_MoveRaidClassUp(self)
						TPerl_Raid_ChangeAttributes()
						TPerl_Raid_OptionActions()
					</OnClick>
				</Scripts>
			</Button>
		</Frames>
	</Frame>

	<Frame name="TPerl_OptionsQuestionDialog" frameStrata="DIALOG" inherits="TPerl_OptionsTemplateNaked" parent="UIParent" hidden="true">
		<Layers>
			<Layer level="ARTWORK">
				<FontString name="$parentText" inherits="GameFontNormalSmall">
					<Anchors>
						<Anchor point="TOPLEFT">
							<Offset>
								<AbsDimension x="10" y="-15"/>
							</Offset>
						</Anchor>
						<Anchor point="BOTTOMRIGHT">
							<Offset>
								<AbsDimension x="-10" y="30"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<Frames>
			<Button name="$parentYes" inherits="TPerlButtonTemplate" text="YES">
				<Size>
					<AbsDimension x="70" y="24"/>
				</Size>
				<Anchors>
					<Anchor point="BOTTOMRIGHT" relativePoint="BOTTOM">
						<Offset>
							<AbsDimension x="-20" y="10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						if (self:GetParent().onAccept) then
							self:GetParent().onAccept()
						end
						self:GetParent().onAccept = nil
						self:GetParent():Hide()
					</OnClick>
				</Scripts>
			</Button>

			<Button name="$parentNo" inherits="TPerlButtonTemplate" text="NO">
				<Size>
					<AbsDimension x="70" y="24"/>
				</Size>
				<Anchors>
					<Anchor point="BOTTOMLEFT" relativePoint="BOTTOM">
						<Offset>
							<AbsDimension x="20" y="10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						self:GetParent().onAccept = nil
						self:GetParent():Hide()
					</OnClick>
				</Scripts>
			</Button>
		</Frames>
		<Scripts>
			<OnHide>
				if (self.hideMask) then
					TPerl_Options_Mask:Hide()
				end
			</OnHide>
		</Scripts>
	</Frame>

	<Frame name="TPerl_Options_TooltipConfig" inherits="TPerlBackdropTemplate" frameStrata="DIALOG" hidden="true" enableMouse="true">
		<KeyValues>
			<KeyValue key="backdropInfo" value="TPerl_Options_Backdrop_256_16_5555" type="global"/>
		</KeyValues>
		<Scripts>
			<OnLoad>
				self:OnBackdropLoaded()
				self.Setup = TPerl_Options_SetupFunc
			</OnLoad>
			<OnShow>
				TPerl_Options:SetFrameStrata("HIGH")
				local fl = self:GetFrameLevel() + 2
				TPerl_Options_TooltipConfig_NotInCombat:SetFrameLevel(fl)
				TPerl_Options_TooltipConfig_TooltipAlways:SetFrameLevel(fl)
				TPerl_Options_TooltipConfig_TooltipAlt:SetFrameLevel(fl)
				TPerl_Options_TooltipConfig_TooltipShift:SetFrameLevel(fl)
				TPerl_Options_TooltipConfig_TooltipCtrl:SetFrameLevel(fl)
				self:Setup()
			</OnShow>
			<OnHide>
				TPerl_Options:SetFrameStrata("DIALOG")
			</OnHide>
			<OnUpdate>
				local f = (GetMouseFoci and GetMouseFoci()[1]) or (GetMouseFocus and GetMouseFocus())
				if (not MouseIsOver(self) and f ~= self:GetParent()) then
					self:Hide()
				end
			</OnUpdate>
		</Scripts>
		<Size>
			<AbsDimension x="150" y="67"/>
		</Size>
		<Frames>
			<CheckButton name="$parent_NotInCombat" inherits="TPerlCheckButtonTemplate">
				<Size>
					<AbsDimension x="26" y="26"/>
				</Size>
				<Anchors>
					<Anchor point="TOPLEFT">
						<Offset>
							<AbsDimension x="3" y="-3"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad>
						TPerl_OptionsSetMyText(self, "TPERL_CONF_UNITTOOLTIPS_NIC")
					</OnLoad>
					<OnShow>
						if (self:GetParent().type == "buff") then
							self:SetChecked(TPerlDB.tooltip.buffHideInCombat)
						else
							self:SetChecked(TPerlDB.tooltip.hideInCombat)
						end
					</OnShow>
					<OnClick>
						if (self:GetParent().type == "buff") then
							TPerlDB.tooltip.buffHideInCombat = self:GetChecked()
						else
							TPerlDB.tooltip.hideInCombat = self:GetChecked()
						end
					</OnClick>
				</Scripts>
			</CheckButton>

			<CheckButton name="$parent_TooltipAlways" inherits="TPerlRadioButtonTemplate">
				<Anchors>
					<Anchor point="TOP" relativeTo="$parent_NotInCombat" relativePoint="BOTTOM">
						<Offset>
							<AbsDimension x="0" y="6"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad>
						TPerl_OptionsSetMyText(self, "TPERL_CONF_UNITTOOLTIPS_ALWAYS")
					</OnLoad>
					<OnShow>
						if (self:GetParent().type == "buff") then
							self:SetChecked(not TPerlDB.tooltip.buffModifier or TPerlDB.tooltip.buffModifier == "all")
						else
							self:SetChecked(not TPerlDB.tooltip.modifier or TPerlDB.tooltip.modifier == "all")
						end
					</OnShow>
					<OnClick>
						if (self:GetParent().type == "buff") then
							TPerlDB.tooltip.buffModifier = "all"
						else
							TPerlDB.tooltip.modifier = "all"
						end
						TPerl_Options_CheckRadio(self,{"TooltipAlways", "TooltipAlt", "TooltipShift", "TooltipCtrl"})
					</OnClick>
				</Scripts>
			</CheckButton>

			<CheckButton name="$parent_TooltipAlt" inherits="TPerlRadioButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parent_TooltipAlways" relativePoint="TOPRIGHT">
						<Offset>
							<AbsDimension x="40" y="0"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad>
						TPerl_OptionsSetMyText(self, "TPERL_CONF_UNITTOOLTIPS_ALT")
					</OnLoad>
					<OnShow>
						if (self:GetParent().type == "buff") then
							self:SetChecked(TPerlDB.tooltip.buffModifier == "alt")
						else
							self:SetChecked(TPerlDB.tooltip.modifier == "alt")
						end
					</OnShow>
					<OnClick>
						if (self:GetParent().type == "buff") then
							TPerlDB.tooltip.buffModifier = "alt"
						else
							TPerlDB.tooltip.modifier = "alt"
						end
						TPerl_Options_CheckRadio(self,{"TooltipAlways", "TooltipAlt", "TooltipShift", "TooltipCtrl"})
					</OnClick>
				</Scripts>
			</CheckButton>

			<CheckButton name="$parent_TooltipShift" inherits="TPerlRadioButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parent_TooltipAlways" relativePoint="BOTTOMLEFT">
						<Offset>
							<AbsDimension x="0" y="2"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad>
						TPerl_OptionsSetMyText(self, "TPERL_CONF_UNITTOOLTIPS_SHIFT")
					</OnLoad>
					<OnShow>
						if (self:GetParent().type == "buff") then
							self:SetChecked(TPerlDB.tooltip.buffModifier == "shift")
						else
							self:SetChecked(TPerlDB.tooltip.modifier == "shift")
						end
					</OnShow>
					<OnClick>
						if (self:GetParent().type == "buff") then
							TPerlDB.tooltip.buffModifier = "shift"
						else
							TPerlDB.tooltip.modifier = "shift"
						end
						TPerl_Options_CheckRadio(self,{"TooltipAlways", "TooltipAlt", "TooltipShift", "TooltipCtrl"})
					</OnClick>
				</Scripts>
			</CheckButton>

			<CheckButton name="$parent_TooltipCtrl" inherits="TPerlRadioButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parent_TooltipShift" relativePoint="TOPRIGHT">
						<Offset>
							<AbsDimension x="40" y="0"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad>
						TPerl_OptionsSetMyText(self, "TPERL_CONF_UNITTOOLTIPS_CONTROL")
					</OnLoad>
					<OnShow>
						if (self:GetParent().type == "buff") then
							self:SetChecked(TPerlDB.tooltip.buffModifier == "control")
						else
							self:SetChecked(TPerlDB.tooltip.modifier == "control")
						end
					</OnShow>
					<OnClick>
						if (self:GetParent().type == "buff") then
							TPerlDB.tooltip.buffModifier = "control"
						else
							TPerlDB.tooltip.modifier = "control"
						end
						TPerl_Options_CheckRadio(self,{"TooltipAlways", "TooltipAlt", "TooltipShift", "TooltipCtrl"})
					</OnClick>
				</Scripts>
			</CheckButton>
		</Frames>
	</Frame>

	<Frame name="TPerl_Options_HealerModeTemplate" inherits="TPerlBackdropTemplate" virtual="true">
		<Size>
			<AbsDimension x="190" y="62"/>
		</Size>
		<Frames>
			<CheckButton name="$parent_Healer" inherits="TPerlCheckButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT"/>
				</Anchors>
				<Scripts>
					<OnLoad>
						TPerl_OptionsSetMyText(self, "TPERL_CONF_HEALER_MODE", true)
						self.Validate = function()
							TPerl_Options_EnableSibling(self, "DeficitOnly")
							TPerl_Options_EnableSibling(self, "DeficitMax")
							TPerl_Options_EnableSibling(self, "CurMaxDeficit")
						end
					</OnLoad>
					<OnShow>
						self:SetChecked(self:GetParent():getEnable())
						self:Validate()
					</OnShow>
					<OnClick>
						self:GetParent().setEnable(self:GetChecked())
						self:Validate()
					</OnClick>
				</Scripts>
			</CheckButton>

			<CheckButton name="$parent_DeficitOnly" inherits="TPerlRadioButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parent_Healer" relativePoint="BOTTOMRIGHT">
						<Offset>
							<AbsDimension x="0" y="8"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad>
						TPerl_OptionsSetMyText(self, "TPERL_CONF_HEALERMODE_DEFICIT", true)
					</OnLoad>
					<OnShow>
						self:SetChecked(self:GetParent():getType() == 0)
						if (self.hideOptions and strfind(self.hideOptions, "0")) then
							self:Hide()
						else
							self:Show()
						end
					</OnShow>
					<OnClick>
						self:GetParent().setType(0)
						TPerl_Options_CheckRadio(self,{"DeficitOnly", "DeficitMax", "CurMaxDeficit"})
					</OnClick>
				</Scripts>
			</CheckButton>

			<CheckButton name="$parent_DeficitMax" inherits="TPerlRadioButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parent_DeficitOnly" relativePoint="TOPRIGHT">
						<Offset>
							<AbsDimension x="40" y="0"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad>
						TPerl_OptionsSetMyText(self, "TPERL_CONF_HEALERMODE_DEFICITMAX", true)
					</OnLoad>
					<OnShow>
						self:SetChecked(self:GetParent():getType() == 1)
						if (self.hideOptions and strfind(self.hideOptions, "1")) then
							self:Hide()
						else
							self:Show()
						end
					</OnShow>
					<OnClick>
						self:GetParent().setType(1)
						TPerl_Options_CheckRadio(self,{"DeficitOnly", "DeficitMax", "CurMaxDeficit"})
					</OnClick>
				</Scripts>
			</CheckButton>

			<CheckButton name="$parent_CurMaxDeficit" inherits="TPerlRadioButtonTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parent_DeficitOnly" relativePoint="BOTTOMLEFT">
						<Offset>
							<AbsDimension x="0" y="2"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnLoad>
						TPerl_OptionsSetMyText(self, "TPERL_CONF_HEALERMODE_CURMAXDEFICIT", true)
					</OnLoad>
					<OnShow>
						self:SetChecked(self:GetParent():getType() == 2)
						if (self.hideOptions and strfind(self.hideOptions, "2")) then
							self:Hide()
						else
							self:Show()
						end
					</OnShow>
					<OnClick>
						self:GetParent().setType(2)
						TPerl_Options_CheckRadio(self,{"DeficitOnly", "DeficitMax", "CurMaxDeficit"})
					</OnClick>
				</Scripts>
			</CheckButton>
		</Frames>
	</Frame>

	<Button name="TPerlLayoutLineTemplate" virtual="true">
		<NormalFont style="GameFontNormalSmall"/>
		<ButtonText name="$parentText" justifyH="LEFT" setAllPoints="true"/>
		<Size>
			<AbsDimension x="160" y="14"/>
		</Size>
		<Scripts>
			<OnLoad>
				self.master = self:GetParent():GetParent()
				if (not self.master.line) then
					self.master.line = {}
				end
				self.master.line[self:GetID()] = self
			</OnLoad>
			<OnClick>
				TPerl_Options_Layout_Name:SetText(self.raw)
				self.master.selection = self:GetID() + self.master.start - 1
				self.master:FillList()
			</OnClick>
			<OnMouseWheel>
				if (delta > 0) then
					self.master.scrollBar.bar:SetValue(self.master.scrollBar.bar:GetValue() - 2)
				else
					self.master.scrollBar.bar:SetValue(self.master.scrollBar.bar:GetValue() + 2)
				end

				TPerl_Options_LayoutFill(TPerl_Options_Layout)
			</OnMouseWheel>
		</Scripts>
		<HighlightTexture file="Interface\QuestFrame\UI-QuestTitleHighlight" alphaMode="ADD"/>
	</Button>

	<Frame name="TPerl_OptionsAnchor" parent="UIParent" inherits="TPerlBackdropTemplate" movable="true" resizable="true">
		<Size>
			<AbsDimension x="650" y="540"/>
		</Size>
		<Anchors>
			<Anchor point="CENTER"/>
		</Anchors>
	</Frame>

	<!-- Options Frames -->
	<Frame name="TPerl_Options" inherits="TPerl_OptionsTemplate" clampedToScreen="true" hidden="true">
		<Scripts>
			<OnShow>
				self:RegisterEvent("PLAYER_REGEN_ENABLED")
				self:RegisterEvent("PLAYER_REGEN_DISABLED")
				TPerl_Options_InCombatChange(UnitAffectingCombat("player"))

				if (not self.initDone) then
					local tabs = {TPerl_Options_Tab1}

					if (TPerl_Player or TPerl_Player_Pet) then
						table.insert(tabs, TPerl_Options_Tab2)
					end

					if (TPerl_Player_Pet) then
						table.insert(tabs, TPerl_Options_Tab3)
					end

					if (TPerl_Target) then
						table.insert(tabs, TPerl_Options_Tab4)
					end

					if (TPerl_Focus) then
						table.insert(tabs, TPerl_Options_Tab5)
					end

					if (TPerl_party1 or TPerl_partypet1) then
						table.insert(tabs, TPerl_Options_Tab6)
					end

					if (TPerl_Raid_Frame) then
						table.insert(tabs, TPerl_Options_Tab7)
					end

					if (TPerl_Player or TPerl_Player_Pet or TPerl_Target or TPerl_party1 or enabled) then
						table.insert(tabs, TPerl_Options_Tab8)
					end

					table.insert(tabs, TPerl_Options_Tab9)

					if (TPerl_RaidHelper_Frame) then
						table.insert(tabs, TPerl_Options_Tab10)
					end

					if (TPerl_RaidMonitor_Frame) then
						table.insert(tabs, TPerl_Options_Tab11)
					end

					if (TPerl_AdminFrame) then
						table.insert(tabs, TPerl_Options_Tab12)
					end

					local lastTab = nil
					local totalTabWidth = 0
					for i, tab in pairs(tabs) do
						if (i > 1) then
							tab:ClearAllPoints()
							tab:SetPoint("BOTTOMLEFT", lastTab, "BOTTOMRIGHT", -1, 0)
							tab:Show()

							totalTabWidth = totalTabWidth + (19 + _G[tab:GetName().."Text"]:GetStringWidth())
						end
						lastTab = tab
					end

					local width = 220 + totalTabWidth
					if (not (width >= 740)) then
						width = 740
					end
					self:SetWidth(width)
					TPerl_OptionsAnchor:SetWidth(width)
					TPerl_OptionsAnchor:SetHeight(self:GetHeight())

					TPerl_RegisterScalableFrame(self, TPerl_OptionsAnchor, 0.5, 1.5)

					self.initWidth = width
					self.initDone = true
				end

				self:Setup()
				TPerl_RestorePosition(TPerl_OptionsAnchor)
				self:SetParent(TPerl_OptionsAnchor)
				self:SetScale(TPerl_OptionsAnchor:GetWidth() / self.initWidth)
				self:ClearAllPoints()
				self:SetPoint("TOPLEFT", TPerl_OptionsAnchor, "TOPLEFT", 0, 0)
			</OnShow>
			<OnHide>
				self:UnregisterEvent("PLAYER_REGEN_ENABLED")
				self:UnregisterEvent("PLAYER_REGEN_DISABLED")
				TPerl_Options_InCombatChange(UnitAffectingCombat("player"))
				TPerl_OptionsAnchor:StopMovingOrSizing()
				if (TPerl_SavePosition) then
					TPerl_SavePosition(TPerl_OptionsAnchor)
				end
			</OnHide>
			<OnEvent>
				if (event == "PLAYER_REGEN_DISABLED") then
					TPerl_Options_InCombatChange(true)
				elseif (event == "PLAYER_REGEN_ENABLED") then
					TPerl_Options_InCombatChange(false)
				end
			</OnEvent>
			<OnUpdate>
				TPerl_Options_OnUpdate(self, elapsed)
			</OnUpdate>
			<OnMouseDown>
				if (button == "LeftButton") then
					TPerl_OptionsAnchor:StartMoving()
				end
			</OnMouseDown>
			<OnMouseUp>
				TPerl_OptionsAnchor:StopMovingOrSizing()
				if (TPerl_SavePosition) then
					TPerl_SavePosition(TPerl_OptionsAnchor)
				end
			</OnMouseUp>
		</Scripts>
		<Size>
			<AbsDimension x="650" y="540"/>
		</Size>
		<Anchors>
			<Anchor point="TOPLEFT"/>
		</Anchors>
		<Frames>
			<Frame name="TPerl_Options_Mask" hidden="true" inherits="TPerlBackdropTemplate" setAllPoints="true" enableMouse="true">
				<Layers>
					<Layer level="ARTWORK">
						<Texture name="$parenttex" file="Interface\ChatFrame\ChatFrameBackground">
							<Anchors>
								<Anchor point="TOPLEFT">
									<Offset>
										<AbsDimension x="4" y="-4"/>
									</Offset>
								</Anchor>
								<Anchor point="BOTTOMRIGHT">
									<Offset>
										<AbsDimension x="-4" y="4"/>
									</Offset>
								</Anchor>
							</Anchors>
						</Texture>
					</Layer>
				</Layers>
				<Scripts>
					<OnShow>
						TPerl_Options_Masktex:SetVertexColor(0, 0, 0, 0.5)
						self:SetFrameLevel(TPerl_Options:GetFrameLevel() + 5)
						TPerl_Options:SetFrameStrata("MEDIUM")
					</OnShow>
					<OnHide>
						TPerl_Options:SetFrameStrata("HIGH")
						TPerl_Options:Hide()
						TPerl_Options:Show()
					</OnHide>
				</Scripts>
			</Frame>

			<!-- Player and Target Frame Options -->
			<Button name="$parent_CloseButton" inherits="UIPanelCloseButton">
				<Anchors>
					<Anchor point="TOPRIGHT" relativePoint="TOPRIGHT">
						<Offset>
							<AbsDimension x="0" y="0"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						TPerl_LockFrames()
					</OnClick>
				</Scripts>
			</Button>

			<Frame name="$parent_Player" inherits="TPerlBackdropTemplate">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="TPerl_Options_Area_Align"/>
					<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Align"/>
				</Anchors>
				<Frames>
					<Button name="$parent_Title">
						<Size>
							<AbsDimension x="60" y="20"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="TOPLEFT">
								<Offset>
									<AbsDimension x="3" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<FontString name="$parentText" inherits="GameFontNormalSmall" text="TPERL_CONF_PLAYER_ALIGNMENT">
									<Color r="1" g="1" b="1" a="1"/>
									<Anchors>
										<Anchor point="LEFT"/>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
					</Button>

					<Button name="$parent_AlignTop" inherits="TPerlButtonTemplate">
						<Size>
							<AbsDimension x="70" y="24"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Title">
								<Offset>
									<AbsDimension x="0" y="-1"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALIGN_PLAYER_TOP")
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
							<OnClick>
								TPerl_Player_AlignTop()
							</OnClick>
						</Scripts>
					</Button>

					<Button name="$parent_SmallerGap" inherits="TPerlLeftArrow">
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_AlignTop">
								<Offset>
									<AbsDimension x="-6" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
							<OnClick>
								local new = TPerl_Options_DecrementSibling(self, "Gap")
								TPerl_Player_SetGap(new)
							</OnClick>
						</Scripts>
					</Button>

					<EditBox name="$parent_Gap" inherits="TPerlOptEditBox">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_SmallerGap" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="2" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
							<OnEditFocusGained>
								self.editing = true
							</OnEditFocusGained>
							<OnEditFocusLost>
								self.editing = nil
							</OnEditFocusLost>
							<OnShow>
								if (TPerl_Player_GetGap) then
									self:SetText(TPerl_Player_GetGap())
								end
							</OnShow>
							<OnTextChanged>
								if (self.editing) then
									if (TPerl_Player_GetGap) then
										TPerl_Player_SetGap(tonumber(self:GetText()))
									end
								end
							</OnTextChanged>
						</Scripts>
					</EditBox>

					<Button name="$parent_BiggerGap" inherits="TPerlRightArrow">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_Gap" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="-5" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
							<OnClick>
								local new = TPerl_Options_IncrementSibling(self, "Gap")
								TPerl_Player_SetGap(new)
							</OnClick>
						</Scripts>
					</Button>

					<Slider name="$parent_ScaleFocus" inherits="TPerlSlider">
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="5" y="30"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self.configBase = "TPerlDB.focus"
								self.configIndex = "scale"
								self.configClick = TPerl_Target_Reset
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_SCALE")
								TPerl_Options_RegisterScalingSlider(self)
							</OnLoad>
						</Scripts>
					</Slider>

					<Slider name="$parent_ScaleTarget" inherits="TPerlSlider">
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativePoint="TOPLEFT" relativeTo="$parent_ScaleFocus">
								<Offset>
									<AbsDimension x="0" y="28"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self.configBase = "TPerlDB.target"
								self.configIndex = "scale"
								self.configClick = TPerl_Target_Reset
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_SCALE")
								TPerl_Options_RegisterScalingSlider(self)
							</OnLoad>
						</Scripts>
					</Slider>

					<Slider name="$parent_Scale" inherits="TPerlSlider">
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativePoint="TOPLEFT" relativeTo="$parent_ScaleTarget">
								<Offset>
									<AbsDimension x="0" y="28"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self.configBase = "TPerlDB.player"
								self.configIndex = "scale"
								self.configClick = TPerl_PlayerScaleChanged
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_SCALE")
								TPerl_Options_RegisterScalingSlider(self)
							</OnLoad>
						</Scripts>
					</Slider>
				</Frames>
			</Frame>

			<!-- Party Frame Options -->
			<Frame name="$parent_Party" inherits="TPerlBackdropTemplate" hidden="true">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="TPerl_Options_Area_Align"/>
					<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Align"/>
				</Anchors>
				<Scripts>
					<OnShow>
						if (not C_AddOns.IsAddOnLoaded("TPerl_PartyPet")) then
							_G[self:GetName().."_ScalePets"]:Hide()
						end
					</OnShow>
				</Scripts>
				<Frames>
					<Button name="$parent_Title">
						<Size>
							<AbsDimension x="60" y="20"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="TOPLEFT">
								<Offset>
									<AbsDimension x="3" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<FontString name="$parentText" inherits="GameFontNormalSmall" text="TPERL_CONF_PARTY_ALIGNMENT">
									<Color r="1" g="1" b="1" a="1"/>
									<Anchors>
										<Anchor point="LEFT"/>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
					</Button>

					<Button name="$parent_SmallerGap" inherits="TPerlUpArrow">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Title" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="-4" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
							<OnClick>
								local new = TPerl_Options_DecrementSibling(self, "Gap")
								TPerl_Party_SetGap(new)
							</OnClick>
						</Scripts>
					</Button>

					<Button name="$parent_Spacing">
						<Size>
							<AbsDimension x="60" y="20"/>
						</Size>
						<Anchors>
							<Anchor point="LEFT" relativePoint="RIGHT" relativeTo="$parent_SmallerGap">
								<Offset>
									<AbsDimension x="2" y="1"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<FontString name="$parentText" inherits="GameFontNormalSmall">
									<Anchors>
										<Anchor point="LEFT"/>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnLoad>
								_G[self:GetName().."Text"]:SetText(TPERL_CONF_ALIGN_SPACING)
							</OnLoad>
						</Scripts>
					</Button>

					<EditBox name="$parent_Gap" inherits="TPerlOptEditBox">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_SmallerGap" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="11" y="8"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Size>
							<AbsDimension x="50" y="24"/>
						</Size>
						<Scripts>
							<OnLoad>
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
							<OnEditFocusGained>
								self.editing = true
							</OnEditFocusGained>
							<OnEditFocusLost>
								self.editing = nil
							</OnEditFocusLost>
							<OnShow>
								if (TPerl_Party_GetGap) then
									self:SetText(TPerl_Party_GetGap())
								end
							</OnShow>
							<OnTextChanged>
								if (self.editing) then
									if (TPerl_Party_GetGap) then
										TPerl_Party_SetGap(tonumber(self:GetText()))
									end
								end
							</OnTextChanged>
						</Scripts>
					</EditBox>

					<Button name="$parent_BiggerGap" inherits="TPerlDownArrow">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Gap" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="-11" y="7"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
							<OnClick>
								local new = TPerl_Options_IncrementSibling(self, "Gap")
								TPerl_Party_SetGap(new)
							</OnClick>
						</Scripts>
					</Button>

					<Frame name="$parent_Anchor" inherits="TPerlBackdropTemplate" enableMouse="true">
						<Size>
							<AbsDimension x="100" y="24"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BiggerGap" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="-12" y="-10"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Layers>
							<Layer level="BACKGROUND">
								<FontString name="$parentLabel" inherits="GameFontNormalSmall" text="TPERL_CONF_ANCHORMENU">
									<Anchors>
										<Anchor point="BOTTOMLEFT" relativePoint="TOPLEFT">
											<Offset>
												<AbsDimension x="21" y="3"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnLoad>
							self:OnBackdropLoaded()
								self.varGet = function()
									return (TPerlDB and TPerlDB.party.anchor) or "TOP"
								end
								self.varSet = function(n)
									TPerlDB.party.anchor = n
								end
								self.setFunc = function()
									if (TPerl_Party_SetMainAttributes) then
										TPerl_Party_SetMainAttributes()
										TPerl_Party_Virtual(true)
									end
								end
								TPerl_Options_Anchor_OnLoad(self)
							</OnLoad>
							<OnEnter>
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT", -15, 0)
								GameTooltip:SetText(TPERL_CONF_ANCHORMENU_DESC, nil, nil, nil, nil, true)
								_G[self:GetName().."Label"]:SetTextColor(HIGHLIGHT_FONT_COLOR.r, HIGHLIGHT_FONT_COLOR.g, HIGHLIGHT_FONT_COLOR.b)
							</OnEnter>
							<OnLeave>
								_G[self:GetName().."Label"]:SetTextColor(NORMAL_FONT_COLOR.r, NORMAL_FONT_COLOR.g, NORMAL_FONT_COLOR.b)
								GameTooltip:Hide()
							</OnLeave>
						</Scripts>
					</Frame>

					<CheckButton name="$parent_Flip" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Anchor" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="15" y="-4"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_FLIP")
								self.configBase = "TPerlDB.party"
								self.configIndex = "flip"
								self.configClick = TPerl_Party_Set_Bits
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>


					<Slider name="$parent_ScalePets" inherits="TPerlSlider">
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="5" y="30"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self.configBase = "TPerlDB.partypet"
								self.configIndex = "scale"
								self.configClick = TPerl_PartyPet_Reset
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTYPET_SCALE")
								TPerl_Options_RegisterScalingSlider(self)
							</OnLoad>
						</Scripts>
					</Slider>

					<Slider name="$parent_Scale" inherits="TPerlSlider">
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativePoint="TOPLEFT" relativeTo="$parent_ScalePets">
								<Offset>
									<AbsDimension x="0" y="28"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self.configBase = "TPerlDB.party"
								self.configIndex = "scale"
								self.configClick = TPerl_Party_Reset
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_SCALE")
								TPerl_Options_RegisterScalingSlider(self)
							</OnLoad>
						</Scripts>
					</Slider>
				</Frames>
			</Frame>

			<!-- Raid Frame Options -->
			<Frame name="$parent_Raid" inherits="TPerlBackdropTemplate" hidden="true">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="TPerl_Options_Area_Align"/>
					<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Align"/>
				</Anchors>
				<Frames>
					<Frame name="$parent_Title" inherits="TPerlBackdropTemplate">
						<Size>
							<AbsDimension x="60" y="20"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="TOPLEFT">
								<Offset>
									<AbsDimension x="3" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<FontString name="$parentText" inherits="GameFontNormalSmall" text="TPERL_CONF_RAID_ALIGNMENT">
									<Color r="1" g="1" b="1" a="1"/>
									<Anchors>
										<Anchor point="LEFT"/>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
					</Frame>

					<Frame name="$parent_Anchor" inherits="TPerlBackdropTemplate" enableMouse="true">
						<Size>
							<AbsDimension x="100" y="24"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Title">
								<Offset>
									<AbsDimension x="-16" y="-13"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Layers>
							<Layer level="BACKGROUND">
								<FontString name="$parentLabel" inherits="GameFontNormalSmall" text="TPERL_CONF_ANCHORMENU">
									<Anchors>
										<Anchor point="BOTTOMLEFT" relativePoint="TOPLEFT">
											<Offset>
												<AbsDimension x="21" y="3"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								self.varGet = function()
									return (TPerlDB and TPerlDB.raid.anchor) or "TOP"
								end
								self.varSet = function(n)
									TPerlDB.raid.anchor = n
								end
								self.setFunc = TPerl_Raid_ChangeAttributes
								TPerl_Options_Anchor_OnLoad(self)
							</OnLoad>
							<OnEnter>
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT", -15, 0)
								GameTooltip:SetText(TPERL_CONF_ANCHORMENU_DESC, nil, nil, nil, nil, true)
								_G[self:GetName().."Label"]:SetTextColor(HIGHLIGHT_FONT_COLOR.r, HIGHLIGHT_FONT_COLOR.g, HIGHLIGHT_FONT_COLOR.b)
							</OnEnter>
							<OnLeave>
								_G[self:GetName().."Label"]:SetTextColor(NORMAL_FONT_COLOR.r, NORMAL_FONT_COLOR.g, NORMAL_FONT_COLOR.b)
								GameTooltip:Hide()
							</OnLeave>
						</Scripts>
					</Frame>

					<Button name="$parent_AlignTop" inherits="TPerlButtonTemplate">
						<Size>
							<AbsDimension x="70" y="24"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Anchor">
								<Offset>
									<AbsDimension x="17" y="-4"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_Options_RegisterProtected(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALIGN_RAID_TOP")
							</OnLoad>
							<OnClick>
								TPerl_Raid_AlignTop()
							</OnClick>
						</Scripts>
					</Button>

					<Button name="$parent_AlignLeft" inherits="TPerlButtonTemplate">
						<Size>
							<AbsDimension x="70" y="24"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_AlignTop">
								<Offset>
									<AbsDimension x="0" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALIGN_RAID_LEFT")
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
							<OnClick>
								TPerl_Raid_AlignLeft()
							</OnClick>
						</Scripts>
					</Button>

					<Button name="$parent_SmallerGap" inherits="TPerlLeftArrow">
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_AlignLeft">
								<Offset>
									<AbsDimension x="-6" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
							<OnClick>
								local new = TPerl_Options_DecrementSibling(self, "Gap")
								TPerl_Raid_SetGap(new)
							</OnClick>
						</Scripts>
					</Button>

					<EditBox name="$parent_Gap" inherits="TPerlOptEditBox">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_SmallerGap" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="2" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
							<OnEditFocusGained>
								self.editing = true
							</OnEditFocusGained>
							<OnEditFocusLost>
								self.editing = nil
							</OnEditFocusLost>
							<OnShow>
								self:SetText(TPerlDB.raid.gap or "0")
							</OnShow>
							<OnTextChanged>
								if self.editing and TPerl_Raid_SetGap then
									TPerl_Raid_SetGap(tonumber(self:GetText()))
								end
							</OnTextChanged>
						</Scripts>
					</EditBox>

					<Button name="$parent_BiggerGap" inherits="TPerlRightArrow">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_Gap" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="-5" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
							<OnClick>
								local new = TPerl_Options_IncrementSibling(self, "Gap")
								TPerl_Raid_SetGap(new)
							</OnClick>
						</Scripts>
					</Button>

					<CheckButton name="$parent_All" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_SmallerGap" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="-8" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_Options.raidAlign = "all"
								self:SetChecked(true)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALIGN_RAID_ALL")
							</OnLoad>
							<OnClick>
								TPerl_Options.raidAlign = "all"
								TPerl_Options_CheckRadio(self,{"All", "Odds", "Evens", "First4", "Last4"})
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Odds" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_All" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetChecked(false)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALIGN_RAID_ODD")
							</OnLoad>
							<OnClick>
								TPerl_Options.raidAlign = "odd"
								TPerl_Options_CheckRadio(self,{"All", "Odds", "Evens", "First4", "Last4"})
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Evens" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Odds" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetChecked(false)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALIGN_RAID_EVEN")
							</OnLoad>
							<OnClick>
								TPerl_Options.raidAlign = "even"
								TPerl_Options_CheckRadio(self,{"All", "Odds", "Evens", "First4", "Last4"})
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_First4" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Odds" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="60" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetChecked(false)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALIGN_RAID_FIRST4")
							</OnLoad>
							<OnClick>
								TPerl_Options.raidAlign = "first4"
								TPerl_Options_CheckRadio(self,{"All", "Odds", "Evens", "First4", "Last4"})
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Last4" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Evens" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="60" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetChecked(false)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALIGN_RAID_LAST4")
							</OnLoad>
							<OnClick>
								TPerl_Options.raidAlign = "last4"
								TPerl_Options_CheckRadio(self,{"All", "Odds", "Evens", "First4", "Last4"})
							</OnClick>
						</Scripts>
					</CheckButton>

					<Slider name="$parent_Scale" inherits="TPerlSlider">
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="5" y="30"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self.configBase = "TPerlDB.raid"
								self.configIndex = "scale"
								self.configClick = TPerl_Raid_OptionActions
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_SCALE")
								TPerl_Options_RegisterScalingSlider(self)
							</OnLoad>
						</Scripts>
					</Slider>
				</Frames>
			</Frame>

			<!-- Frame Layout Options -->
			<Frame name="$parent_Layout" inherits="TPerlBackdropTemplate">
				<Scripts>
					<OnLoad>
						self:OnBackdropLoaded()
						self:SetScale(0.9)
						self.FillList = TPerl_Options_LayoutFill
						self.GetLayout = TPerl_Options_GetLayout
						self.scrollBar = TPerl_Options_Layout_ListScrollBar
						self.scrollBar.bar = TPerl_Options_Layout_ListScrollBarScrollBar
					</OnLoad>
					<OnShow>
						self:FillList()
					</OnShow>
				</Scripts>
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="TPerl_Options_Area_Global"/>
					<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Global"/>
				</Anchors>
				<Frames>
					<Button name="$parent_Title">
						<Size>
							<AbsDimension x="60" y="20"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="TOPLEFT">
								<Offset>
									<AbsDimension x="4" y="2"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<FontString name="$parentText" inherits="GameFontNormalSmall" text="TPERL_CONF_FRAME_LAYOUT">
									<Color r="1" g="1" b="1" a="1"/>
									<Anchors>
										<Anchor point="LEFT"/>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
					</Button>

					<EditBox name="$parent_Name" letters="100" inherits="TPerlOptEditBox">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Title" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="8" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Size>
							<AbsDimension x="105" y="24"/>
						</Size>
						<Scripts>
							<OnTextChanged>
								local me = format("%s(%s)", GetRealmName(), UnitName("player"))
								local t = self:GetText()
								if (t and t ~= "" and strlower(t) ~= strlower(me)) then
									TPerl_Options_GetSibling("Save", self):Enable()
								else
									TPerl_Options_GetSibling("Save", self):Disable()
								end
								if (t and t ~= "" and strlower(t) ~= strlower(me)) then
									TPerl_Options_GetSibling("Load", self):Enable()
								else
									TPerl_Options_GetSibling("Load", self):Disable()
								end
								if (t and t ~= "" and strlower(t) ~= strlower(me)) then
									TPerl_Options_GetSibling("Delete", self):Enable()
								else
									TPerl_Options_GetSibling("Delete", self):Disable()
								end
								TPerl_Options_RegisterProtected(TPerl_Options_GetSibling("Load", self))
							</OnTextChanged>
						</Scripts>
					</EditBox>

					<Button name="$parent_Save" inherits="TPerlButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Name" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="-6" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FRAME_LAYOUT_SAVE")
							</OnLoad>
							<OnClick>
								local name = TPerl_Options_GetSibling("Name", self):GetText()
								TPerl_Options_SaveFrameLayout(name)
								self:GetParent():FillList(true)
							</OnClick>
						</Scripts>
					</Button>

					<Button name="$parent_Load" inherits="TPerlButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Save" relativePoint="TOPRIGHT"/>
						</Anchors>
						<Scripts>
							<OnLoad>
								local me = format("%s(%s)", GetRealmName(), UnitName("player"))
								local t = self:GetText()
								if (t and t ~= "" and strlower(t) ~= strlower(me)) then
									self:Enable()
								else
									self:Disable()
								end
								TPerl_Options_RegisterProtected(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FRAME_LAYOUT_LOAD")
							</OnLoad>
							<OnClick>
								TPerl_Options_LoadFrameLayout(TPerl_Options_GetSibling("Name", self):GetText())
							</OnClick>
						</Scripts>
					</Button>

					<Button name="$parent_Delete" inherits="TPerl_BasicButton" text="DELETE">
						<Size>
							<AbsDimension x="64" y="64"/>
						</Size>
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativeTo="$parent_Name" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="-2"/>
								</Offset>
							</Anchor>
						</Anchors>
						<NormalTexture file="Interface\Addons\TPerl_RaidAdmin\Images\TPerl_Bin">
							<TexCoords left="0" right="0.5" top="0" bottom="0.5"/>
						</NormalTexture>
						<PushedTexture file="Interface\Addons\TPerl_RaidAdmin\Images\TPerl_Bin">
							<TexCoords left="0.5" right="1" top="0" bottom="0.5"/>
						</PushedTexture>
						<DisabledTexture file="Interface\Addons\TPerl_RaidAdmin\Images\TPerl_Bin">
							<TexCoords left="0" right="0.5" top="0.5" bottom="1"/>
						</DisabledTexture>
						<HighlightTexture file="Interface\Addons\TPerl_RaidAdmin\Images\TPerl_Bin" alphaMode="ADD">
							<TexCoords left="0.5" right="1" top="0.5" bottom="1"/>
						</HighlightTexture>
						<Scripts>
							<OnLoad>
								self.tooltipText = TPERL_CONF_FRAME_LAYOUT_DELETE_DESC
								self:SetScale(0.5)
							</OnLoad>
							<OnClick>
								if (TPerl_Options_DeleteFrameLayout(TPerl_Options_GetSibling("Name", self):GetText())) then
									self:GetParent():FillList(true)
								end
							</OnClick>
						</Scripts>
					</Button>

					<Frame name="$parent_List" inherits="TPerlBackdropTemplate">
						<KeyValues>
							<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_9" type="global"/>
						</KeyValues>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Save" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="-4"/>
								</Offset>
							</Anchor>
							<Anchor point="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="-10" y="4"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								self:SetScale(0.9)
							</OnLoad>
							<OnMouseWheel>
								if (delta > 0) then
									self:GetParent().scrollBar.bar:SetValue(self:GetParent().scrollBar.bar:GetValue() - 2)
								else
									self:GetParent().scrollBar.bar:SetValue(self:GetParent().scrollBar.bar:GetValue() + 2)
								end

								TPerl_Options_LayoutFill(TPerl_Options_Layout)
							</OnMouseWheel>
						</Scripts>
						<Frames>
							<Button name="$parent1" inherits="TPerlLayoutLineTemplate" text="Line" id="1">
								<Anchors>
									<Anchor point="TOPLEFT">
										<Offset>
											<AbsDimension x="4" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
							</Button>
							<Button name="$parent2" inherits="TPerlLayoutLineTemplate" text="Line" id="2">
								<Anchors><Anchor point="TOPLEFT" relativeTo="$parent1" relativePoint="BOTTOMLEFT"/></Anchors>
							</Button>
							<Button name="$parent3" inherits="TPerlLayoutLineTemplate" text="Line" id="3">
								<Anchors><Anchor point="TOPLEFT" relativeTo="$parent2" relativePoint="BOTTOMLEFT"/></Anchors>
							</Button>
							<Button name="$parent4" inherits="TPerlLayoutLineTemplate" text="Line" id="4">
								<Anchors><Anchor point="TOPLEFT" relativeTo="$parent3" relativePoint="BOTTOMLEFT"/></Anchors>
							</Button>
							<Button name="$parent5" inherits="TPerlLayoutLineTemplate" text="Line" id="5">
								<Anchors><Anchor point="TOPLEFT" relativeTo="$parent4" relativePoint="BOTTOMLEFT"/></Anchors>
							</Button>
							<Button name="$parent6" inherits="TPerlLayoutLineTemplate" text="Line" id="6">
								<Anchors><Anchor point="TOPLEFT" relativeTo="$parent5" relativePoint="BOTTOMLEFT"/></Anchors>
							</Button>
							<Button name="$parent7" inherits="TPerlLayoutLineTemplate" text="Line" id="7">
								<Anchors><Anchor point="TOPLEFT" relativeTo="$parent6" relativePoint="BOTTOMLEFT"/></Anchors>
							</Button>
							<Button name="$parent8" inherits="TPerlLayoutLineTemplate" text="Line" id="8">
								<Anchors><Anchor point="TOPLEFT" relativeTo="$parent7" relativePoint="BOTTOMLEFT"/></Anchors>
							</Button>
							<Button name="$parent9" inherits="TPerlLayoutLineTemplate" text="Line" id="9">
								<Anchors><Anchor point="TOPLEFT" relativeTo="$parent8" relativePoint="BOTTOMLEFT"/></Anchors>
							</Button>
							<Button name="$parent10" inherits="TPerlLayoutLineTemplate" text="Line" id="10">
								<Anchors><Anchor point="TOPLEFT" relativeTo="$parent9" relativePoint="BOTTOMLEFT"/></Anchors>
							</Button>
							<Button name="$parent11" inherits="TPerlLayoutLineTemplate" text="Line" id="11">
								<Anchors><Anchor point="TOPLEFT" relativeTo="$parent10" relativePoint="BOTTOMLEFT"/></Anchors>
							</Button>
							<Button name="$parent12" inherits="TPerlLayoutLineTemplate" text="Line" id="12">
								<Anchors><Anchor point="TOPLEFT" relativeTo="$parent11" relativePoint="BOTTOMLEFT"/></Anchors>
							</Button>
							<Button name="$parent13" inherits="TPerlLayoutLineTemplate" text="Line" id="13">
								<Anchors><Anchor point="TOPLEFT" relativeTo="$parent12" relativePoint="BOTTOMLEFT"/></Anchors>
							</Button>
							<Button name="$parent14" inherits="TPerlLayoutLineTemplate" text="Line" id="14">
								<Anchors><Anchor point="TOPLEFT" relativeTo="$parent13" relativePoint="BOTTOMLEFT"/></Anchors>
							</Button>
							<Button name="$parent15" inherits="TPerlLayoutLineTemplate" text="Line" id="15">
								<Anchors><Anchor point="TOPLEFT" relativeTo="$parent14" relativePoint="BOTTOMLEFT"/></Anchors>
							</Button>
							<Button name="$parent16" inherits="TPerlLayoutLineTemplate" text="Line" id="16">
								<Anchors><Anchor point="TOPLEFT" relativeTo="$parent15" relativePoint="BOTTOMLEFT"/></Anchors>
							</Button>
							<ScrollFrame name="$parentScrollBar" inherits="FauxScrollFrameTemplate">
								<Size>
									<AbsDimension x="20" y="24"/>
								</Size>
								<Anchors>
									<Anchor point="TOPRIGHT" relativePoint="TOPRIGHT" relativeTo="$parent1">
										<Offset>
											<AbsDimension x="-20" y="1"/>
										</Offset>
									</Anchor>
									<Anchor point="BOTTOMRIGHT"/>
								</Anchors>
								<Scripts>
									<OnVerticalScroll>
										FauxScrollFrame_OnVerticalScroll(self, offset, 1, function() TPerl_Options_LayoutFill(TPerl_Options_Layout) end)
									</OnVerticalScroll>
									<OnMouseWheel>
										local f = _G[self:GetName().."ScrollBar"]
										if (delta > 0) then
											f:SetValue(f:GetValue() + 3)
										else
											f:SetValue(f:GetValue() - 3)
										end

										TPerl_Options_LayoutFill(TPerl_Options_Layout)
									</OnMouseWheel>
								</Scripts>
							</ScrollFrame>
						</Frames>
					</Frame>
				</Frames>
			</Frame>

			<!-- Options Tabs -->
			<Frame name="$parent_Tab" inherits="TPerlBackdropTemplate">
				<Scripts>
					<OnLoad>
						self:OnBackdropLoaded()
						self.frameNames = {
							"_Global_Options",
							"_Player_Options",
							"_Pet_Options",
							"_Target_Options",
							"_Focus_Options",
							"_Party_Options",
							"_Raid_Options",
							"_All_Options",
							"_Colour_Options",
							"_Helper_Options",
							"_Monitor_Options",
							"_Admin_Options"
						}

						self.SelectTab = function(self, id)
							for i = 1, #self.frameNames do
								local frame = _G[self:GetParent():GetName()..self.frameNames[i]]

								local tab = _G[self:GetName()..i]
								if (i == id) then
									TPerl_Options_EnableTab(tab, true)
									if (frame) then
										frame:Show()
									end
								else
									if (tab and tab:IsShown()) then
										TPerl_Options_EnableTab(tab, false)
									end

									if (frame) then
										frame:Hide()
									end
								end
							end
						end

						self:SelectTab(1)
					</OnLoad>
				</Scripts>
				<Anchors>
					<Anchor point="BOTTOMLEFT" relativeTo="TPerl_Options_Area_Tabs" relativePoint="TOPLEFT"/>
					<Anchor point="TOPRIGHT" relativeTo="TPerl_Options_Area_Tabs" relativePoint="TOPRIGHT">
						<Offset>
							<AbsDimension x="0" y="16"/>
						</Offset>
					</Anchor>
				</Anchors>

				<Frames>
					<Button name="$parent1" inherits="TPerlTabTemplate" id="1">
						<Anchors>
							<Anchor point="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="2" y="-2"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnClick>
								self:GetParent():SelectTab(1)
								TPerl_Options_InCombatChange(UnitAffectingCombat("player"))
							</OnClick>
						</Scripts>
					</Button>

					<Button name="$parent2" inherits="TPerlTabTemplate" id="2" hidden="true">
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT" relativeTo="$parent1"/>
						</Anchors>
						<Scripts>
							<OnClick>
								self:GetParent():SelectTab(2)
								TPerl_OptionsFrame_SelectFrame("player")
								TPerl_Options_InCombatChange(UnitAffectingCombat("player"))
							</OnClick>
						</Scripts>
					</Button>

					<Button name="$parent3" inherits="TPerlTabTemplate" id="3" hidden="true">
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT" relativeTo="$parent2"/>
						</Anchors>
						<Scripts>
							<OnClick>
								self:GetParent():SelectTab(3)
								TPerl_OptionsFrame_SelectFrame("player")
								TPerl_Options_InCombatChange(UnitAffectingCombat("player"))
							</OnClick>
						</Scripts>
					</Button>

					<Button name="$parent4" inherits="TPerlTabTemplate" id="4" hidden="true">
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT" relativeTo="$parent3"/>
						</Anchors>
						<Scripts>
							<OnClick>
								self:GetParent():SelectTab(4)
								TPerl_OptionsFrame_SelectFrame("player")
								TPerl_Options_InCombatChange(UnitAffectingCombat("player"))
							</OnClick>
						</Scripts>
					</Button>

					<Button name="$parent5" inherits="TPerlTabTemplate" id="5" hidden="true">
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT" relativeTo="$parent4"/>
						</Anchors>
						<Scripts>
							<OnClick>
								self:GetParent():SelectTab(5)
								TPerl_OptionsFrame_SelectFrame("player")
								TPerl_Options_InCombatChange(UnitAffectingCombat("player"))
							</OnClick>
						</Scripts>
					</Button>

					<Button name="$parent6" inherits="TPerlTabTemplate" id="6" hidden="true">
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT" relativeTo="$parent5"/>
						</Anchors>
						<Scripts>
							<OnClick>
								self:GetParent():SelectTab(6)
								TPerl_OptionsFrame_SelectFrame("party")
								TPerl_Options_InCombatChange(UnitAffectingCombat("player"))
							</OnClick>
						</Scripts>
					</Button>

					<Button name="$parent7" inherits="TPerlTabTemplate" id="7" hidden="true">
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT" relativeTo="$parent6"/>
						</Anchors>
						<Scripts>
							<OnClick>
								self:GetParent():SelectTab(7)
								TPerl_OptionsFrame_SelectFrame("raid")
								TPerl_Options_InCombatChange(UnitAffectingCombat("player"))
							</OnClick>
						</Scripts>
					</Button>

					<Button name="$parent8" inherits="TPerlTabTemplate" id="8" hidden="true">
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT" relativeTo="$parent7"/>
						</Anchors>
						<Scripts>
							<OnClick>
								self:GetParent():SelectTab(8)
								TPerl_Options_InCombatChange(UnitAffectingCombat("player"))
							</OnClick>
						</Scripts>
					</Button>

					<Button name="$parent9" inherits="TPerlTabTemplate" id="9" hidden="true">
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT" relativeTo="$parent8"/>
						</Anchors>
						<Scripts>
							<OnClick>
								self:GetParent():SelectTab(9)
								TPerl_Options_InCombatChange(UnitAffectingCombat("player"))
							</OnClick>
						</Scripts>
					</Button>

					<Button name="$parent10" inherits="TPerlTabTemplate" id="10" hidden="true">
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT" relativeTo="$parent9"/>
						</Anchors>
						<Scripts>
							<OnClick>
								self:GetParent():SelectTab(10)
								TPerl_Options_InCombatChange(UnitAffectingCombat("player"))
							</OnClick>
						</Scripts>
					</Button>

					<Button name="$parent11" inherits="TPerlTabTemplate" id="11" hidden="true">
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT" relativeTo="$parent10"/>
						</Anchors>
						<Scripts>
							<OnClick>
								self:GetParent():SelectTab(11)
								TPerl_Options_InCombatChange(UnitAffectingCombat("player"))
							</OnClick>
						</Scripts>
					</Button>

					<Button name="$parent12" inherits="TPerlTabTemplate" id="12" hidden="true">
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativePoint="BOTTOMRIGHT" relativeTo="$parent11"/>
						</Anchors>
						<Scripts>
							<OnClick>
								self:GetParent():SelectTab(12)
								TPerl_Options_InCombatChange(UnitAffectingCombat("player"))
							</OnClick>
						</Scripts>
					</Button>
				</Frames>
			</Frame>

			<!-- Global Main Options -->
			<Frame name="$parent_Global_Options" inherits="TPerlBackdropTemplate">
				<Scripts>
					<OnLoad>
						self:OnBackdropLoaded()
						self:SetScale(0.9)
					</OnLoad>
				</Scripts>
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="TPerl_Options_Area_Tabs"/>
					<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs"/>
				</Anchors>

				<Frames>
					<Button name="$parent_BarTextures" inherits="TPerlColorPickerTemplate">
						<Size>
							<AbsDimension x="100" y="10"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="12" y="-9"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Layers>
							<Layer level="OVERLAY">
								<FontString name="$parentName" inherits="GameFontNormalSmall">
									<Anchors>
										<Anchor point="TOPLEFT"/>
										<Anchor point="BOTTOMRIGHT">
											<Offset>
												<AbsDimension x="0" y="1"/>
											</Offset>
										</Anchor>
									</Anchors>
									<Color r="1" g="1" b="1"/>
								</FontString>
							</Layer>
						</Layers>
						<NormalTexture file="Interface\TargetingFrame\UI-StatusBar"/>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BAR_TEXTURES")
							</OnLoad>
							<OnShow>
								if (TPerlDB.bar.texture and TPerlDB.bar.texture[1]) then
									_G[self:GetName().."Name"]:SetText(TPerlDB.bar.texture[1])
								end
								local tex = TPerl_GetBarTexture()
								self:SetNormalTexture(tex)
							</OnShow>
							<OnClick>
								TPerl_Options_TextureSelect:Show()
							</OnClick>
						</Scripts>
						<HighlightTexture file="Interface\Addons\TPerl\Images\TPerl_Highlight" alphaMode="ADD">
							<TexCoords left="0" right="1" top="0.5" bottom="1"/>
						</HighlightTexture>
					</Button>

					<CheckButton name="$parent_BackgroundTex" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BarTextures" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="-6" y="-2"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BAR_TEXTURES_BACKGROUND")
								self.configBase = "TPerlDB.bar"
								self.configIndex = "background"
								self.configClick = TPerl_SetBarTextures
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_FadingBars" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BackgroundTex" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BAR_FADING")
								self.configBase = "TPerlDB.bar"
								self.configIndex = "fading"
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "FadeTime")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Slider name="$parent_FadeTime" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="95" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_FadingBars" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="80" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetScale(0.8)

								local t = TPerl_Options_GetSibling("FadingBars",self)
								local t2 = _G[t:GetName().."Text"]
								self:SetPoint("LEFT", t, "RIGHT", (t2:GetStringWidth() + 10) / 0.8, 0)

								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BAR_FADING_TIME")
								_G[self:GetName().."Low"]:SetText("0.2")
								_G[self:GetName().."High"]:SetText("2.0")
								self:SetMinMaxValues(2, 20)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
							</OnLoad>
							<OnShow>
								self:SetValue(floor((TPerlDB.bar.fadeTime + 0.05) * 10))
							</OnShow>
							<OnValueChanged>
								TPerlDB.bar.fadeTime = value / 10
								_G[self:GetName().."Current"]:SetText(string.format("%.1f", TPerlDB.bar.fadeTime))
							</OnValueChanged>
						</Scripts>
					</Slider>

					<CheckButton name="$parent_InverseBars" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_FadingBars" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_INVERSEBARS")
								self.configBase = "TPerlDB.bar"
								self.configIndex = "inverse"
								self.configClick = TPerl_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_FatHealthBars" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_InverseBars" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FATHEALTHBARS")
								self.configBase = "TPerlDB.bar"
								self.configIndex = "fat"
								self.configClick = TPerl_Options_SetupStatsFrames
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_CombatFlash" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_FatHealthBars" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_COMBAT_FLASH")
								self.configBase = "TPerlDB"
								self.configIndex = "combatFlash"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Highlight" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_CombatFlash" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_SELECTION_HIGHLIGHT")
								self.configBase = "TPerlDB"
								self.configIndex = "highlightSelection"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HighlightDebuffs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Highlight" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_HIGHLIGHTDEBUFFS")
								self.configBase = "TPerlDB.highlightDebuffs"
								self.configIndex = "enable"
								self.configClick = TPerl_OptionActions
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "HighBackground")
									TPerl_Options_EnableSibling(self, "HighBorder")
									TPerl_Options_EnableSibling(self, "HighBoth")
									TPerl_Options_EnableSibling(self, "HighlightCurable")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HighBackground" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HighlightDebuffs" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="-4" y="4"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_HIGHLIGHTDEBUFFSBACKGROUND")
							</OnLoad>
							<OnShow>
								self:SetChecked(not TPerlDB.highlightDebuffs.border and TPerlDB.highlightDebuffs.frame)
							</OnShow>
							<OnClick>
								TPerlDB.highlightDebuffs.border = nil
								TPerlDB.highlightDebuffs.frame = 1
								TPerl_Options_CheckRadio(self, {"HighBackground", "HighBorder", "HighBoth"})
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HighBorder" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HighBackground" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="2"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_HIGHLIGHTDEBUFFSBORDER")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.highlightDebuffs.border and not TPerlDB.highlightDebuffs.frame)
							</OnShow>
							<OnClick>
								TPerlDB.highlightDebuffs.border = 1
								TPerlDB.highlightDebuffs.frame = nil
								TPerl_Options_CheckRadio(self, {"HighBackground", "HighBorder", "HighBoth"})
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HighBoth" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HighBorder" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="2"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_HIGHLIGHTDEBUFFSBOTH")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.highlightDebuffs.border and TPerlDB.highlightDebuffs.frame)
							</OnShow>
							<OnClick>
								TPerlDB.highlightDebuffs.border = 1
								TPerlDB.highlightDebuffs.frame = 1
								TPerl_Options_CheckRadio(self, {"HighBackground", "HighBorder", "HighBoth"})
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HighlightCurable" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_HighBoth" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="11" y="2"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_HIGHLIGHTDEBUFFSCLASS")
								self.configBase = "TPerlDB.highlightDebuffs"
								self.configIndex = "class"
								self.configClick = TPerl_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BuffCooldown" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Highlight" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="248" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BUFFCOOLDOWN")
								self.configBase = "TPerlDB.buffs"
								self.configIndex = "cooldown"
								self.configClick = TPerl_OptionActions
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "BuffCooldownAny")
									TPerl_Options_EnableSibling(self, "BlizzardSupport")
									TPerl_Options_EnableSibling(self, "OmniCCSupport")
									TPerl_Options_EnableSibling(self, "BuffCountdown")
									TPerl_Options_EnableSibling(self, "BuffCountdownAny", "BuffCountdown")
									TPerl_Options_EnableSibling(self, "BuffCountdownStart", "BuffCountdown")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BuffCooldownAny" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_BuffCooldown" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="90" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BUFFCOOLDOWNANY")
								self.configBase = "TPerlDB.buffs"
								self.configIndex = "cooldownAny"
								self.configClick = TPerl_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BlizzardSupport" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_BuffCooldown" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="6" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BLIZZARDSUPPORT")
								self.configBase = "TPerlDB.buffs"
								self.configIndex = "blizzard"
								self.configClick = TPerl_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_OmniCCSupport" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BlizzardSupport" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_OMNICCSUPPORT")
								self.configBase = "TPerlDB.buffs"
								self.configIndex = "omnicc"
								self.configClick = TPerl_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BuffCountdown" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_OmniCCSupport" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BUFFCOUNTDOWN")
								self.configBase = "TPerlDB.buffs"
								self.configIndex = "countdown"
								self.configClick = TPerl_OptionActions
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "BuffCountdownStart")
									TPerl_Options_EnableSibling(self, "BuffCountdownAny", "BuffCooldown")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BuffCountdownAny" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_BuffCountdown" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="90" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BUFFCOUNTDOWNANY")
								self.configBase = "TPerlDB.buffs"
								self.configIndex = "countdownAny"
								self.configClick = TPerl_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BuffCasterNames" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BuffCooldown" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="-86"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BUFFTOOLTIPNAMES")
								self.configBase = "TPerlDB.buffs"
								self.configIndex = "names"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_IgnoreSeasonal" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BuffCasterNames" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BUFFIGNORESEASONAL")
								self.configBase = "TPerlDB.buffs"
								self.configIndex = "ignoreSeasonal"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BlizzardsBuffs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_IgnoreSeasonal" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BUFFBLIZZARDTOO")
								self.configBase = "TPerlDB.buffs"
								self.configIndex = "blizzardCooldowns"
								self.configClick = TPerl_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Slider name="$parent_BuffCountdownStart" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="100" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BuffCountdown" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="-7" y="-5"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetScale(0.8)
								self:SetMinMaxValues(1, 60)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BUFFCOUNTDOWNSTART")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.buffs.countdownStart)
								if (TPerlDB.buffs.countdown) then
									self:EnableSlider()
								else
									self:DisableSlider()
								end
							</OnShow>
							<OnValueChanged>
								TPerlDB.buffs.countdownStart = value
								_G[self:GetName().."Current"]:SetText(TPerlDB.buffs.countdownStart)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<CheckButton name="$parent_Highlights" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_HighlightDebuffs" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="-72"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_HIGHLIGHTS")
								self.configBase = "TPerlDB.highlight"
								self.configIndex = "enable"
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "HighlightHoTs")
									TPerl_Options_EnableSibling(self, "HighlightHEAL")
									TPerl_Options_EnableSibling(self, "HighlightAggro")
									TPerl_Options_EnableSibling(self, "HighlightShields")
									TPerl_Options_EnableSibling(self, "HighlightHotcount")
									TPerl_Options_EnableSibling(self, "HighlightTarget")
									TPerl_Options_EnableSibling(self, "HighlightMending")
									TPerl_Options_EnableSibling(self, "HighlightSparkles")
									TPerl_Options_EnableSibling(self, "ExtraSparkles")

									local _, class = UnitClass("player")
									if (class ~= "DRUID" and class ~= "PRIEST" and class ~= "SHAMAN" and class ~= "MONK" and class ~= "PALADIN") then
										--TPerlDB.highlight.HOT = nil
										--TPerl_Options_EnableCheck(TPerl_Options_GetSibling("HighlightHoTs", self), false)
									end
									if (class ~= "PRIEST" and class ~= "SHAMAN" and class ~= "MAGE" and class ~= "PALADIN") then
										--TPerlDB.highlight.SHIELD = nil
										--TPerl_Options_EnableCheck(TPerl_Options_GetSibling("HighlightShields", self), false)
									end
									if (class ~= "PRIEST" and class ~= "MONK" and class ~= "PALADIN") then
										TPerlDB.highlight.POM = nil
										TPerl_Options_EnableCheck(TPerl_Options_GetSibling("HighlightMending", self), false)
									end
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HighlightHoTs" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Highlights" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="6" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_HIGHLIGHTS_HOTS")
								self.configBase = "TPerlDB.highlight"
								self.configIndex = "HOT"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HighlightHotcount" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HighlightHoTs" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="100" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_HIGHLIGHTS_HOTCOUNT")
								self.configBase = "TPerlDB.highlight"
								self.configIndex = "HOTCOUNT"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HighlightAggro" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HighlightHoTs" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_HIGHLIGHTS_AGGRO")
								self.configBase = "TPerlDB.highlight"
								self.configIndex = "AGGRO"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HighlightHEAL" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HighlightHotcount" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_HIGHLIGHTS_HEAL")
								self.configBase = "TPerlDB.highlight"
								self.configIndex = "HEAL"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HighlightShields" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HighlightAggro" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_HIGHLIGHTS_SHIELDS")
								self.configBase = "TPerlDB.highlight"
								self.configIndex = "SHIELD"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HighlightTarget" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HighlightHEAL" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_HIGHLIGHTS_TARGET")
								self.configBase = "TPerlDB.highlight"
								self.configIndex = "TARGET"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HighlightMending" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HighlightShields" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								if WOW_PROJECT_ID == WOW_PROJECT_CLASSIC then
									self:Hide()
									return
								end
								local _, class = UnitClass("player")
								if class == "MONK" then
									TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_HIGHLIGHTS_RENEWING")
								--[[elseif class == "PALADIN" then
									TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_HIGHLIGHTS_BEACON")]]
								else
									TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_HIGHLIGHTS_MENDING")
								end
								self.configBase = "TPerlDB.highlight"
								self.configIndex = "POM"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HighlightSparkles" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HighlightMending" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_HIGHLIGHTS_SPARKLES")
								self.configBase = "TPerlDB.highlight"
								self.configIndex = "sparkles"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ExtraSparkles" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HighlightSparkles" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="100" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_HIGHLIGHTS_EXTRA")
								self.configBase = "TPerlDB.highlight"
								self.configIndex = "extraSparkles"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Frame name="$parent_RangeFinder" inherits="TPerlBackdropTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="5" y="118"/>
								</Offset>
							</Anchor>
							<Anchor point="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="-5" y="5"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								self:SetScale(0.9)
								self.Refresh = function(self)
									local a = {"Enable", "FadeAmount", "CustomSpell", "CustomSpellEnemy", "CombineWithHealth", "RangeHealthAmount", "DebuffCheck", "InteractNone", "Interact10", "Interact20", "Interact30", "Interact40", "Interact45"}
									for k, v in pairs(a) do
										local f = _G[self:GetName().."_"..v]
										if (f) then
											f:Hide()
											f:Show()
										end
									end
								end
							</OnLoad>
						</Scripts>
						<Layers>
							<Layer level="ARTWORK">
								<Texture name="$parentSeparator" file="Interface\TradeSkillFrame\UI-TradeSkill-SkillBorder">
									<Anchors>
										<Anchor point="TOPLEFT" relativeTo="TPerl_Options_Area_Tabs" relativePoint="BOTTOMLEFT">
											<Offset>
												<AbsDimension x="3" y="120"/>
											</Offset>
										</Anchor>
										<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs">
											<Offset>
												<AbsDimension x="-3" y="117"/>
											</Offset>
										</Anchor>
									</Anchors>
									<TexCoords left="0.1" right="1.0" top="0" bottom="0.25"/>
								</Texture>
							</Layer>
						</Layers>

						<Frames>
							<CheckButton name="$parent_On" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT"/>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RANGEFINDER")
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "OnlyInRaid")
											TPerl_Options_EnableSibling(self, "Main")
											TPerl_Options_EnableSibling(self, "NameFrame")
											TPerl_Options_EnableSibling(self, "StatsFrame")
											TPerl_Options_EnableSibling(self, "Enable")
											TPerl_Options_EnableSibling(self, "InteractNone", "Enable")
											TPerl_Options_EnableSibling(self, "Interact10", "Enable")
											TPerl_Options_EnableSibling(self, "Interact20", "Enable")
											TPerl_Options_EnableSibling(self, "Interact30", "Enable")
											TPerl_Options_EnableSibling(self, "Interact40", "Enable")
											TPerl_Options_EnableSibling(self, "Interact45", "Enable")
										end
									</OnLoad>
									<OnShow>
										self:SetChecked(TPerlDB.rangeFinder.enabled)
										self:Validate()
									</OnShow>
									<OnClick>
										TPerlDB.rangeFinder.enabled = self:GetChecked()
										self:GetParent():Refresh()
										self:Validate()
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_OnlyInRaid" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_On" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RANGE_RAIDONLY")
										self.configBase = "TPerlDB.rangeFinder"
										self.configIndex = "raidOnly"
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Main" inherits="TPerlRadioButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_OnlyInRaid" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="2" y="5"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_Options.optRange = "Main"
										self:SetChecked(true)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RANGE_MAIN")
									</OnLoad>
									<OnClick>
										TPerl_Options.optRange = "Main"
										TPerl_Options_CheckRadio(self,{"Main", "NameFrame", "StatsFrame"})
										self:GetParent():Refresh()
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_NameFrame" inherits="TPerlRadioButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Main" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetChecked(false)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RANGE_NAMEFRAME")
									</OnLoad>
									<OnClick>
										TPerl_Options.optRange = "NameFrame"
										TPerl_Options_CheckRadio(self,{"Main", "NameFrame", "StatsFrame"})
										self:GetParent():Refresh()
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_StatsFrame" inherits="TPerlRadioButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_NameFrame" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetChecked(false)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RANGE_STATSFRAME")
									</OnLoad>
									<OnClick>
										TPerl_Options.optRange = "StatsFrame"
										TPerl_Options_CheckRadio(self,{"Main", "NameFrame", "StatsFrame"})
										self:GetParent():Refresh()
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Enable" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="LEFT" relativeTo="$parent_On" relativePoint="RIGHT">
										<Offset>
											<AbsDimension x="110" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RANGE_ENABLE")
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "InteractNone")
											TPerl_Options_EnableSibling(self, "Interact10")
											TPerl_Options_EnableSibling(self, "Interact20")
											TPerl_Options_EnableSibling(self, "Interact30")
											TPerl_Options_EnableSibling(self, "Interact40")
											TPerl_Options_EnableSibling(self, "Interact45")
										end
									</OnLoad>
									<OnShow>
										self:SetChecked(TPerlDB.rangeFinder[TPerl_Options.optRange].enabled)
										TPerl_Options_EnableCheck(self, TPerlDB.rangeFinder.enabled)
										self:Validate()
									</OnShow>
									<OnClick>
										TPerlDB.rangeFinder[TPerl_Options.optRange].enabled = self:GetChecked()
										self:GetParent():Refresh()
										self:Validate()
									</OnClick>
								</Scripts>
							</CheckButton>

							<Button name="$parent_CustomSpell" inherits="ActionButtonTemplate">
								<Anchors>
									<Anchor point="TOP">
										<Offset>
											<AbsDimension x="-20" y="-10"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self.ShowMe = function(self)
											local icon = _G[self:GetName().."Icon"]
											local label = _G[self:GetName().."Text"]

											local tex, name = TPerl_Options_GetRangeTexture(self)

											if (GameTooltip:IsOwned(self)) then
												TPerl_Options_DoRangeTooltip(self)
												GameTooltip:Show()
											end

											if tex and name then
												label:SetText(name)
												icon:SetTexture(tex)
											else
												label:SetText(TPERL_CONF_CUSTOMSPELL)
												icon:SetTexture(nil)
											end
										end

										self.CheckReset = function(self)
											if (IsAltKeyDown()) then
												TPerlDB.rangeFinder[TPerl_Options.optRange].spell = nil
												TPerlDB.rangeFinder[TPerl_Options.optRange].item = nil
												TPerl_StartupSpellRange()
												self:ShowMe()
											else
												self:ReceiveDrag()
											end
										end

										self.ReceiveDrag = function(self)
											if (TPerlDB.rangeFinder.enabled and TPerlDB.rangeFinder[TPerl_Options.optRange].enabled) then
												local type, detail, subdetail = GetCursorInfo()
												if (type) then
													local ret
													if (type == "spell") then
														local spellName, subSpellName = (C_SpellBook and C_SpellBook.GetSpellBookItemName) and C_SpellBook.GetSpellBookItemName(detail, Enum.SpellBookSpellBank.Player) or (GetSpellBookItemName and GetSpellBookItemName(detail, subdetail))
														if C_Spell and C_Spell.SpellHasRange and C_Spell.IsAutoAttackSpell and C_Spell.IsRangedAutoAttackSpell and C_Spell.IsSpellPassive then
															if (spellName and C_Spell.SpellHasRange(spellName) and not C_Spell.IsAutoAttackSpell(spellName) and not C_Spell.IsRangedAutoAttackSpell(spellName) and not C_Spell.IsSpellPassive(spellName)) then
																TPerlDB.rangeFinder[TPerl_Options.optRange].spell = spellName
																TPerlDB.rangeFinder[TPerl_Options.optRange].item = nil
																ret = true
															end
														else
															if (spellName and SpellHasRange(spellName) and not IsAttackSpell(spellName) and not IsPassiveSpell(spellName)) then
																TPerlDB.rangeFinder[TPerl_Options.optRange].spell = spellName
																TPerlDB.rangeFinder[TPerl_Options.optRange].item = nil
																ret = true
															end
														end
													elseif (type == "item") then
														local itemName = GetItemInfo(detail)
														if (ItemHasRange(itemName)) then
															TPerlDB.rangeFinder[TPerl_Options.optRange].spell = nil
															TPerlDB.rangeFinder[TPerl_Options.optRange].item = itemName
															ret = true
														end
													end
													ClearCursor()
													self:ShowMe()
													return ret
												end
											end
										end
									</OnLoad>
									<OnReceiveDrag>
										self:ReceiveDrag()
									</OnReceiveDrag>
									<OnMouseUp>
										if (button == "LeftButton") then
											self:CheckReset()
										end
									</OnMouseUp>
									<OnEnter>
										_G[self:GetName().."Text"]:SetTextColor(HIGHLIGHT_FONT_COLOR.r, HIGHLIGHT_FONT_COLOR.g, HIGHLIGHT_FONT_COLOR.b)
										TPerl_Options_DoRangeTooltip(self)
									</OnEnter>
									<OnLeave>
										_G[self:GetName().."Text"]:SetTextColor(NORMAL_FONT_COLOR.r, NORMAL_FONT_COLOR.g, NORMAL_FONT_COLOR.b)
										GameTooltip:Hide()
									</OnLeave>
									<OnShow>
										self:ShowMe()
										TPerl_Options_EnableCheck(self, TPerlDB.rangeFinder.enabled and TPerlDB.rangeFinder[TPerl_Options.optRange].enabled and not TPerlDB.rangeFinder[TPerl_Options.optRange].interact)
									</OnShow>
								</Scripts>

								<Layers>
									<Layer level="ARTWORK">
										<FontString name="$parentText" inherits="GameFontNormalSmall" justifyH="LEFT">
											<Anchors>
												<Anchor point="TOPLEFT" relativePoint="TOPRIGHT">
													<Offset>
														<AbsDimension x="6" y="0"/>
													</Offset>
												</Anchor>
												<Anchor point="BOTTOMRIGHT" relativePoint="BOTTOMRIGHT">
													<Offset>
														<AbsDimension x="130" y="0"/>
													</Offset>
												</Anchor>
											</Anchors>
											<Color r="1" g="1" b="1"/>
										</FontString>
									</Layer>
								</Layers>
							</Button>

							<Button name="$parent_CustomSpellEnemy" inherits="ActionButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_CustomSpell" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-5"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self.ShowMe = function(self)
											local icon = _G[self:GetName().."Icon"]
											local label = _G[self:GetName().."Text"]

											local tex, name = TPerl_Options_GetRangeTextureEnemy(self)

											if (GameTooltip:IsOwned(self)) then
												TPerl_Options_DoRangeTooltipEnemy(self)
												GameTooltip:Show()
											end

											if tex and name then
												label:SetText(name)
												icon:SetTexture(tex)
											else
												label:SetText(TPERL_CONF_CUSTOMSPELL_ENEMY)
												icon:SetTexture(nil)
											end
										end

										self.CheckReset = function(self)
											if (IsAltKeyDown()) then
												TPerlDB.rangeFinder[TPerl_Options.optRange].spell2 = nil
												TPerlDB.rangeFinder[TPerl_Options.optRange].item2 = nil
												TPerl_StartupSpellRange()
												self:ShowMe()
											else
												self:ReceiveDrag()
											end
										end

										self.ReceiveDrag = function(self)
											if (TPerlDB.rangeFinder.enabled and TPerlDB.rangeFinder[TPerl_Options.optRange].enabled) then
												local type, detail, subdetail = GetCursorInfo()
												if (type) then
													local ret
													if (type == "spell") then
														local spellName, subSpellName = (C_SpellBook and C_SpellBook.GetSpellBookItemName) and C_SpellBook.GetSpellBookItemName(detail, Enum.SpellBookSpellBank.Player) or (GetSpellBookItemName and GetSpellBookItemName(detail, subdetail))
														if C_Spell and C_Spell.SpellHasRange and C_Spell.IsAutoAttackSpell and C_Spell.IsRangedAutoAttackSpell and C_Spell.IsSpellPassive then
															if (spellName and C_Spell.SpellHasRange(spellName) and not C_Spell.IsAutoAttackSpell(spellName) and not C_Spell.IsRangedAutoAttackSpell(spellName) and not C_Spell.IsSpellPassive(spellName)) then
																TPerlDB.rangeFinder[TPerl_Options.optRange].spell2 = spellName
																TPerlDB.rangeFinder[TPerl_Options.optRange].item2 = nil
																ret = true
															end
														else
															if (spellName and SpellHasRange(spellName) and not IsAttackSpell(spellName) and not IsPassiveSpell(spellName)) then
																TPerlDB.rangeFinder[TPerl_Options.optRange].spell2 = spellName
																TPerlDB.rangeFinder[TPerl_Options.optRange].item2 = nil
																ret = true
															end
														end
													elseif (type == "item") then
														local itemName = GetItemInfo(detail)
														if (ItemHasRange(itemName)) then
															TPerlDB.rangeFinder[TPerl_Options.optRange].spell2 = nil
															TPerlDB.rangeFinder[TPerl_Options.optRange].item2 = itemName
															ret = true
														end
													end
													ClearCursor()
													self:ShowMe()
													return ret
												end
											end
										end
									</OnLoad>
									<OnReceiveDrag>
										self:ReceiveDrag()
									</OnReceiveDrag>
									<OnMouseUp>
										if (button == "LeftButton") then
											self:CheckReset()
										end
									</OnMouseUp>
									<OnEnter>
										_G[self:GetName().."Text"]:SetTextColor(HIGHLIGHT_FONT_COLOR.r, HIGHLIGHT_FONT_COLOR.g, HIGHLIGHT_FONT_COLOR.b)
										TPerl_Options_DoRangeTooltipEnemy(self)
									</OnEnter>
									<OnLeave>
										_G[self:GetName().."Text"]:SetTextColor(NORMAL_FONT_COLOR.r, NORMAL_FONT_COLOR.g, NORMAL_FONT_COLOR.b)
										GameTooltip:Hide()
									</OnLeave>
									<OnShow>
										self:ShowMe()
										TPerl_Options_EnableCheck(self, TPerlDB.rangeFinder.enabled and TPerlDB.rangeFinder[TPerl_Options.optRange].enabled and not TPerlDB.rangeFinder[TPerl_Options.optRange].interact)
									</OnShow>
								</Scripts>

								<Layers>
									<Layer level="ARTWORK">
										<FontString name="$parentText" inherits="GameFontNormalSmall" justifyH="LEFT">
											<Anchors>
												<Anchor point="TOPLEFT" relativePoint="TOPRIGHT">
													<Offset>
														<AbsDimension x="6" y="0"/>
													</Offset>
												</Anchor>
												<Anchor point="BOTTOMRIGHT" relativePoint="BOTTOMRIGHT">
													<Offset>
														<AbsDimension x="130" y="0"/>
													</Offset>
												</Anchor>
											</Anchors>
											<Color r="1" g="1" b="1"/>
										</FontString>
									</Layer>
								</Layers>
							</Button>

							<CheckButton name="$parent_InteractNone" inherits="TPerlRadioButtonTemplate">
								<Anchors>
									<Anchor point="LEFT" relativeTo="$parent_Enable" relativePoint="RIGHT">
										<Offset>
											<AbsDimension x="40" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetChecked(false)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RANGE_INTERACTNONE")
									</OnLoad>
									<OnShow>
										self:SetChecked(TPerlDB.rangeFinder[TPerl_Options.optRange].interact == nil)
									</OnShow>
									<OnClick>
										TPerlDB.rangeFinder[TPerl_Options.optRange].interact = nil
										TPerl_Options_CheckRadio(self, {"InteractNone", "Interact10", "Interact20", "Interact30", "Interact40", "Interact45"})
										self:GetParent():Refresh()
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Interact10" inherits="TPerlRadioButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_InteractNone" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetChecked(false)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RANGE_INTERACT10")
									</OnLoad>
									<OnShow>
										self:SetChecked(TPerlDB.rangeFinder[TPerl_Options.optRange].interact == 3)
									</OnShow>
									<OnClick>
										TPerlDB.rangeFinder[TPerl_Options.optRange].interact = 3
										TPerl_Options_CheckRadio(self, {"InteractNone", "Interact10", "Interact20", "Interact30", "Interact40", "Interact45"})
										self:GetParent():Refresh()
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Interact20" inherits="TPerlRadioButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Interact10" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetChecked(false)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RANGE_INTERACT20")
									</OnLoad>
									<OnShow>
										self:SetChecked(TPerlDB.rangeFinder[TPerl_Options.optRange].interact == 2)
									</OnShow>
									<OnClick>
										TPerlDB.rangeFinder[TPerl_Options.optRange].interact = 2
										TPerl_Options_CheckRadio(self, {"InteractNone", "Interact10", "Interact20", "Interact30", "Interact40", "Interact45"})
										self:GetParent():Refresh()
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Interact30" inherits="TPerlRadioButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Interact20" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetChecked(false)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RANGE_INTERACT30")
									</OnLoad>
									<OnShow>
										self:SetChecked(TPerlDB.rangeFinder[TPerl_Options.optRange].interact == 1)
									</OnShow>
									<OnClick>
										TPerlDB.rangeFinder[TPerl_Options.optRange].interact = 1
										TPerl_Options_CheckRadio(self, {"InteractNone", "Interact10", "Interact20", "Interact30", "Interact40", "Interact45"})
										self:GetParent():Refresh()
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Interact40" inherits="TPerlRadioButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Interact30" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetChecked(false)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RANGE_INTERACT40")
									</OnLoad>
									<OnShow>
										self:SetChecked(TPerlDB.rangeFinder[TPerl_Options.optRange].interact == 5)
									</OnShow>
									<OnClick>
										TPerlDB.rangeFinder[TPerl_Options.optRange].interact = 5
										TPerl_Options_CheckRadio(self, {"InteractNone", "Interact10", "Interact20", "Interact30", "Interact40", "Interact45"})
										self:GetParent():Refresh()
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Interact45" inherits="TPerlRadioButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Interact40" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetChecked(false)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RANGE_INTERACT45")
									</OnLoad>
									<OnShow>
										self:SetChecked(TPerlDB.rangeFinder[TPerl_Options.optRange].interact == 6)
									</OnShow>
									<OnClick>
										TPerlDB.rangeFinder[TPerl_Options.optRange].interact = 6
										TPerl_Options_CheckRadio(self, {"InteractNone", "Interact10", "Interact20", "Interact30", "Interact40", "Interact45"})
										self:GetParent():Refresh()
									</OnClick>
								</Scripts>
							</CheckButton>

							<Slider name="$parent_FadeAmount" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="75" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="TOPRIGHT">
										<Offset>
											<AbsDimension x="-100" y="-15"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_SliderSetup(self)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RANGEFADEAMOUNT")
										_G[self:GetName().."Low"]:SetText(" ")
										_G[self:GetName().."High"]:SetText(" ")
										self:SetMinMaxValues(0.1, 0.8)
										self:SetValueStep(0.1)
										self:SetObeyStepOnDrag(true)
									</OnLoad>
									<OnShow>
										self:SetValue(TPerlDB.rangeFinder[TPerl_Options.optRange].FadeAmount)
										if (TPerlDB.rangeFinder.enabled and TPerlDB.rangeFinder[TPerl_Options.optRange].enabled) then
											self:EnableSlider()
										else
											self:DisableSlider()
										end
									</OnShow>
									<OnValueChanged>
										TPerlDB.rangeFinder[TPerl_Options.optRange].FadeAmount = floor((value + 0.05) * 10) / 10
										_G[self:GetName().."Current"]:SetText(string.format("%d%%", TPerlDB.rangeFinder[TPerl_Options.optRange].FadeAmount * 100))
									</OnValueChanged>
								</Scripts>
							</Slider>

							<CheckButton name="$parent_CombineWithHealth" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_FadeAmount" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="-4" y="-4"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RANGEHEALTH")
									</OnLoad>
									<OnShow>
										self:SetChecked(TPerlDB.rangeFinder[TPerl_Options.optRange].PlusHealth)
										TPerl_Options_EnableCheck(self, TPerlDB.rangeFinder.enabled and TPerlDB.rangeFinder[TPerl_Options.optRange].enabled)
									</OnShow>
									<OnClick>
										TPerlDB.rangeFinder[TPerl_Options.optRange].PlusHealth = self:GetChecked()
										self:GetParent():Refresh()
									</OnClick>
								</Scripts>
							</CheckButton>

							<Slider name="$parent_RangeHealthAmount" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="100" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_CombineWithHealth" relativePoint="BOTTOMRIGHT">
										<Offset>
											<AbsDimension x="-5" y="-6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetMinMaxValues(10, 95)
										self:SetValueStep(5)
										self:SetObeyStepOnDrag(true)
										TPerl_SliderSetup(self, true)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RANGEHEALTH_LOWPOINT")
									</OnLoad>
									<OnShow>
										self:SetValue(TPerlDB.rangeFinder[TPerl_Options.optRange].HealthLowPoint * 100)
										if (TPerlDB.rangeFinder.enabled and TPerlDB.rangeFinder[TPerl_Options.optRange].enabled and TPerlDB.rangeFinder[TPerl_Options.optRange].PlusHealth) then
											self:EnableSlider()
										else
											self:DisableSlider()
										end
									</OnShow>
									<OnValueChanged>
										TPerlDB.rangeFinder[TPerl_Options.optRange].HealthLowPoint = value / 100
										_G[self:GetName().."Current"]:SetText(value)
									</OnValueChanged>
								</Scripts>
							</Slider>

							<CheckButton name="$parent_DebuffCheck" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPRIGHT" relativeTo="$parent_RangeHealthAmount" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="4" y="-4"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RANGEDEBUFF")
									</OnLoad>
									<OnShow>
										self:SetChecked(TPerlDB.rangeFinder[TPerl_Options.optRange].PlusDebuff)
										TPerl_Options_EnableCheck(self, TPerlDB.rangeFinder.enabled and TPerlDB.rangeFinder[TPerl_Options.optRange].enabled)
									</OnShow>
									<OnClick>
										TPerlDB.rangeFinder[TPerl_Options.optRange].PlusDebuff = self:GetChecked()
										self:GetParent():Refresh()
									</OnClick>
								</Scripts>
							</CheckButton>
						</Frames>
					</Frame>

					<CheckButton name="$parent_BuffTooltips" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOP">
								<Offset>
									<AbsDimension x="-30" y="-6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BUFFTOOLTIPS")
								self.configBase = "TPerlDB.tooltip"
								self.configIndex = "enableBuffs"
								--self.Validate = function()
								--TPerl_Options_EnableSibling(self, "NotInCombat", "or", "UnitTooltips")
								--TPerl_Options_EnableSibling(self, "TooltipAlways", "or", "UnitTooltips")
								--TPerl_Options_EnableSibling(self, "TooltipAlt", "or", "UnitTooltips")
								--TPerl_Options_EnableSibling(self, "TooltipShift", "or", "UnitTooltips")
								--TPerl_Options_EnableSibling(self, "TooltipCtrl", "or", "UnitTooltips")
								--end
							</OnLoad>
							<OnEnter>
								TPerl_Options_CheckButton_OnEnter(self)
								TPerl_Options_TooltipConfig.type = "buff"
								TPerl_Options_TooltipConfig:SetParent(self)
								TPerl_Options_TooltipConfig:SetPoint("TOPLEFT", self, "BOTTOMLEFT", 0, 6)
								TPerl_Options_TooltipConfig:Hide()
								TPerl_Options_TooltipConfig:Show()
							</OnEnter>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_UnitTooltips" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BuffTooltips" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_UNITTOOLTIPS")
								self.configBase = "TPerlDB.tooltip"
								self.configIndex = "enable"
								--self.Validate = function()
								--TPerl_Options_EnableSibling(self, "NotInCombat", "or", "BuffTooltips")
								--TPerl_Options_EnableSibling(self, "TooltipAlways", "or", "BuffTooltips")
								--TPerl_Options_EnableSibling(self, "TooltipAlt", "or", "BuffTooltips")
								--TPerl_Options_EnableSibling(self, "TooltipShift", "or", "BuffTooltips")
								--TPerl_Options_EnableSibling(self, "TooltipCtrl", "or", "BuffTooltips")
								--end
							</OnLoad>
							<OnEnter>
								TPerl_Options_CheckButton_OnEnter(self)
								TPerl_Options_TooltipConfig.type = "unit"
								TPerl_Options_TooltipConfig:SetParent(self)
								TPerl_Options_TooltipConfig:SetPoint("TOPLEFT", self, "BOTTOMLEFT", 0, 6)
								TPerl_Options_TooltipConfig:Hide()
								TPerl_Options_TooltipConfig:Show()
							</OnEnter>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_FadingTooltips" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_UnitTooltips" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FADINGTOOLTIP")
								self.configBase = "TPerlDB.tooltip"
								self.configIndex = "fading"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Fullscreen" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_FadingTooltips" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_FULLSCREEN")
								self.configBase = "TPerlDB.player.fullScreen"
								self.configIndex = "enable"
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "FullscreenWarn")
									TPerl_Options_EnableSibling(self, "FullscreenOK")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Slider name="$parent_FullscreenWarn" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="80" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Fullscreen" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="20" y="-2"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetScale(0.8)
								self:SetMinMaxValues(1, 75)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_FULLSCREENWARN")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.player.fullScreen.lowHP)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.player.fullScreen.lowHP ~= value) then
									TPerlDB.player.fullScreen.lowHP = floor(value + 0.5)
									TPerl_Options_Global_Options_FullscreenOK:SetMinMaxValues(TPerlDB.player.fullScreen.lowHP, 100)
									TPerl_Options_Global_Options_FullscreenOKLow:SetText(TPerlDB.player.fullScreen.lowHP)
								end
								_G[self:GetName().."Current"]:SetText(TPerlDB.player.fullScreen.lowHP)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Slider name="$parent_FullscreenOK" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="80" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_FullscreenWarn" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="8" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetScale(0.8)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_FULLSCREENOK")
							</OnLoad>
							<OnShow>
								self:SetMinMaxValues((TPerlDB and TPerlDB.player.fullScreen.lowHP) or 0, 100)
								self:SetValue(TPerlDB.player.fullScreen.highHP)
							</OnShow>
							<OnValueChanged>
								TPerlDB.player.fullScreen.highHP = floor(value + 0.5)
								_G[self:GetName().."Current"]:SetText(TPerlDB.player.fullScreen.highHP)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<!--<CheckButton name="$parent_TPerlTooltips" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="-160" y="-6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TPERL_TOOLTIP_INFO")
								self.configBase = "TPerlDB.tooltip"
								self.configIndex = "xperlInfo"
							</OnLoad>
						</Scripts>
					</CheckButton>-->

					<CheckButton name="$parent_Minimap" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="-160" y="-6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MINIMAP_ICON")
								self.flashFrame = LibDBIcon10_TPerl_UnitFrames
								self.configBase = "TPerlDB.minimap"
								self.configIndex = "enable"
								self.configClick = function()
									if (TPerlDB.minimap.enable) then
										LibDBIcon10_TPerl_UnitFrames:Show()
									else
										LibDBIcon10_TPerl_UnitFrames:Hide()
									end
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ShowAFK" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Minimap" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_SHOWAFKFLAG")
								self.configBase = "TPerlDB"
								self.configIndex = "showAFK"
								self.configClick = TPerl_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ShowFD" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ShowAFK" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_SHOWFD")
								self.configBase = "TPerlDB"
								self.configIndex = "showFD"
								self.configClick = TPerl_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ShowReadyCheck" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ShowFD" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_SHOWREADYCHECK")
								self.configBase = "TPerlDB"
								self.configIndex = "showReadyCheck"
								self.configClick = TPerl_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_TPerlOldRoleIcons" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ShowReadyCheck" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TPERLOLDROLEICONS")
								self.configBase = "TPerlDB"
								self.configIndex = "xperlOldroleicons"
								self.configClick = TPerl_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_SettingsMethod" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="-200" y="215"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_SAVEPERCHARACTER")
							</OnLoad>
							<OnClick>
								TPerlConfigSavePerCharacter = self:GetChecked()
								TPerl_SetMyGlobal()
								TPerl_Options_LoadSettings:Hide()
								TPerl_Options_LoadSettings:Show()
								TPerl_Options_DeleteSettings:Hide()
								TPerl_Options_DeleteSettings:Show()
							</OnClick>
							<OnShow>
								self:SetChecked(TPerlConfigSavePerCharacter)
							</OnShow>
						</Scripts>
					</CheckButton>

					<Button name="$parent_Reset" inherits="TPerlButtonTemplate">
						<Size>
							<AbsDimension x="110" y="24"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_SettingsMethod" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_Options_RegisterProtected(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RESET_DEFAULTS")
							</OnLoad>
							<OnClick>
								TPerl_Options_Mask:Show()
								TPerl_Popup(TPERL_CONF_CONFIRM_RESET, TPerl_ResetDefaults)
							</OnClick>
						</Scripts>
					</Button>

					<Frame name="TPerl_Options_LoadSettings" inherits="TPerlBackdropTemplate" enableMouse="true">
						<Size>
							<AbsDimension x="150" y="24"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Reset" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="-15" y="-18"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Layers>
							<Layer level="BACKGROUND">
								<FontString name="$parentLabel" inherits="GameFontNormalSmall" text="TPERL_CONF_LOAD_SETTINGS">
									<Anchors>
										<Anchor point="BOTTOMLEFT" relativePoint="TOPLEFT">
											<Offset>
												<AbsDimension x="21" y="3"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								TPerl_Options_LoadSettings_OnLoad(self)
							</OnLoad>
							<OnShow>
								if (not TPerlConfigSavePerCharacter) then
									self:Hide()
								end
							</OnShow>
							<OnEnter>
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT", -15, 0)
								GameTooltip:SetText(TPERL_CONF_LOAD_SETTINGS_DESC, nil, nil, nil, nil, true)
								_G[self:GetName().."Label"]:SetTextColor(HIGHLIGHT_FONT_COLOR.r, HIGHLIGHT_FONT_COLOR.g, HIGHLIGHT_FONT_COLOR.b)
							</OnEnter>
							<OnLeave>
								_G[self:GetName().."Label"]:SetTextColor(NORMAL_FONT_COLOR.r, NORMAL_FONT_COLOR.g, NORMAL_FONT_COLOR.b)
								GameTooltip:Hide()
							</OnLeave>
						</Scripts>
					</Frame>

					<Frame name="TPerl_Options_DeleteSettings" inherits="TPerlBackdropTemplate" enableMouse="true">
						<Size>
							<AbsDimension x="150" y="24"/>
						</Size>
						<Anchors>
							<Anchor point="TOPRIGHT" relativeTo="TPerl_Options_LoadSettings" relativePoint="TOPLEFT">
								<Offset>
									<AbsDimension x="-20" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Layers>
							<Layer level="BACKGROUND">
								<FontString name="$parentLabel" inherits="GameFontNormalSmall" text="TPERL_CONF_DELETE_SETTINGS">
									<Anchors>
										<Anchor point="BOTTOMLEFT" relativePoint="TOPLEFT">
											<Offset>
												<AbsDimension x="21" y="3"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								TPerl_Options_DeleteSettings_OnLoad(self)
							</OnLoad>
							<OnShow>
								if (not TPerlConfigSavePerCharacter) then
									self:Hide()
								end
							</OnShow>
							<OnEnter>
								GameTooltip:SetOwner(self, "ANCHOR_RIGHT", -15, 0)
								GameTooltip:SetText(TPERL_CONF_DELETE_SETTINGS_DESC, nil, nil, nil, nil, true)
								_G[self:GetName().."Label"]:SetTextColor(HIGHLIGHT_FONT_COLOR.r, HIGHLIGHT_FONT_COLOR.g, HIGHLIGHT_FONT_COLOR.b)
							</OnEnter>
							<OnLeave>
								_G[self:GetName().."Label"]:SetTextColor(NORMAL_FONT_COLOR.r, NORMAL_FONT_COLOR.g, NORMAL_FONT_COLOR.b)
								GameTooltip:Hide()
							</OnLeave>
						</Scripts>
					</Frame>
				</Frames>
			</Frame>

			<!-- Player Options -->
			<Frame name="$parent_Player_Options" inherits="TPerlBackdropTemplate" hidden="true">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="TPerl_Options_Area_Tabs"/>
					<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs"/>
				</Anchors>
				<Scripts>
					<OnLoad>
						self:OnBackdropLoaded()
						self:SetScale(0.9)
					</OnLoad>
					<OnShow>
						if (not C_AddOns.IsAddOnLoaded("TPerl_ArcaneBar")) then
							local n = self:GetName().."_"
							TPerl_Options_EnableCheck(_G[n.."ArcaneBar"])
							TPerl_Options_EnableCheck(_G[n.."PreCast"])
							TPerl_Options_EnableCheck(_G[n.."CastTime"])
							TPerl_Options_EnableCheck(_G[n.."CastTimeInside"])
							TPerl_Options_EnableCheck(_G[n.."OldCastBar"])
						end
					</OnShow>
				</Scripts>
				<Frames>
					<CheckButton name="$parent_Portrait" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="6" y="-3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PORTRAIT")
								self.flashFrame = TPerl_PlayerportraitFrame
								self.configBase = "TPerlDB.player"
								self.configIndex = "portrait"
								self.configClick = TPerl_Player_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "Portrait3D")
									TPerl_Options_EnableSibling(self, "ClassPortrait")
									TPerl_Options_EnableSibling(self, "Extend")
									TPerl_Options_EnableSibling(self, "HitIndicator")
								end
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Portrait3D" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Portrait" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PORTRAIT3D")
								self.flashFrame = TPerl_PlayerportraitFrame
								self.configBase = "TPerlDB.player"
								self.configIndex = "portrait3D"
								self.configClick = TPerl_Player_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ClassPortrait" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Portrait3D" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_CLASSPORTRAIT")
								self.flashFrame = TPerl_TargetportraitFrame
								self.configBase = "TPerlDB.player"
								self.configIndex = "classPortrait"
								self.configClick = TPerl_Player_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Extend" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ClassPortrait" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_EXTENDPORTRAIT")
								self.flashFrame = TPerl_PlayerportraitFrame
								self.configBase = "TPerlDB.player"
								self.configIndex = "extendPortrait"
								self.configClick = TPerl_Player_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HitIndicator" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Extend" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_HIT_INDICATOR")
								self.configBase = "TPerlDB.player"
								self.configIndex = "hitIndicator"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ShowRunes" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Portrait" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="-75"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								local _, class = UnitClass("player")
								if (class ~= "ROGUE" and class ~= "DEATHKNIGHT" and class ~= "DRUID" and class ~= "WARLOCK" and class ~= "PALADIN" and class ~= "PRIEST" and class ~= "SHAMAN" and class ~= "MONK" and class ~= "MAGE" and class ~= "EVOKER") then
									self:Hide()
								end
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_SHOW_RUNES")
								self.configBase = "TPerlDB.player"
								self.flashFrame = TPerl_Player and TPerl_Player.runes
								self.configIndex = "showRunes"
								self.configClick = TPerl_ShowRunes_OnClick
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "DockRunes")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_DockRunes" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ShowRunes" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="95" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								local _, class = UnitClass("player")
								if (class ~= "ROGUE" and class ~= "DEATHKNIGHT" and class ~= "DRUID" and class ~= "SHAMAN" and class ~= "WARLOCK" and class ~= "PALADIN" and class ~= "MONK" and class ~= "MAGE" and class ~= "PRIEST" and class ~= "EVOKER") then
									self:Hide()
								end
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_DOCKRUNES")
								self.configBase = "TPerlDB.player"
								self.flashFrame = TPerl_Player and TPerl_Player.runes
								self.configIndex = "dockRunes"
								self.configClick = TPerl_DockRunes_OnClick
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_LockRunes" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_DockRunes" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="105" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								local _, class = UnitClass("player")
								if (class ~= "ROGUE" and class ~= "DEATHKNIGHT" and class ~= "DRUID" and class ~= "SHAMAN" and class ~= "WARLOCK" and class ~= "PALADIN" and class ~= "PRIEST" and class ~= "MONK" and class ~= "MAGE" and class ~= "EVOKER") then
									self:Hide()
								end
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_LOCKRUNES")
								self.configBase = "TPerlDB.player"
								self.flashFrame = TPerl_Player and TPerl_Player.runes
								self.configIndex = "lockRunes"
								self.configClick = TPerl_LockRunes_OnConfigClick
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ArcaneBar" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ShowRunes" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								local _, class = UnitClass("player")
								if (class ~= "ROGUE" and class ~= "DEATHKNIGHT" and class ~= "DRUID" and class ~= "WARLOCK" and class ~= "PALADIN" and class ~= "SHAMAN" and class ~= "PRIEST" and class ~= "MONK" and class ~= "MAGE" and class ~= "EVOKER") then
									self:ClearAllPoints()
									self:SetPoint("TOPLEFT", TPerl_Options_Player_Options_ShowRunes, "TOPLEFT")
								end
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ARCANE_BAR")
								self.configBase = "TPerlDB.player.castBar"
								self.configIndex = "enable"
								self.configClick = TPerl_ArcaneBar_Set
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "CastTime")
									TPerl_Options_EnableSibling(self, "PreCast")
									TPerl_Options_EnableSibling(self, "CastTimeInside", "CastTime")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_PreCast" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_ArcaneBar" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ARCANE_PRECAST")
								self.configBase = "TPerlDB.player.castBar"
								self.configIndex = "precast"
								self.configClick = TPerl_ArcaneBar_Set
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_CastTime" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_PreCast" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_CAST_TIME")
								self.configBase = "TPerlDB.player.castBar"
								self.configIndex = "castTime"
								self.configClick = TPerl_ArcaneBar_Set
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "CastTimeInside")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_CastTimeInside" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="22" y="22"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_CastTime" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_CAST_TIME_INSIDE")
								self.configBase = "TPerlDB.player.castBar"
								self.configIndex = "inside"
								self.configClick = function()
									TPerl_ArcaneBar_Set()
									TPerl_Player_Reset()
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_OldCastBar" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPRIGHT" relativeTo="$parent_CastTimeInside" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ORIGINAL_CASTBAR")
								self.configBase = "TPerlDB.player.castBar"
								self.configIndex = "original"
								self.configClick = TPerl_ArcaneBar_Set
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_PlayerLevel" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPRIGHT" relativeTo="$parent_OldCastBar" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_LEVEL")
								self.flashFrame = TPerl_PlayerlevelFrame
								self.configBase = "TPerlDB.player"
								self.configIndex = "level"
								self.configClick = TPerl_Player_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_PlayerClassIcon" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_PlayerLevel" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_ICON")
								self.flashFrame = TPerl_PlayerclassFrame
								self.configBase = "TPerlDB.player"
								self.configIndex = "classIcon"
								self.configClick = TPerl_Player_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HealPrediction" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_PlayerLevel" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_HEAL_PREDICTION")
								self.configBase = "TPerlDB.player"
								self.configIndex = "healprediction"
								self.configClick = TPerl_Player_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Absorbs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_HealPrediction" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_ABSORBS")
								self.configBase = "TPerlDB.player"
								self.configIndex = "absorbs"
								self.configClick = TPerl_Player_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Hots" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_Absorbs" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								if WOW_PROJECT_ID ~= WOW_PROJECT_MISTS_CLASSIC then
									self:Hide()
									return
								end
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_HOTS")
								self.configBase = "TPerlDB.player"
								self.configIndex = "hotPrediction"
								self.configClick = TPerl_Player_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_PlayerXP" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HealPrediction" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_XP")
								self.flashFrame = TPerl_PlayerstatsFramexpBar
								self.configBase = "TPerlDB.player"
								self.configIndex = "xpBar"
								self.configClick = TPerl_Player_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "XPDeficit")
								end
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_PlayerDruidBar" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_PlayerXP" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								local _, class = UnitClass("player")
								if (class ~= "DRUID" and class ~= "SHAMAN" and class ~= "PRIEST") then
									self:Hide()
								end

								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_MANABAR")
								self.configBase = "TPerlDB.player"
								self.configIndex = "noDruidBar"
								self.configClick = TPerl_Player_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_XPDeficit" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_PlayerXP" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_XPDEFICIT")
								self.flashFrame = TPerl_PlayerstatsFramexpBar
								self.configBase = "TPerlDB.player"
								self.configIndex = "xpDeficit"
								self.configClick = TPerl_Player_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_PlayerRep" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPRIGHT" relativeTo="$parent_XPDeficit" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_REP")
								self.flashFrame = TPerl_PlayerstatsFramerepBar
								self.configBase = "TPerlDB.player"
								self.configIndex = "repBar"
								self.configClick = TPerl_Player_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_PVPIcon" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_PlayerRep" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PVPICON")
								self.flashFrame = TPerl_PlayernameFramepvpIcon
								self.configBase = "TPerlDB.player"
								self.configIndex = "pvpIcon"
								self.configClick = TPerl_Player_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Values" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_PVPIcon" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_VALUES")
								self.flashFrame = {TPerl_PlayerstatsFramehealthBartext, TPerl_PlayerstatsFramemanaBartext, TPerl_PlayerstatsFramexpBartext}
								self.configBase = "TPerlDB.player"
								self.configIndex = "values"
								self.configClick = TPerl_Player_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Percent" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Values" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PERCENT")
								self.flashFrame = {TPerl_PlayerstatsFramehealthBarpercent, TPerl_PlayerstatsFramemanaBarpercent, TPerl_PlayerstatsFramexpBarpercent}
								self.configBase = "TPerlDB.player"
								self.configIndex = "percent"
								self.configClick = TPerl_Player_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Number" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Values" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_PARTY_NUM")
								self.flashFrame = TPerl_PlayergroupFrame
								self.configBase = "TPerlDB.player"
								self.configIndex = "partyNumber"
								self.configClick = TPerl_Player_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "WithName")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_WithName" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Number" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_PARTYWITHNAME")
								self.configBase = "TPerlDB.player"
								self.configIndex = "withName"
								self.configClick = TPerl_Player_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Frame name="$parent_Healer" inherits="TPerl_Options_HealerModeTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_WithName" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="-16" y="5"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								self.getEnable = function() return TPerlDB.player.healerMode.enable end
								self.setEnable = function(n)
									TPerlDB.player.healerMode.enable = n
									TPerl_Player_Reset()
								end
								self.getType = function() return TPerlDB.player.healerMode.type end
								self.setType = function(n)
									TPerlDB.player.healerMode.type = n
									TPerl_Player_Reset()
								end
							</OnLoad>
						</Scripts>
					</Frame>

					<Slider name="$parent_Width" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="150" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Healer" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="5" y="-10"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(0, 100)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_WIDTHBONUS")
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.player.size.width or 0)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.player.size.width ~= value) then
									TPerlDB.player.size.width = value
									TPerl_Player_SetWidth(TPerl_Player)
								end
								_G[self:GetName().."Current"]:SetText(TPerlDB.player.size.width)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Frame name="$parent_Buffs" inherits="TPerlBackdropTemplate">
						<KeyValues>
							<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_6" type="global"/>
						</KeyValues>
						<Scripts>
							<OnShow>
								if (not C_AddOns.IsAddOnLoaded("TPerl_PlayerBuffs")) then
									self:Hide()
								end
							</OnShow>
						</Scripts>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="TOP" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="0" y="-5"/>
								</Offset>
							</Anchor>
							<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="-5" y="-15"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Frames>
							<Button name="$parent_Title">
								<Size>
									<AbsDimension x="60" y="10"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT">
										<Offset>
											<AbsDimension x="3" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Layers>
									<Layer level="ARTWORK">
										<FontString name="$parentText" inherits="GameFontNormalSmall" text="TPERL_CONF_PLAYERBUFF_OPTIONS">
											<Color r="1" g="1" b="1" a="1"/>
											<Anchors>
												<Anchor point="LEFT"/>
											</Anchors>
										</FontString>
									</Layer>
								</Layers>
							</Button>

							<CheckButton name="$parent_PlayerBuffs" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="30" y="30"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Title">
										<Offset>
											<AbsDimension x="0" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_BUFFS")
										--self.flashFrame = TPerl_PlayerbuffFrame
										self.configBase = "TPerlDB.player.buffs"
										self.configIndex = "enable"
										self.configClick = function()
											TPerl_OptionActions()
											if (TPerl_Player_BuffSetup) then
												TPerl_Player_BuffSetup(TPerl_Player)
											end
										end
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "PlayerDebuffs")
											TPerl_Options_EnableSibling(self, "PlayerBuffsAbove")
											--TPerl_Options_EnableSibling(self, "HideBlizzardBuffBar")
											TPerl_Options_EnableSibling(self, "FlashExpiring")
											TPerl_Options_EnableSibling(self, "Cooldowns")
											TPerl_Options_EnableSibling(self, "MaxBuffs")
											TPerl_Options_EnableSibling(self, "BuffSize")
											TPerl_Options_EnableSibling(self, "DebuffSize")
											TPerl_Options_EnableSibling(self, "BuffWrap")
											TPerl_Options_EnableSibling(self, "MaxRows")
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_PlayerDebuffs" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOP" relativeTo="$parent_PlayerBuffs" relativePoint="BOTTOMRIGHT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_DEBUFFS")
										--self.flashFrame = TPerl_PlayerbuffFrame
										self.configBase = "TPerlDB.player.debuffs"
										self.configIndex = "enable"
										self.configClick = function()
											TPerl_OptionActions()
											if (TPerl_Player_BuffSetup) then
												TPerl_Player_BuffSetup(TPerl_Player)
											end
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_PlayerBuffsAbove" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOP" relativeTo="$parent_PlayerDebuffs" relativePoint="BOTTOMRIGHT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_BUFFSABOVE")
										--self.flashFrame = TPerl_PlayerbuffFrame
										self.configBase = "TPerlDB.player.buffs"
										self.configIndex = "above"
										self.configClick = function()
											if (TPerl_Player_BuffSetup) then
												TPerl_Player_BuffSetup(TPerl_Player)
											end
										end
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_FlashExpiring" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_PlayerBuffsAbove" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_BUFFSFLASHEXPIRE")
										--self.flashFrame = TPerl_PlayerbuffFrame
										self.configBase = "TPerlDB.player.buffs"
										self.configIndex = "flash"
										self.configClick = function()
											if (TPerl_Player_BuffSetup) then
												TPerl_Player_BuffSetup(TPerl_Player)
											end
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Cooldowns" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_FlashExpiring" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_BUFFSCOOLDOWNS")
										--self.flashFrame = TPerl_PlayerbuffFrame
										self.configBase = "TPerlDB.player.buffs"
										self.configIndex = "cooldown"
										self.configClick = function()
											if (TPerl_Player_BuffSetup) then
												TPerl_Player_BuffSetup(TPerl_Player)
											end
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<Slider name="$parent_MaxBuffs" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="110" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Cooldowns" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="6" y="-10"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetMinMaxValues(4, 40)
										self:SetValueStep(1)
										self:SetObeyStepOnDrag(true)
										TPerl_SliderSetup(self)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_MAXBUFFS")
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
									<OnShow>
										self:SetValue(TPerlDB.player.buffs.count)
									</OnShow>
									<OnValueChanged>
										if (TPerlDB.player.buffs.count ~= value) then
											TPerlDB.player.buffs.count = value
											if (TPerl_Player_BuffSetup) then
												TPerl_Player_BuffSetup(TPerl_Player)
											end
										end
										_G[self:GetName().."Current"]:SetText(value)
									</OnValueChanged>
								</Scripts>
							</Slider>

							<Slider name="$parent_BuffSize" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="110" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_MaxBuffs">
										<Offset>
											<AbsDimension x="0" y="-18"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetMinMaxValues(7, 38)
										self:SetValueStep(1)
										self:SetObeyStepOnDrag(true)
										TPerl_SliderSetup(self)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_BUFFSIZE")
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
									<OnShow>
										self:SetValue(TPerlDB.player.buffs.size)
									</OnShow>
									<OnValueChanged>
										if (TPerlDB.player.buffs.size ~= value) then
											TPerlDB.player.buffs.size = value
											if (TPerl_Player_BuffSetup) then
												TPerl_Player_BuffSetup(TPerl_Player)
											end
										end
										_G[self:GetName().."Current"]:SetText(value)
									</OnValueChanged>
								</Scripts>
							</Slider>

							<Slider name="$parent_DebuffSize" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="110" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_BuffSize" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="10" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetMinMaxValues(7, 45)
										self:SetValueStep(1)
										self:SetObeyStepOnDrag(true)
										TPerl_SliderSetup(self)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_DEBUFFSIZE")
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
									<OnShow>
										self:SetValue(TPerlDB.player.debuffs.size or TPerlDB.player.buffs.size)
									</OnShow>
									<OnValueChanged>
										if (TPerlDB.player.debuffs.size ~= value) then
											TPerlDB.player.debuffs.size = value
											if (TPerl_Player_BuffSetup) then
												TPerl_Player_BuffSetup(TPerl_Player)
											end
										end
										_G[self:GetName().."Current"]:SetText(value)
									</OnValueChanged>
								</Scripts>
							</Slider>

							<CheckButton name="$parent_BuffWrap" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_BuffSize" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="-3" y="-8"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_WRAPBUFFS")
										--self.flashFrame = {TPerl_PlayerbuffFrame, TPerl_PlayerdebuffFrame}
										self.configBase = "TPerlDB.player.buffs"
										self.configIndex = "wrap"
										self.configClick = TPerl_Player_Reset
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "MaxRows")
										end
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<Slider name="$parent_MaxRows" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="120" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="LEFT" relativeTo="$parent_BuffWrap" relativePoint="RIGHT">
										<Offset>
											<AbsDimension x="80" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetScale(0.8)
										self:SetMinMaxValues(1, 10)
										self:SetValueStep(1)
										self:SetObeyStepOnDrag(true)

										local t = TPerl_Options_GetSibling("BuffWrap", self)
										local t2 = _G[t:GetName().."Text"]
										self:SetPoint("LEFT", t, "RIGHT", (t2:GetStringWidth() + 10) / 0.8, 0)

										TPerl_SliderSetup(self)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_BUFF_ROWS")
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
									<OnShow>
										self:SetValue(TPerlDB.player.buffs.rows or 2)
									</OnShow>
									<OnValueChanged>
										if (TPerlDB.player.buffs.rows ~= value) then
											TPerlDB.player.buffs.rows = value
											TPerl_Player_Reset()
										end
										_G[self:GetName().."Current"]:SetText(value)
									</OnValueChanged>
								</Scripts>
							</Slider>

							<CheckButton name="$parent_HideBlizzardBuffBar" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="30" y="30"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_PlayerBuffs" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-180"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_BUFFSHIDEBLIZZ")
										--self.flashFrame = TPerl_PlayerbuffFrame
										self.configBase = "TPerlDB.player.buffs"
										self.configIndex = "hideBlizzard"
										self.configClick = function()
											if (TPerl_Player_BuffSetup) then
												TPerl_Player_BuffSetup(TPerl_Player)
											end
											if WOW_PROJECT_ID >= WOW_PROJECT_CLASSIC then
												BuffFrame_Update()
											end
										end
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>
						</Frames>
					</Frame>

					<Frame name="$parent_Totems" inherits="TPerlBackdropTemplate">
						<KeyValues>
							<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_6" type="global"/>
						</KeyValues>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								local _, class = UnitClass("player")
								if (class == "PALADIN" or class == "SHAMAN" or class == "DRUID" or class == "MAGE" or class == "MONK" or class == "PRIEST" or class == "WARLOCK" or class == "WARRIOR" or class == "DEATHKNIGHT") then
									self:Show()
								else
									self:Hide()
								end
							</OnLoad>
						</Scripts>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Buffs">
								<Offset>
									<AbsDimension x="0" y="-5"/>
								</Offset>
							</Anchor>
							<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="-5" y="5"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<FontString inherits="GameFontNormalSmall" text="TPERL_CONF_PLAYER_TOTEMS">
									<Color r="1" g="1" b="1" a="1"/>
									<Anchors>
										<Anchor point="TOPLEFT">
											<Offset>
												<AbsDimension x="5" y="-5"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
						<Frames>
							<CheckButton name="$parent_Enable" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT">
										<Offset>
											<AbsDimension x="5" y="-20"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_Options_RegisterProtected(self)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_TOTEMS_ENABLE")
										self.configBase = "TPerlDB.player.totems"
										self.configIndex = "enable"
										self.configClick = function()
											TPerl_Player_Set_Bits(TPerl_Player)
										end
									</OnLoad>
								</Scripts>
							</CheckButton>
							<Slider name="$parent_OffsetX" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="140" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Enable" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="5" y="-15"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_Options_RegisterProtected(self)
										self:SetMinMaxValues(-1000, 1000)
										self:SetValueStep(1)
										self:SetObeyStepOnDrag(true)
										_G[self:GetName().."Low"]:SetText(-1000)
										_G[self:GetName().."High"]:SetText(1000)
										TPerl_SliderSetup(self)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_TOTEM_OFFSETX")
									</OnLoad>
									<OnShow>
										self:SetValue(TPerlDB.player.totems and TPerlDB.player.totems.offsetX or 0)
									</OnShow>
									<OnValueChanged>
										if (TPerlDB.player.totems) then
											if (TPerlDB.player.totems.offsetX ~= value) then
												TPerlDB.player.totems.offsetX = value
												TPerl_Player_SetTotems(TPerl_Player)
											end
										end
										_G[self:GetName().."Current"]:SetText(value)
									</OnValueChanged>
								</Scripts>
							</Slider>
							<Slider name="$parent_OffsetY" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="140" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_OffsetX" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-20"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_Options_RegisterProtected(self)
										self:SetMinMaxValues(-800, 800)
										self:SetValueStep(1)
										self:SetObeyStepOnDrag(true)
										_G[self:GetName().."Low"]:SetText(-800)
										_G[self:GetName().."High"]:SetText(800)
										TPerl_SliderSetup(self)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_TOTEM_OFFSETY")
									</OnLoad>
									<OnShow>
										self:SetValue(TPerlDB.player.totems and TPerlDB.player.totems.offsetY or 0)
									</OnShow>
									<OnValueChanged>
										if (TPerlDB.player.totems) then
											if (TPerlDB.player.totems.offsetY ~= value) then
												TPerlDB.player.totems.offsetY = value
												TPerl_Player_SetTotems(TPerl_Player)
											end
										end
										_G[self:GetName().."Current"]:SetText(value)
									</OnValueChanged>
								</Scripts>
							</Slider>
							<CheckButton name="$parent_DemonicFuryText" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_OffsetY" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-5"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_DEMONICFURYTEXT") 
										self.configBase = "TPerlDB.player.SpecialPowerBars"
										self.configIndex = "showDemonicFuryText"
										self.configClick = TPerl_ToggleDemonicFuryText
									</OnLoad>
								</Scripts>
							</CheckButton>
						</Frames>
					</Frame>
				</Frames>
			</Frame>

			<!-- Pet Options -->
			<Frame name="$parent_Pet_Options" inherits="TPerlBackdropTemplate" hidden="true">
				<Scripts>
					<OnLoad>
						self:OnBackdropLoaded()
						self:SetScale(0.9)
					</OnLoad>
				</Scripts>
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="TPerl_Options_Area_Tabs"/>
					<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs"/>
				</Anchors>
				<Frames>
					<CheckButton name="$parent_PetName" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="6" y="-3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_NAME")
								self.flashFrame = TPerl_Player_PetnameFrame
								self.configBase = "TPerlDB.pet"
								self.configIndex = "name"
								self.configClick = TPerl_Player_Pet_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Portrait" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_PetName">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_PORTRAIT")
								self.flashFrame = TPerl_Player_PetportraitFrame
								self.configBase = "TPerlDB.pet"
								self.configIndex = "portrait"
								self.configClick = TPerl_Player_Pet_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "Portrait3D")
									TPerl_Options_EnableSibling(self, "Extend")
									TPerl_Options_EnableSibling(self, "HitIndicator")
								end
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Portrait3D" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Portrait" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_PORTRAIT3D")
								self.flashFrame = TPerl_Player_PetportraitFrame
								self.configBase = "TPerlDB.pet"
								self.configIndex = "portrait3D"
								self.configClick = TPerl_Player_Pet_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Extend" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Portrait3D" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_EXTENDPORTRAIT")
								self.flashFrame = TPerl_PlayerportraitFrame
								self.configBase = "TPerlDB.pet"
								self.configIndex = "extendPortrait"
								self.configClick = TPerl_Player_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HitIndicator" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Extend" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_HIT_INDICATOR")
								self.configBase = "TPerlDB.pet"
								self.configIndex = "hitIndicator"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Threat" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Portrait" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="-55"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_THREAT")
								self.configBase = "TPerlDB.pet"
								self.configIndex = "threat"
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "ThreatName")
									TPerl_Options_EnableSibling(self, "ThreatPortrait")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ThreatName" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_Threat" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="45" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_THREAT_NAME")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.pet.threatMode == "nameFrame")
							</OnShow>
							<OnClick>
								TPerlDB.pet.threatMode = "nameFrame"
								TPerl_Options_CheckRadio(self,{"ThreatName", "ThreatPortrait"})
								TPerl_Target_UpdateDisplay(TPerl_Target)
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ThreatPortrait" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_ThreatName" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="45" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_THREAT_PORTRAIT")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.pet.threatMode == "portraitFrame")
							</OnShow>
							<OnClick>
								TPerlDB.pet.threatMode = "portraitFrame"
								TPerl_Options_CheckRadio(self,{"ThreatName", "ThreatPortrait"})
								TPerl_Target_UpdateDisplay(TPerl_Target)
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ArcaneBar" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Threat" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_CASTBAR")
								self.configBase = "TPerlDB.pet.castBar"
								self.configIndex = "enable"
								self.configClick = TPerl_ArcaneBar_Set
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Happiness" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ArcaneBar" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								if WOW_PROJECT_ID == WOW_PROJECT_MAINLINE then
									self:Hide()
									return
								end
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_HAPPINESS")
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "OnlySad")
									TPerl_Options_EnableSibling(self, "FlashSad")
								end
								self.flashFrame = TPerl_Player_PethappyFrame
								self.configBase = "TPerlDB.pet.happiness"
								self.configIndex = "enable"
								self.configClick = TPerl_Player_Pet_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_OnlySad" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativePoint="BOTTOMRIGHT" relativeTo="$parent_Happiness">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								if WOW_PROJECT_ID == WOW_PROJECT_MAINLINE then
									self:Hide()
									return
								end
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_ONLYSAD")
								self.flashFrame = TPerl_Player_PethappyFrame
								self.configBase = "TPerlDB.pet.happiness"
								self.configIndex = "onlyWhenSad"
								self.configClick = TPerl_Player_Pet_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_FlashSad" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_OnlySad" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								if WOW_PROJECT_ID == WOW_PROJECT_MAINLINE then
									self:Hide()
									return
								end
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_FLASHSAD")
								self.flashFrame = TPerl_Player_PethappyFrame
								self.configBase = "TPerlDB.pet.happiness"
								self.configIndex = "flashWhenSad"
								self.configClick = TPerl_Player_Pet_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Level" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_FlashSad" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="-15" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								if WOW_PROJECT_ID == WOW_PROJECT_MAINLINE then
									self:SetPoint("TOPLEFT", self:GetParent():GetName().."_ArcaneBar", "BOTTOMLEFT", 0, 6)
								end
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_LEVEL")
								self.flashFrame = TPerl_Player_PetlevelFrame
								self.configBase = "TPerlDB.pet"
								self.configIndex = "level"
								self.configClick = TPerl_Player_Pet_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Values" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Level" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_VALUES")
								self.configBase = "TPerlDB.pet"
								self.configIndex = "values"
								self.configClick = TPerl_Player_Pet_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HealPrediction" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Values" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PET_HEAL_PREDICTION")
								self.configBase = "TPerlDB.pet"
								self.configIndex = "healprediction"
								self.configClick = TPerl_Player_Pet_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Absorbs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_HealPrediction" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PET_ABSORBS")
								self.configBase = "TPerlDB.pet"
								self.configIndex = "absorbs"
								self.configClick = TPerl_Player_Pet_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Hots" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_Absorbs" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								if WOW_PROJECT_ID ~= WOW_PROJECT_MISTS_CLASSIC then
									self:Hide()
									return
								end
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PET_HOTS")
								self.configBase = "TPerlDB.pet"
								self.configIndex = "hotPrediction"
								self.configClick = TPerl_Player_Pet_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Slider name="$parent_Scale" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="160" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_HealPrediction">
								<Offset>
									<AbsDimension x="0" y="-8"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self.configBase = "TPerlDB.pet"
								self.configIndex = "scale"
								self.configClick = TPerl_Player_Pet_Reset
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_SCALE")
								TPerl_Options_RegisterScalingSlider(self)
							</OnLoad>
						</Scripts>
					</Slider>

					<Slider name="$parent_Width" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="160" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Scale" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="-20"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(0, 100)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_WIDTHBONUS")
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.pet.size.width or 0)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.pet.size.width ~= value) then
									TPerlDB.pet.size.width = value
									TPerl_Player_Pet_SetWidth(TPerl_Player_Pet)
								end
								_G[self:GetName().."Current"]:SetText(value)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Frame name="$parent_PetTarget" inherits="TPerlBackdropTemplate">
						<KeyValues>
							<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_6" type="global"/>
						</KeyValues>
						<Scripts>
							<OnShow>
								if (not C_AddOns.IsAddOnLoaded("TPerl_TargetTarget")) then
									self:Hide()
								end
							</OnShow>
						</Scripts>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="TOP" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="0" y="-5"/>
								</Offset>
							</Anchor>
							<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="-5" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Frames>
							<Button name="$parent_Title">
								<Size>
									<AbsDimension x="60" y="10"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT">
										<Offset>
											<AbsDimension x="3" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Layers>
									<Layer level="ARTWORK">
										<FontString name="$parentText" inherits="GameFontNormalSmall" text="TPERL_CONF_PETTARGET_OPTIONS">
											<Color r="1" g="1" b="1" a="1"/>
											<Anchors>
												<Anchor point="LEFT"/>
											</Anchors>
										</FontString>
									</Layer>
								</Layers>
							</Button>

							<CheckButton name="$parent_PetsTarget" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="30" y="30"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Title">
										<Offset>
											<AbsDimension x="0" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_TARGET")
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "Buffs")
											TPerl_Options_EnableSibling(self, "BigBuffs", "Buffs")
											TPerl_Options_EnableSibling(self, "BigDebuffs", "Buffs")
											TPerl_Options_EnableSibling(self, "BigPet", "Buffs", "BigBuffs")
											TPerl_Options_EnableSibling(self, "Above", "Buffs")
											TPerl_Options_EnableSibling(self, "Level")
											TPerl_Options_EnableSibling(self, "Values")
											TPerl_Options_EnableSibling(self, "Percent")
											TPerl_Options_EnableSibling(self, "Mana")
											TPerl_Options_EnableSibling(self, "ScalePetTarget")
											TPerl_Options_EnableSibling(self, "Width")
											TPerl_Options_EnableSibling(self, "Healer_Healer")
											TPerl_Options_EnableSibling(self, "Healer_DeficitOnly", "Healer_Healer")
											TPerl_Options_EnableSibling(self, "Healer_DeficitMax", "Healer_Healer")
											TPerl_Options_EnableSibling(self, "Healer_CurMaxDeficit", "Healer_Healer")
										end
										self.flashFrame = TPerl_TargetTarget
										self.configClick = TPerl_TargetTarget_Set_Bits
										self.configBase = "TPerlDB.pettarget"
										self.configIndex = "enable"

										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Buffs" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOP" relativeTo="$parent_PetsTarget" relativePoint="BOTTOMRIGHT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PETTARGET_BUFFS")
										self.flashFrame = TPerl_PetTargetbuffFrame
										self.configBase = "TPerlDB.pettarget.buffs"
										self.configIndex = "enable"
										self.configClick = function()
											TPerlDB.pettarget.debuffs.enable = TPerlDB.pettarget.buffs.enable
											TPerl_TargetTarget_Set_Bits()
										end
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "BigBuffs")
											TPerl_Options_EnableSibling(self, "BigDebuffs")
											TPerl_Options_EnableSibling(self, "Above")
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Above" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Buffs" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PETTARGET_BUFFSABOVE")
										self.flashFrame = TPerl_PetTargetbuffFrame
										self.configBase = "TPerlDB.pettarget.buffs"
										self.configIndex = "above"
										self.configClick = TPerl_TargetTarget_Set_Bits
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_BigBuffs" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Above" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PETTARGET_BIGBUFFS")
										self.flashFrame = TPerl_PetTargetbuffFrame
										self.configBase = "TPerlDB.pettarget.buffs"
										self.configIndex = "big"
										self.configClick = TPerl_TargetTarget_Reset
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "BigPet")
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_BigDebuffs" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_BigBuffs" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="80" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PETTARGET_BIGDEBUFFS")
										self.flashFrame = {TPerl_PetTargetbuffFrame, TPerl_PetTargetdebuffFrame}
										self.configBase = "TPerlDB.pettarget.debuffs"
										self.configIndex = "big"
										self.configClick = TPerl_TargetTarget_Reset
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_BigPet" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_BigBuffs" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PETTARGET_BIGPETBUFFS")
										self.flashFrame = {TPerl_PetTargetbuffFrame, TPerl_PetTargetdebuffFrame}
										self.configBase = "TPerlDB.pettarget.buffs"
										self.configIndex = "bigpet"
										self.configClick = TPerl_TargetTarget_Reset
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Level" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPRIGHT" relativeTo="$parent_BigPet" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PETTARGET_LEVEL")
										self.flashFrame = TPerl_PetTargetlevelFrame
										self.configBase = "TPerlDB.pettarget"
										self.configIndex = "level"
										self.configClick = TPerl_TargetTarget_Set_Bits
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Mana" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Level" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="50" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PETTARGET_MANA")
										self.flashFrame = {TPerl_PetTargetstatsFramemanaBar, TPerl_PetTargetTargetstatsFramemanaBar}
										self.configBase = "TPerlDB.pettarget"
										self.configIndex = "mana"
										self.configClick = TPerl_TargetTarget_Set_Bits
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Values" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Level" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PETTARGET_VALUES")
										self.flashFrame = {TPerl_PetTargetstatsFramehealthBartext, TPerl_PetTargetstatsFramemanaBartext}
										self.configBase = "TPerlDB.pettarget"
										self.configIndex = "values"
										self.configClick = TPerl_TargetTarget_Set_Bits
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Percent" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Values" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="50" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PETTARGET_PERCENT")
										self.flashFrame = {TPerl_PetTargetstatsFramehealthBarpercent, TPerl_PetTargetstatsFramemanaBarpercent}
										self.configBase = "TPerlDB.pettarget"
										self.configIndex = "percent"
										self.configClick = TPerl_TargetTarget_Set_Bits
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<Slider name="$parent_ScalePetTarget" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="120" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Values" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-10"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self.configBase = "TPerlDB.pettarget"
										self.configIndex = "scale"
										self.configClick = function()
											TPerl_TargetTarget_SetWidth(TPerl_PetTarget)
										end
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PETTARGET_SCALE")
										TPerl_Options_RegisterScalingSlider(self, 40)
									</OnLoad>
								</Scripts>
							</Slider>

							<Slider name="$parent_Width" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="120" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ScalePetTarget" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="10" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetMinMaxValues(0, 100)
										self:SetValueStep(1)
										self:SetObeyStepOnDrag(true)
										TPerl_SliderSetup(self)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PETTARGET_WIDTHBONUS")
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
									<OnShow>
										self:SetValue(TPerlDB.pettarget.size.width or 0)
									</OnShow>
									<OnValueChanged>
										if (TPerlDB.pettarget.size.width ~= value) then
											TPerlDB.pettarget.size.width = value
											if (TPerl_PetTarget) then
												TPerl_TargetTarget_SetWidth(TPerl_PetTarget)
											end
										end
										_G[self:GetName().."Current"]:SetText(value)
									</OnValueChanged>
								</Scripts>
							</Slider>
							<Frame name="$parent_Healer" inherits="TPerl_Options_HealerModeTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ScalePetTarget" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-10"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:OnBackdropLoaded()
										self.getEnable = function() return TPerlDB.pettarget.healerMode.enable end
										self.setEnable = function(n)
											TPerlDB.pettarget.healerMode.enable = n
											TPerl_TargetTarget_Reset()
										end
										self.getType = function() return TPerlDB.pettarget.healerMode.type end
										self.setType = function(n)
											TPerlDB.pettarget.healerMode.type = n
											TPerl_TargetTarget_Reset()
										end
									</OnLoad>
								</Scripts>
							</Frame>
						</Frames>
					</Frame>

					<CheckButton name="$parent_BuffsEnable" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_PetTarget" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_BUFFS")
								self.configBase = "TPerlDB.pet.buffs"
								self.configIndex = "enable"
								self.configClick = TPerl_Player_Pet_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "Castable")
									TPerl_Options_EnableSibling(self, "BuffSize")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Castable" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativePoint="BOTTOMRIGHT" relativeTo="$parent_BuffsEnable">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_CASTABLE")
								self.configBase = "TPerlDB.pet.buffs"
								self.configIndex = "castable"
								self.configClick = TPerl_Player_Pet_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_DebuffsEnable" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPRIGHT" relativeTo="$parent_Castable" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_DEBUFFS")
								self.configBase = "TPerlDB.pet.debuffs"
								self.configIndex = "enable"
								self.configClick = TPerl_Player_Pet_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "Curable")
									TPerl_Options_EnableSibling(self, "DebuffSize")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Curable" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativePoint="BOTTOMRIGHT" relativeTo="$parent_DebuffsEnable">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_CURABLE")
								self.configBase = "TPerlDB.pet.debuffs"
								self.configIndex = "curable"
								self.configClick = TPerl_Player_Pet_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Above" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPRIGHT" relativePoint="BOTTOM" relativeTo="$parent_Curable">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_ABOVE")
								self.configBase = "TPerlDB.pet.buffs"
								self.configIndex = "above"
								self.configClick = TPerl_Player_Pet_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BigBuffs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Above" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="7"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_BIGBUFFS")
								self.flashFrame = {TPerl_Player_PetbuffFrame, TPerl_Player_PetdebuffFrame}
								self.configBase = "TPerlDB.pet.buffs"
								self.configIndex = "big"
								self.configClick = TPerl_Player_Pet_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "BigPet")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BigDebuffs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BigBuffs" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="80" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_BIGDEBUFFS")
								self.flashFrame = {TPerl_Player_PetbuffFrame, TPerl_Player_PetdebuffFrame}
								self.configBase = "TPerlDB.pet.debuffs"
								self.configIndex = "big"
								self.configClick = TPerl_Player_Pet_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BigPet" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BigBuffs" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="7"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_BIGPETBUFFS")
								self.flashFrame = {TPerl_Player_PetbuffFrame, TPerl_Player_PetdebuffFrame}
								self.configBase = "TPerlDB.pet.buffs"
								self.configIndex = "bigpet"
								self.configClick = TPerl_Player_Pet_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BuffWrap" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_BigPet" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="7"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_WRAPBUFFS")
								self.flashFrame = {TPerl_Player_PetbuffFrame, TPerl_Player_PetdebuffFrame}
								self.configBase = "TPerlDB.pet.buffs"
								self.configIndex = "wrap"
								self.configClick = TPerl_Player_Pet_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "MaxRows")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Slider name="$parent_MaxRows" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="120" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_BuffWrap" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="80" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetScale(0.8)
								self:SetMinMaxValues(1, 10)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)

								local t = TPerl_Options_GetSibling("BuffWrap",self)
								local t2 = _G[t:GetName().."Text"]
								self:SetPoint("LEFT", t, "RIGHT", (t2:GetStringWidth() + 10) / 0.8, 0)

								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_BUFF_ROWS")
							</OnLoad>
							<OnShow>
								if not TPerlDB.pet.buffs.rows then
									TPerlDB.pet.buffs.rows = 3
								end
								self:SetValue(TPerlDB.pet.buffs.rows)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.pet.buffs.rows ~= value) then
									TPerlDB.pet.buffs.rows = value
									TPerl_Player_Pet_Reset()
								end
								_G[self:GetName().."Current"]:SetText(value)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Slider name="$parent_BuffSize" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="120" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_BuffWrap">
								<Offset>
									<AbsDimension x="0" y="-6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(7, 38)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_BUFF_SIZE")
							</OnLoad>
							<OnShow>
								if not TPerlDB.pet.buffs.size then
									TPerlDB.pet.buffs.size = 18
								end
								self:SetValue(TPerlDB.pet.buffs.size)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.pet.buffs.size ~= value) then
									TPerlDB.pet.buffs.size = value
									TPerl_Player_Pet_Reset()
								end
								_G[self:GetName().."Current"]:SetText(value)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Slider name="$parent_DebuffSize" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="120" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BuffSize" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="10" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(7, 38)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PLAYER_PET_DEBUFF_SIZE")
							</OnLoad>
							<OnShow>
								if not TPerlDB.pet.debuffs.size then
									TPerlDB.pet.debuffs.size = 18
								end
								self:SetValue(TPerlDB.pet.debuffs.size)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.pet.debuffs.size ~= value) then
									TPerlDB.pet.debuffs.size = value
									TPerl_Player_Pet_Reset()
								end
								_G[self:GetName().."Current"]:SetText(value)
							</OnValueChanged>
						</Scripts>
					</Slider>
				</Frames>
			</Frame>

			<!-- Target Options -->
			<Frame name="$parent_Target_Options" inherits="TPerlBackdropTemplate" hidden="true">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="TPerl_Options_Area_Tabs"/>
					<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs"/>
				</Anchors>
				<Scripts>
					<OnLoad>
						self:OnBackdropLoaded()
						self:SetScale(0.9)
					</OnLoad>
					<OnShow>
						if (not C_AddOns.IsAddOnLoaded("TPerl_ArcaneBar")) then
							TPerl_Options_EnableCheck(_G[self:GetName().."_".."ArcaneBar"])
						end
					</OnShow>
				</Scripts>
				<Frames>
					<CheckButton name="$parent_Portrait" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="6" y="-3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_PORTRAIT")
								self.flashFrame = TPerl_TargetportraitFrame
								self.configBase = "TPerlDB.target"
								self.configIndex = "portrait"
								self.configClick = TPerl_Target_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "Portrait3D")
									TPerl_Options_EnableSibling(self, "ClassPortrait")
									TPerl_Options_EnableSibling(self, "HitIndicator")
									--TPerl_Options_EnableSibling(self, "OnlyMine", "HitIndicator")
								end
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Portrait3D" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Portrait" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_PORTRAIT3D")
								self.flashFrame = TPerl_TargetportraitFrame
								self.configBase = "TPerlDB.target"
								self.configIndex = "portrait3D"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ClassPortrait" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Portrait3D" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_CLASSPORTRAIT")
								self.flashFrame = TPerl_TargetportraitFrame
								self.configBase = "TPerlDB.target"
								self.configIndex = "classPortrait"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HitIndicator" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ClassPortrait" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_HIT_INDICATOR")
								self.configBase = "TPerlDB.target"
								self.configIndex = "hitIndicator"
								self.Validate = function()
									--TPerl_Options_EnableSibling(self, "OnlyMine")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<!--<CheckButton name="$parent_OnlyMine" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="24" y="24"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_HitIndicator" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_HIT_ONLYMINE")
								self.configBase = "TPerlDB.target"
								self.configIndex = "ownDamageOnly"
							</OnLoad>
						</Scripts>
					</CheckButton>-->

					<CheckButton name="$parent_Defer" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Portrait" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="95" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_DEFER")
								self.configBase = "TPerlDB.target"
								self.configIndex = "defer"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_TargetSounds" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Defer" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_SOUNDS")
								self.configBase = "TPerlDB.target"
								self.configIndex = "sound"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Threat" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Portrait" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="-55"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_THREAT")
								self.configBase = "TPerlDB.target"
								self.configIndex = "threat"
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "ThreatName")
									TPerl_Options_EnableSibling(self, "ThreatPortrait")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ThreatName" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_Threat" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="50" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_THREAT_NAME")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.target.threatMode == "nameFrame")
							</OnShow>
							<OnClick>
								TPerlDB.target.threatMode = "nameFrame"
								TPerl_Options_CheckRadio(self, {"ThreatName", "ThreatPortrait"})
								TPerl_Target_UpdateDisplay(TPerl_Target)
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ThreatPortrait" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_ThreatName" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="50" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_THREAT_PORTRAIT")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.target.threatMode == "portraitFrame")
							</OnShow>
							<OnClick>
								TPerlDB.target.threatMode = "portraitFrame"
								TPerl_Options_CheckRadio(self, {"ThreatName", "ThreatPortrait"})
								TPerl_Target_UpdateDisplay(TPerl_Target)
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ArcaneBar" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Threat" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_ARCANE_BAR")
								self.configBase = "TPerlDB.target.castBar"
								self.configIndex = "enable"
								self.configClick = TPerl_ArcaneBar_Set
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Mana" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ArcaneBar" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="120" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_MANA")
								self.flashFrame = TPerl_TargetstatsFramemanaBar
								self.configBase = "TPerlDB.target"
								self.configIndex = "mana"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Reaction" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ArcaneBar" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_REACTION")
								self.flashFrame = TPerl_TargetnameFrame
								self.configBase = "TPerlDB.target"
								self.configIndex = "reactionHighlight"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ClassIcon" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Reaction" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_ICON")
								self.flashFrame = TPerl_TargettypeFramePlayerclassTexture
								self.configBase = "TPerlDB.target"
								self.configIndex = "classIcon"
								self.configClick = TPerl_Target_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "ClassText")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ClassText" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativeTo="$parent_ClassIcon" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_CLASSTEXT")
								self.flashFrame = TPerl_TargetbossFrame
								self.configBase = "TPerlDB.target"
								self.configIndex = "classText"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_MobType" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ClassIcon" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_MOBTYPE")
								self.flashFrame = TPerl_TargetcreatureTypeFrame
								self.configBase = "TPerlDB.target"
								self.configIndex = "mobType"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Level" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_MobType" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_LEVEL")
								self.flashFrame = TPerl_TargetlevelFrame
								self.configBase = "TPerlDB.target"
								self.configIndex = "level"
								self.configClick = TPerl_Target_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Elite" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_Level" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="45" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_ELITE")
							</OnLoad>
							<OnShow>
								self:SetChecked(not TPerlDB.target.eliteGfx and not TPerlDB.target.eliteNone)
							</OnShow>
							<OnClick>
								TPerlDB.target.elite = true
								TPerlDB.target.eliteGfx = nil
								TPerlDB.target.eliteNone = nil
								TPerl_Options_CheckRadio(self, {"Elite", "EliteGfx", "EliteNone"})
								TPerl_Target_UpdateDisplay(TPerl_Target)
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_EliteGfx" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Elite" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="55" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_ELITEGFX")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.target.eliteGfx)
							</OnShow>
							<OnClick>
								TPerlDB.target.elite = true
								TPerlDB.target.eliteGfx = true
								TPerlDB.target.eliteNone = nil
								TPerl_Options_CheckRadio(self, {"Elite", "EliteGfx", "EliteNone"})
								TPerl_Target_UpdateDisplay(TPerl_Target)
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_EliteNone" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_EliteGfx" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="70" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_ELITE_NONE")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.target.eliteNone)
							</OnShow>
							<OnClick>
								TPerlDB.target.elite = true
								TPerlDB.target.eliteGfx = nil
								TPerlDB.target.eliteNone = true
								TPerl_Options_CheckRadio(self, {"Elite", "EliteGfx", "EliteNone"})
								TPerl_Target_UpdateDisplay(TPerl_Target)
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HealPrediction" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Level" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_HEAL_PREDICTION")
								self.configBase = "TPerlDB.target"
								self.configIndex = "healprediction"
								self.configClick = TPerl_Target_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Absorbs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_HealPrediction" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_ABSORBS")
								self.configBase = "TPerlDB.target"
								self.configIndex = "absorbs"
								self.configClick = TPerl_Target_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Hots" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_Absorbs" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								if WOW_PROJECT_ID ~= WOW_PROJECT_MISTS_CLASSIC then
									self:Hide()
									return
								end
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_HOTS")
								self.configBase = "TPerlDB.target"
								self.configIndex = "hotPrediction"
								self.configClick = TPerl_Target_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Values" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HealPrediction" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_VALUES")
								self.flashFrame = {TPerl_TargetstatsFramehealthBartext, TPerl_TargetstatsFramemanaBartext}
								self.configBase = "TPerlDB.target"
								self.configIndex = "values"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Percent" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Values" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_PERCENT")
								self.flashFrame = {TPerl_TargetstatsFramehealthBarpercent, TPerl_TargetstatsFramemanaBarpercent}
								self.configBase = "TPerlDB.target"
								self.configIndex = "percent"
								self.configClick = TPerl_Target_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Talents" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Values" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_TALENTS")
								self.flashFrame = TPerl_TargetcreatureTypeFrame
								self.configBase = "TPerlDB.target"
								self.configIndex = "showTalents"
								self.configClick = TPerl_Target_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "TalentsAsText")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_TalentsAsText" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativeTo="$parent_Talents" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_TALENTSASTEXT")
								self.flashFrame = TPerl_TargetcreatureTypeFrame
								self.configBase = "TPerlDB.target"
								self.configIndex = "talentsAsText"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_PVPIcon" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Talents" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_PVPICON")
								self.flashFrame = TPerl_TargetnameFramepvpIcon
								self.configBase = "TPerlDB.target"
								self.configIndex = "pvpIcon"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_CPBlizzard" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_PVPIcon" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_CPBLIZZ")
								self.flashFrame = ComboFrame
								self.configBase = "TPerlDB.target.combo"
								self.configIndex = "blizzard"
								self.configClick = TPerl_Target_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "Top")
									TPerl_Options_EnableSibling(self, "Bottom")
									TPerl_Options_EnableSibling(self, "Left")
									TPerl_Options_EnableSibling(self, "Right")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Top" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_CPBlizzard" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_CPBLIZZ_POSTOP")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.target.combo.pos == "top")
							</OnShow>
							<OnClick>
								TPerlDB.target.combo.pos = "top"
								TPerl_Options_CheckRadio(self,{"Top", "Bottom", "Left", "Right"})
								TPerl_Target_Reset()
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Bottom" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Top" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="60" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_CPBLIZZ_POSBOTTOM")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.target.combo.pos == "bottom")
							</OnShow>
							<OnClick>
								TPerlDB.target.combo.pos = "bottom"
								TPerl_Options_CheckRadio(self,{"Top", "Bottom", "Left", "Right"})
								TPerl_Target_Reset()
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Left" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Top" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_CPBLIZZ_POSLEFT")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.target.combo.pos == "left")
							</OnShow>
							<OnClick>
								TPerlDB.target.combo.pos = "left"
								TPerl_Options_CheckRadio(self,{"Top", "Bottom", "Left", "Right"})
								TPerl_Target_Reset()
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Right" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Left" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="60" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_CPBLIZZ_POSRIGHT")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.target.combo.pos == "right")
							</OnShow>
							<OnClick>
								TPerlDB.target.combo.pos = "right"
								TPerl_Options_CheckRadio(self,{"Top", "Bottom", "Left", "Right"})
								TPerl_Target_Reset()
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_CPMeter" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_PVPIcon" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="-50"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_CP")
								self.flashFrame = TPerl_TargetnameFrame
								self.configBase = "TPerlDB.target.combo"
								self.configIndex = "enable"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_CPIndicator" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_CPMeter" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_CP_INDICATOR")
								self.configBase = "TPerlDB.target.comboindicator"
								self.configIndex = "enable"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_RaidIconAlt" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_CPIndicator" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_RAIDICON_ALT")
								self.flashFrame = TPerl_TargetnameFrameraidIcon
								self.configBase = "TPerlDB.target"
								self.configIndex = "raidIconAlternate"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_30yd" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_RaidIconAlt" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_30YD")
								self.configBase = "TPerlDB.target"
								self.configIndex = "range30yard"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Frame name="$parent_Healer" inherits="TPerl_Options_HealerModeTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_30yd" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								self.getEnable = function() return TPerlDB.target.healerMode.enable end
								self.setEnable = function(n)
									TPerlDB.target.healerMode.enable = n
									TPerl_Target_Reset()
								end
								self.getType = function() return TPerlDB.target.healerMode.type end
								self.setType = function(n)
									TPerlDB.target.healerMode.type = n
									TPerl_Target_Reset()
								end
							</OnLoad>
						</Scripts>
					</Frame>

					<Slider name="$parent_Width" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="150" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Healer" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="-25" y="-45"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(0, 100)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_WIDTHBONUS")
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.target.size.width or 0)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.target.size.width ~= value) then
									TPerlDB.target.size.width = value
									if (TPerl_Target) then
										TPerl_Target_SetWidth(TPerl_Target)
									end
									TPerl_Target_Reset()
									TPerl_TargetTarget_Reset()
								end
								_G[self:GetName().."Current"]:SetText(value)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Frame name="$parent_TargetTarget" inherits="TPerlBackdropTemplate">
						<KeyValues>
							<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_6" type="global"/>
						</KeyValues>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								self:SetScale(0.9)
							</OnLoad>
							<OnShow>
								if (not TPerl_TargetTarget) then
									self:Hide()
								end
							</OnShow>
						</Scripts>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="TOP" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="0" y="-5"/>
								</Offset>
							</Anchor>
							<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="-5" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Frames>
							<Button name="$parent_Title">
								<Size>
									<AbsDimension x="60" y="10"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT">
										<Offset>
											<AbsDimension x="3" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Layers>
									<Layer level="ARTWORK">
										<FontString name="$parentText" inherits="GameFontNormalSmall" text="TPERL_CONF_TARGETTARGET_OPTIONS">
											<Color r="1" g="1" b="1" a="1"/>
											<Anchors>
												<Anchor point="LEFT"/>
											</Anchors>
										</FontString>
									</Layer>
								</Layers>
							</Button>

							<CheckButton name="$parent_TargetsTarget" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Title">
										<Offset>
											<AbsDimension x="0" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETS_TARGET")
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "TargetsTargetsTarget")
											TPerl_Options_EnableSibling(self, "Buffs")
											TPerl_Options_EnableSibling(self, "Debuffs")
											TPerl_Options_EnableSibling(self, "BigBuffs", "Buffs")
											TPerl_Options_EnableSibling(self, "BigPet", "BigBuffs", "Buffs")
											TPerl_Options_EnableSibling(self, "BigDebuffs", "Debuffs")
											TPerl_Options_EnableSibling(self, "Above")
											TPerl_Options_EnableSibling(self, "TargetsTargetsTargetBuffs", "TargetsTargetsTarget")
											TPerl_Options_EnableSibling(self, "TargetsTargetsTargetDebuffs", "TargetsTargetsTarget")
											TPerl_Options_EnableSibling(self, "Level")
											TPerl_Options_EnableSibling(self, "Values")
											TPerl_Options_EnableSibling(self, "Percent")
											TPerl_Options_EnableSibling(self, "Mana")
											TPerl_Options_EnableSibling(self, "HealPrediction")
											TPerl_Options_EnableSibling(self, "Absorbs")
											TPerl_Options_EnableSibling(self, "ScaleTargetTarget")
											TPerl_Options_EnableSibling(self, "Width")
											TPerl_Options_EnableSibling(self, "Healer_Healer")
											TPerl_Options_EnableSibling(self, "Healer_DeficitOnly", "Healer_Healer")
											TPerl_Options_EnableSibling(self, "Healer_DeficitMax", "Healer_Healer")
											TPerl_Options_EnableSibling(self, "Healer_CurMaxDeficit", "Healer_Healer")
										end
										self.flashFrame = TPerl_TargetTarget
										self.configBase = "TPerlDB.targettarget"
										self.configIndex = "enable"
										self.configClick = TPerl_TargetTarget_Reset
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Buffs" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOP" relativeTo="$parent_TargetsTarget" relativePoint="BOTTOMRIGHT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETTARGET_BUFFS")
										self.flashFrame = TPerl_TargetTargetbuffFrame
										self.configBase = "TPerlDB.targettarget.buffs"
										self.configIndex = "enable"
										self.configClick = TPerl_TargetTarget_Reset
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "BigBuffs")
											TPerl_Options_EnableSibling(self, "BigPet", "BigBuffs")
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_BigBuffs" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Buffs" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETTARGET_BIGBUFFS")
										self.flashFrame = TPerl_TargetTarget_BuffFrame
										self.configBase = "TPerlDB.targettarget.buffs"
										self.configIndex = "big"
										self.configClick = function()
											TPerlDB.targettargettarget.buffs.big = TPerlDB.targettarget.buffs.big
											TPerl_TargetTarget_Reset()
										end
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "BigPet")
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_BigPet" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_BigBuffs" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETTARGET_BIGPETBUFFS")
										self.flashFrame = {TPerl_TargetTargetbuffFrame, TPerl_TargetTargetdebuffFrame}
										self.configBase = "TPerlDB.targettarget.buffs"
										self.configIndex = "bigpet"
										self.configClick = function()
											TPerlDB.targettargettarget.debuffs.bigpet = TPerlDB.targettarget.debuffs.bigpet
											TPerl_TargetTarget_Reset()
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Debuffs" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Buffs" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="130" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETTARGET_DEBUFFS")
										self.flashFrame = TPerl_TargetTargetdebuffFrame
										self.configBase = "TPerlDB.targettarget.debuffs"
										self.configIndex = "enable"
										self.configClick = TPerl_TargetTarget_Reset
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "BigDebuffs")
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_BigDebuffs" inherits="TPerlCheckButtonTemplate">
								<Size><AbsDimension x="26" y="26"/></Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Debuffs" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETTARGET_BIGDEBUFFS")
										self.flashFrame = {TPerl_TargetTargetbuffFrame, TPerl_TargetTargetdebuffFrame}
										self.configBase = "TPerlDB.targettarget.debuffs"
										self.configIndex = "big"
										self.configClick = function()
											TPerlDB.targettargettarget.debuffs.big = TPerlDB.targettarget.debuffs.big
											TPerl_TargetTarget_Reset()
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_TargetsTargetsTarget" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Buffs" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-32"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETS_TARGETS_TARGET")
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "TargetsTargetsTargetBuffs")
											TPerl_Options_EnableSibling(self, "TargetsTargetsTargetDebuffs")
										end
										self.flashFrame = TPerl_TargetTargetTarget
										self.configBase = "TPerlDB.targettargettarget"
										self.configIndex = "enable"
										self.configClick = function()
											TPerlDB.targettargettarget.debuffs.enable = TPerlDB.targettargettarget.buffs.enable
											TPerl_TargetTarget_Reset()
										end
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_TargetsTargetsTargetBuffs" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_TargetsTargetsTarget" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										_G[self:GetName().."Text"]:SetWidth(160)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETTARGETTARGET_BUFFS")
										self.flashFrame = TPerl_TargetTargetTargetbuffFrame
										self.configBase = "TPerlDB.targettargettarget.buffs"
										self.configIndex = "enable"
										self.configClick = TPerl_TargetTarget_Reset
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_TargetsTargetsTargetDebuffs" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_TargetsTargetsTargetBuffs" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="150" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										_G[self:GetName().."Text"]:SetWidth(160)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETTARGETTARGET_DEBUFFS")
										self.flashFrame = TPerl_TargetTargetTargetdebuffFrame
										self.configBase = "TPerlDB.targettargettarget.debuffs"
										self.configIndex = "enable"
										self.configClick = TPerl_TargetTarget_Reset
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Above" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_TargetsTargetsTarget" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-18"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETTARGET_BUFFSABOVE")
										self.flashFrame = TPerl_TargetTarget_BuffFrame
										self.configBase = "TPerlDB.targettarget.buffs"
										self.configIndex = "above"
										self.configClick = function()
											TPerlDB.targettargettarget.buffs.above = TPerlDB.targettarget.buffs.above
											TPerl_TargetTarget_Reset()
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Level" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOP" relativeTo="$parent_Above" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETTARGET_LEVEL")
										self.flashFrame = TPerl_TargetTargetlevelFrame
										self.configBase = "TPerlDB.targettarget"
										self.configIndex = "level"
										self.configClick = function()
											TPerlDB.targettargettarget.level = TPerlDB.targettarget.level
											TPerl_TargetTarget_Reset()
										end
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Mana" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Level" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="50" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETTARGET_MANA")
										self.flashFrame = {TPerl_TargetTargetstatsFramemanaBar, TPerl_TargetTargetTargetstatsFramemanaBar}
										self.configBase = "TPerlDB.targettarget"
										self.configIndex = "mana"
										self.configClick = function()
											TPerlDB.targettargettarget.mana = TPerlDB.targettarget.mana
											TPerl_TargetTarget_Reset()
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_HealPrediction" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Mana" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="70" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETTARGET_HEAL_PREDICTION")
										self.configBase = "TPerlDB.targettarget"
										self.configIndex = "healprediction"
										self.configClick = TPerl_TargetTarget_Reset
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Absorbs" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOP" relativeTo="$parent_HealPrediction" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETTARGET_ABSORBS")
										self.configBase = "TPerlDB.targettarget"
										self.configIndex = "absorbs"
										self.configClick = TPerl_TargetTarget_Reset
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Hots" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="BOTTOM" relativeTo="$parent_HealPrediction" relativePoint="TOP">
										<Offset>
											<AbsDimension x="0" y="-7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										if WOW_PROJECT_ID ~= WOW_PROJECT_MISTS_CLASSIC then
											self:Hide()
											return
										end
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETTARGET_HOTS")
										self.configBase = "TPerlDB.targettarget"
										self.configIndex = "hotPrediction"
										self.configClick = TPerl_TargetTarget_Reset
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Values" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Level" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETTARGET_VALUES")
										self.flashFrame = {TPerl_TargetTargetstatsFramehealthBartext, TPerl_TargetTargetstatsFramemanaBartext, TPerl_TargetTargetTargetstatsFramehealthBartext, TPerl_TargetTargetTargetstatsFramemanaBartext}
										self.configBase = "TPerlDB.targettarget"
										self.configIndex = "values"
										self.configClick = function()
											TPerlDB.targettargettarget.values = TPerlDB.targettarget.values
											TPerl_TargetTarget_Reset()
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Percent" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Values" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="50" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETTARGET_PERCENT")
										self.flashFrame = {TPerl_TargetTargetstatsFramehealthBarpercent, TPerl_TargetTargetstatsFramemanaBarpercent, TPerl_TargetTargetTargetstatsFramehealthBarpercent, TPerl_TargetTargetTargetstatsFramemanaBarpercent}
										self.configBase = "TPerlDB.targettarget"
										self.configIndex = "percent"
										self.configClick = function()
											TPerlDB.targettargettarget.percent = TPerlDB.targettarget.percent
											TPerl_TargetTarget_Reset()
										end
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<Slider name="$parent_ScaleTargetTarget" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="120" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Values" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-10"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self.configBase = "TPerlDB.targettarget"
										self.configIndex = "scale"
										self.configClick = function()
													TPerlDB.targettargettarget.scale = TPerlDB.targettarget.scale
													TPerl_TargetTarget_Reset()
												end
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETTARGET_SCALE")
										TPerl_Options_RegisterScalingSlider(self)
									</OnLoad>
								</Scripts>
							</Slider>

							<Slider name="$parent_Width" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="120" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ScaleTargetTarget" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="10" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetMinMaxValues(0, 100)
										self:SetValueStep(1)
										self:SetObeyStepOnDrag(true)
										TPerl_SliderSetup(self)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGETTARGET_WIDTHBONUS")
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
									<OnShow>
										self:SetValue(TPerlDB.targettarget.size.width or 0)
									</OnShow>
									<OnValueChanged>
										if (TPerlDB.targettarget.size.width ~= value) then
											TPerlDB.targettarget.size.width = value
											TPerlDB.targettargettarget.size.width = value
											if (TPerl_TargetTarget) then
												TPerl_TargetTarget_SetWidth(TPerl_TargetTarget)
												if (TPerl_TargetTargetTarget) then
													TPerl_TargetTarget_SetWidth(TPerl_TargetTargetTarget)
												end
											end
											TPerl_TargetTarget_Reset()
										end
										_G[self:GetName().."Current"]:SetText(value)
									</OnValueChanged>
								</Scripts>
							</Slider>
							<Frame name="$parent_Healer" inherits="TPerl_Options_HealerModeTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ScaleTargetTarget" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-10"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:OnBackdropLoaded()
										self.getEnable = function() return TPerlDB.targettarget.healerMode.enable end
										self.setEnable = function(n)
											TPerlDB.targettarget.healerMode.enable = n
											TPerlDB.targettargettarget.healerMode.enable = n
											TPerl_TargetTarget_Reset()
										end
										self.getType = function() return TPerlDB.targettarget.healerMode.type end
										self.setType = function(n)
											TPerlDB.targettarget.healerMode.type = n
											TPerlDB.targettargettarget.healerMode.type = n
											TPerl_TargetTarget_Reset()
										end
									</OnLoad>
								</Scripts>
							</Frame>
						</Frames>
					</Frame>

					<CheckButton name="$parent_Buffs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_TargetTarget" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="-3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_BUFFS_ENABLE")
								self.flashFrame = TPerl_TargetbuffFrame
								self.configBase = "TPerlDB.target.buffs"
								self.configIndex = "enable"
								self.configClick = TPerl_Target_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "Castable")
									TPerl_Options_EnableSibling(self, "OnlyMyBuffs")
									TPerl_Options_EnableSibling(self, "BigBuffs")
									TPerl_Options_EnableSibling(self, "BigPet", "BigBuffs")
									TPerl_Options_EnableSibling(self, "BigBuffsStealable")
									TPerl_Options_EnableSibling(self, "BuffSize")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Castable" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Buffs" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_CASTABLE")
								self.configBase = "TPerlDB.target.buffs"
								self.configIndex = "castable"
								self.configClick = function()
									TPerlDB.targettarget.buffs.castable = TPerlDB.target.buffs.castable
									TPerlDB.targettargettarget.buffs.castable = TPerlDB.target.buffs.castable
									TPerl_Target_Reset()
									TPerl_TargetTarget_Reset()
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_OnlyMyBuffs" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Castable" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_ONLYMYBUFFS")
								self.configBase = "TPerlDB.target.buffs"
								self.configIndex = "onlyMine"
								self.configClick = function()
									TPerlDB.targettarget.buffs.onlyMine = TPerlDB.target.buffs.onlyMine
									TPerlDB.targettargettarget.buffs.onlyMine = TPerlDB.target.buffs.onlyMine
									TPerl_Target_Reset()
									TPerl_TargetTarget_Reset()
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BigBuffs" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_OnlyMyBuffs" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_BIGBUFFS")
								self.flashFrame = {TPerl_TargetbuffFrame, TPerl_TargetdebuffFrame}
								self.configBase = "TPerlDB.target.buffs"
								self.configIndex = "big"
								self.configClick = TPerl_Target_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "BigPet")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BigPet" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BigBuffs" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="7"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_BIGPETBUFFS")
								self.flashFrame = {TPerl_TargetbuffFrame, TPerl_TargetdebuffFrame}
								self.configBase = "TPerlDB.target.buffs"
								self.configIndex = "bigpet"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BigBuffsStealable" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BigBuffs" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="-14"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_BIGSTEALABLE")
								self.flashFrame = TPerl_Target_BuffFrame
								self.configBase = "TPerlDB.target.buffs"
								self.configIndex = "bigStealable"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Debuffs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Buffs" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="100" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_DEBUFFS_ENABLE")
								self.flashFrame = TPerl_TargetdebuffFrame
								self.configBase = "TPerlDB.target.debuffs"
								self.configIndex = "enable"
								self.configClick = TPerl_Target_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "Curable")
									TPerl_Options_EnableSibling(self, "OnlyMyDebuffs")
									TPerl_Options_EnableSibling(self, "BigDebuffs")
									TPerl_Options_EnableSibling(self, "DebuffSize")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Curable" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Debuffs" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_CURABLE")
								self.configBase = "TPerlDB.target.debuffs"
								self.configIndex = "curable"
								self.configClick = TPerl_Target_Reset
								self.configClick = function()
									TPerlDB.targettarget.debuffs.curable = TPerlDB.target.debuffs.curable
									TPerlDB.targettargettarget.debuffs.curable = TPerlDB.target.debuffs.curable
									TPerl_Target_Reset()
									TPerl_TargetTarget_Reset()
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_OnlyMyDebuffs" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Curable" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_ONLYMYDEBUFFS")
								self.configBase = "TPerlDB.target.debuffs"
								self.configIndex = "onlyMine"
								self.configClick = function()
									TPerlDB.targettarget.buffs.onlyMine = TPerlDB.target.debuffs.onlyMine
									TPerlDB.targettargettarget.buffs.onlyMine = TPerlDB.target.debuffs.onlyMine
									TPerl_Target_Reset()
									TPerl_TargetTarget_Reset()
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BigDebuffs" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_OnlyMyDebuffs" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_BIGDEBUFFS")
								self.flashFrame = {TPerl_TargetbuffFrame, TPerl_TargetdebuffFrame}
								self.configBase = "TPerlDB.target.debuffs"
								self.configIndex = "big"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Slider name="$parent_BuffSize" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="120" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BigBuffsStealable" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="3" y="-8"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(7, 38)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_BUFF_SIZE")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.target.buffs.size)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.target.buffs.size ~= value) then
									TPerlDB.target.buffs.size = value
									TPerlDB.targettarget.buffs.size = value
									TPerlDB.targettargettarget.buffs.size = value
									TPerl_Target_Reset()
									TPerl_TargetTarget_Reset()
								end
								_G[self:GetName().."Current"]:SetText(value)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Slider name="$parent_DebuffSize" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="120" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BuffSize" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="10" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(7, 45)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_DEBUFF_SIZE")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.target.debuffs.size or TPerlDB.target.buffs.size)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.target.debuffs.size ~= value) then
									TPerlDB.target.debuffs.size = value
									TPerlDB.targettarget.debuffs.size = value
									TPerlDB.targettargettarget.debuffs.size = value
									TPerl_Target_Reset()
									TPerl_TargetTarget_Reset()
								end
								_G[self:GetName().."Current"]:SetText(value)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<CheckButton name="$parent_BuffWrap" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Buffs" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="-135"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_WRAPBUFFS")
								self.flashFrame = {TPerl_TargetbuffFrame, TPerl_TargetdebuffFrame}
								self.configBase = "TPerlDB.target.buffs"
								self.configIndex = "wrap"
								self.configClick = function()
									TPerlDB.targettarget.buffs.wrap = TPerlDB.target.buffs.wrap
									TPerlDB.targettargettarget.buffs.wrap = TPerlDB.target.buffs.wrap
									TPerlDB.pettarget.buffs.wrap = TPerlDB.target.buffs.wrap
									TPerl_Target_Reset()
									TPerl_TargetTarget_Reset()
								end
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "MaxRows")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Slider name="$parent_MaxRows" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="120" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_BuffWrap" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="80" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetScale(0.8)
								self:SetMinMaxValues(1, 10)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)

								local t = TPerl_Options_GetSibling("BuffWrap",self)
								local t2 = _G[t:GetName().."Text"]
								self:SetPoint("LEFT", t, "RIGHT", (t2:GetStringWidth() + 10) / 0.8, 0)

								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_BUFF_ROWS")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.target.buffs.rows or 2)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.target.buffs.rows ~= value) then
									TPerlDB.target.buffs.rows = value
									TPerlDB.targettarget.buffs.rows = value
									TPerlDB.targettargettarget.buffs.rows = value
									TPerl_Target_Reset()
									TPerl_TargetTarget_Reset()
								end
								_G[self:GetName().."Current"]:SetText(value)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<CheckButton name="$parent_Above" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BuffWrap" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_BUFFSABOVE")
								self.flashFrame = {TPerl_TargetbuffFrame, TPerl_TargetdebuffFrame}
								self.configBase = "TPerlDB.target.buffs"
								self.configIndex = "above"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_DebuffHighlight" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Above" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_DEBUFFHIGHLIGHT")
								self.configBase = "TPerlDB.target.highlightDebuffs"
								self.configIndex = "enable"
								self.configClick = TPerl_Target_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "All")
									TPerl_Options_EnableSibling(self, "Friend")
									TPerl_Options_EnableSibling(self, "Enemy")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_All" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_DebuffHighlight" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="2"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_DEBUFFHIGHLIGHT_ALL")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.target.highlightDebuffs.who == 1)
							</OnShow>
							<OnClick>
								TPerlDB.target.highlightDebuffs.who = 1
								TPerl_Options_CheckRadio(self, {"All", "Friend", "Enemy"})
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Friend" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_All" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="50" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_DEBUFFHIGHLIGHT_FRIEND")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.target.highlightDebuffs.who == 2)
							</OnShow>
							<OnClick>
								TPerlDB.target.highlightDebuffs.who = 2
								TPerl_Options_CheckRadio(self, {"All", "Friend", "Enemy"})
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Enemy" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Friend" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="50" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_DEBUFFHIGHLIGHT_FOE")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.target.highlightDebuffs.who == 3)
							</OnShow>
							<OnClick>
								TPerlDB.target.highlightDebuffs.who = 3
								TPerl_Options_CheckRadio(self, {"All", "Friend", "Enemy"})
							</OnClick>
						</Scripts>
					</CheckButton>
				</Frames>
			</Frame>

			<!-- Focus Options -->
			<Frame name="$parent_Focus_Options" inherits="TPerlBackdropTemplate" hidden="true">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="TPerl_Options_Area_Tabs"/>
					<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs"/>
				</Anchors>
				<Scripts>
					<OnLoad>
						self:OnBackdropLoaded()
						self:SetScale(0.9)
					</OnLoad>
					<OnShow>
						if (not C_AddOns.IsAddOnLoaded("TPerl_ArcaneBar")) then
							TPerl_Options_EnableCheck(_G[self:GetName().."_".."ArcaneBar"])
						end
					</OnShow>
				</Scripts>
				<Frames>
					<CheckButton name="$parent_Enable" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="6" y="-3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_ENABLE")
								self.configBase = "TPerlDB.focus"
								self.configIndex = "enable"
								self.configClick = TPerl_Target_Reset
								TPerl_Options_RegisterProtected(self)
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "Portrait")
									TPerl_Options_EnableSibling(self, "Portrait3D", "Portrait")
									TPerl_Options_EnableSibling(self, "ClassPortrait", "Portrait")
									TPerl_Options_EnableSibling(self, "HitIndicator", "Portrait")
									--TPerl_Options_EnableSibling(self, "OnlyMine", "HitIndicator")
									TPerl_Options_EnableSibling(self, "Threat")
									TPerl_Options_EnableSibling(self, "ThreatName", "Threat")
									TPerl_Options_EnableSibling(self, "ThreatPortrait", "Threat")
									TPerl_Options_EnableSibling(self, "ArcaneBar")
									TPerl_Options_EnableSibling(self, "Mana")
									TPerl_Options_EnableSibling(self, "Reaction")
									TPerl_Options_EnableSibling(self, "ClassIcon")
									TPerl_Options_EnableSibling(self, "ClassText", "ClassIcon")
									TPerl_Options_EnableSibling(self, "MobType")
									TPerl_Options_EnableSibling(self, "Level")
									TPerl_Options_EnableSibling(self, "HealPrediction")
									TPerl_Options_EnableSibling(self, "Absorbs")
									TPerl_Options_EnableSibling(self, "Elite")
									TPerl_Options_EnableSibling(self, "EliteGfx")
									TPerl_Options_EnableSibling(self, "EliteNone")
									TPerl_Options_EnableSibling(self, "Values")
									TPerl_Options_EnableSibling(self, "Percent")
									TPerl_Options_EnableSibling(self, "PVPIcon")
									TPerl_Options_EnableSibling(self, "Healer_Healer")
									TPerl_Options_EnableSibling(self, "Healer_DeficitOnly", "Healer_Healer")
									TPerl_Options_EnableSibling(self, "Healer_DeficitMax", "Healer_Healer")
									TPerl_Options_EnableSibling(self, "Healer_CurMaxDeficit", "Healer_Healer")
									TPerl_Options_EnableSibling(self, "Width")
									TPerl_Options_EnableSibling(self, "Buffs")
									TPerl_Options_EnableSibling(self, "Debuffs")
									TPerl_Options_EnableSibling(self, "BuffSize", "Buffs")
									TPerl_Options_EnableSibling(self, "DebuffSize", "Debuffs")
									TPerl_Options_EnableSibling(self, "BuffWrap")
									TPerl_Options_EnableSibling(self, "MaxRows", "BuffWrap")
									TPerl_Options_EnableSibling(self, "Castable", "Buffs")
									TPerl_Options_EnableSibling(self, "Curable", "Buffs")
									TPerl_Options_EnableSibling(self, "OnlyMyDebuffs", "Debuffs")
									TPerl_Options_EnableSibling(self, "Above")
									TPerl_Options_EnableSibling(self, "BigBuffs", "Buffs")
									TPerl_Options_EnableSibling(self, "BigDebuffs", "Debuffs")
									TPerl_Options_EnableSibling(self, "BigPet", "BigBuffs", "Buffs")
									TPerl_Options_EnableSibling(self, "DebuffHighlight")
									TPerl_Options_EnableSibling(self, "All", "DebuffHighlight")
									TPerl_Options_EnableSibling(self, "Friend", "DebuffHighlight")
									TPerl_Options_EnableSibling(self, "Enemy", "DebuffHighlight")
									TPerl_Options_EnableSibling(self, "Hots")
									--TPerl_Options_EnableSibling(self, "FocusTarget_TargetsTarget")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Portrait" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Enable" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_PORTRAIT")
								self.flashFrame = TPerl_FocusportraitFrame
								self.configBase = "TPerlDB.focus"
								self.configIndex = "portrait"
								self.configClick = TPerl_Target_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "Portrait3D", "Enable")
									TPerl_Options_EnableSibling(self, "ClassPortrait", "Enable")
									TPerl_Options_EnableSibling(self, "HitIndicator", "Enable")
									--TPerl_Options_EnableSibling(self, "OnlyMine", "HitIndicator", "Enable")
								end
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Portrait3D" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Portrait" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_PORTRAIT3D")
								self.flashFrame = TPerl_FocusportraitFrame
								self.configBase = "TPerlDB.focus"
								self.configIndex = "portrait3D"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ClassPortrait" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Portrait3D" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_CLASSPORTRAIT")
								self.flashFrame = TPerl_TargetportraitFrame
								self.configBase = "TPerlDB.focus"
								self.configIndex = "classPortrait"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HitIndicator" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ClassPortrait" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_HIT_INDICATOR")
								self.configBase = "TPerlDB.focus"
								self.configIndex = "hitIndicator"
								self.Validate = function()
									--TPerl_Options_EnableSibling(self, "OnlyMine", "Enable")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<!--<CheckButton name="$parent_OnlyMine" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="24" y="24"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_HitIndicator" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_HIT_ONLYMINE")
								self.configBase = "TPerlDB.focus"
								self.configIndex = "ownDamageOnly"
							</OnLoad>
						</Scripts>
					</CheckButton>-->

					<CheckButton name="$parent_Threat" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Portrait" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="-55"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_THREAT")
								self.configBase = "TPerlDB.focus"
								self.configIndex = "threat"
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "ThreatName", "Enable")
									TPerl_Options_EnableSibling(self, "ThreatPortrait", "Enable")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ThreatName" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_Threat" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="45" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_THREAT_NAME")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.focus.threatMode == "nameFrame")
							</OnShow>
							<OnClick>
								TPerlDB.focus.threatMode = "nameFrame"
								TPerl_Options_CheckRadio(self,{"ThreatName", "ThreatPortrait"})
								TPerl_Target_UpdateDisplay(TPerl_Focus)
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ThreatPortrait" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_ThreatName" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="45" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_THREAT_PORTRAIT")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.focus.threatMode == "portraitFrame")
							</OnShow>
							<OnClick>
								TPerlDB.focus.threatMode = "portraitFrame"
								TPerl_Options_CheckRadio(self,{"ThreatName", "ThreatPortrait"})
								TPerl_Target_UpdateDisplay(TPerl_Focus)
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ArcaneBar" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Threat" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_ARCANE_BAR")
								self.configBase = "TPerlDB.focus.castBar"
								self.configIndex = "enable"
								self.configClick = TPerl_ArcaneBar_Set
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Mana" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ArcaneBar" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_MANA")
								self.flashFrame = TPerl_FocusstatsFramemanaBar
								self.configBase = "TPerlDB.focus"
								self.configIndex = "mana"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Reaction" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ArcaneBar" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_REACTION")
								self.flashFrame = TPerl_FocusnameFrame
								self.configBase = "TPerlDB.focus"
								self.configIndex = "reactionHighlight"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ClassIcon" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Reaction" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_ICON")
								self.flashFrame = TPerl_Focus_ClassTexture
								self.configBase = "TPerlDB.focus"
								self.configIndex = "classIcon"
								self.configClick = TPerl_Target_Reset
								TPerl_Options_RegisterProtected(self)
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "ClassText", "Enable")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ClassText" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="BOTTOMLEFT" relativeTo="$parent_ClassIcon" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="95" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_CLASSTEXT")
								self.flashFrame = TPerl_Focus_BossFrame
								self.configBase = "TPerlDB.focus"
								self.configIndex = "classText"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_MobType" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ClassIcon" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_MOBTYPE")
								self.flashFrame = TPerl_Focus_TypeFrame
								self.configBase = "TPerlDB.focus"
								self.configIndex = "mobType"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Level" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_MobType" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_LEVEL")
								self.flashFrame = TPerl_FocuslevelFrame
								self.configBase = "TPerlDB.focus"
								self.configIndex = "level"
								self.configClick = TPerl_Target_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Elite" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_Level" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="45" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_ELITE")
							</OnLoad>
							<OnShow>
								self:SetChecked(not TPerlDB.focus.eliteGfx and not TPerlDB.focus.eliteNone)
							</OnShow>
							<OnClick>
								TPerlDB.focus.elite = true
								TPerlDB.focus.eliteGfx = nil
								TPerlDB.focus.eliteNone = nil
								TPerl_Options_CheckRadio(self, {"Elite", "EliteGfx", "EliteNone"})
								TPerl_Target_UpdateDisplay(TPerl_Focus)
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_EliteGfx" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Elite" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="55" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_ELITEGFX")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.focus.eliteGfx)
							</OnShow>
							<OnClick>
								TPerlDB.focus.elite = true
								TPerlDB.focus.eliteGfx = true
								TPerlDB.focus.eliteNone = nil
								TPerl_Options_CheckRadio(self, {"Elite", "EliteGfx", "EliteNone"})
								TPerl_Target_UpdateDisplay(TPerl_Focus)
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_EliteNone" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_EliteGfx" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="70" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_ELITE_NONE")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.focus.eliteNone)
							</OnShow>
							<OnClick>
								TPerlDB.focus.elite = true
								TPerlDB.focus.eliteGfx = nil
								TPerlDB.focus.eliteNone = true
								TPerl_Options_CheckRadio(self, {"Elite", "EliteGfx", "EliteNone"})
								TPerl_Target_UpdateDisplay(TPerl_Focus)
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HealPrediction" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Level" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_HEAL_PREDICTION")
								self.configBase = "TPerlDB.focus"
								self.configIndex = "healprediction"
								self.configClick = TPerl_Target_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Absorbs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_HealPrediction" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_ABSORBS")
								self.configBase = "TPerlDB.focus"
								self.configIndex = "absorbs"
								self.configClick = TPerl_Target_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Hots" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_Absorbs" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								if WOW_PROJECT_ID ~= WOW_PROJECT_MISTS_CLASSIC then
									self:Hide()
									return
								end
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_HOTS")
								self.configBase = "TPerlDB.focus"
								self.configIndex = "hotPrediction"
								self.configClick = TPerl_Target_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Values" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HealPrediction" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_VALUES")
								self.flashFrame = {TPerl_FocusstatsFramehealthBartext, TPerl_FocusstatsFramemanaBartext}
								self.configBase = "TPerlDB.focus"
								self.configIndex = "values"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Percent" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Values" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_PERCENT")
								self.flashFrame = {TPerl_FocusstatsFramehealthBarpercent, TPerl_FocusstatsFramemanaBarpercent}
								self.configBase = "TPerlDB.focus"
								self.configIndex = "percent"
								self.configClick = TPerl_Target_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_PVPIcon" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Values" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_PVPICON")
								self.flashFrame = TPerl_FocusnameFramepvpIcon
								self.configBase = "TPerlDB.focus"
								self.configIndex = "pvpIcon"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Frame name="$parent_Healer" inherits="TPerl_Options_HealerModeTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_PVPIcon" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								self.getEnable = function() return TPerlDB.focus.healerMode.enable end
								self.setEnable = function(n)
									TPerlDB.focus.healerMode.enable = n
									TPerl_Target_Reset()
								end
								self.getType = function() return TPerlDB.focus.healerMode.type end
								self.setType = function(n)
									TPerlDB.focus.healerMode.type = n
									TPerl_Target_Reset()
								end
							</OnLoad>
						</Scripts>
					</Frame>

					<Slider name="$parent_Width" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="150" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Healer" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="5" y="-10"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(0, 100)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_WIDTHBONUS")
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.focus.size.width or 0)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.focus.size.width ~= value) then
									TPerlDB.focus.size.width = value
									if (TPerl_Focus) then
										TPerl_Target_SetWidth(TPerl_Focus)
									end
									TPerl_Target_Reset()
									TPerl_TargetTarget_Reset()
								end
								_G[self:GetName().."Current"]:SetText(value)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Frame name="$parent_FocusTarget" inherits="TPerlBackdropTemplate">
						<KeyValues>
							<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_6" type="global"/>
						</KeyValues>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								self:SetScale(0.9)
							</OnLoad>
							<OnShow>
								if (not TPerl_TargetTarget) then
									self:Hide()
								end
							</OnShow>
						</Scripts>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="TOP" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="0" y="-5"/>
								</Offset>
							</Anchor>
							<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="-5" y="20"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Frames>
							<Button name="$parent_Title">
								<Size>
									<AbsDimension x="60" y="10"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT">
										<Offset>
											<AbsDimension x="3" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Layers>
									<Layer level="ARTWORK">
										<FontString name="$parentText" inherits="GameFontNormalSmall" text="TPERL_CONF_FOCUSTARGET_OPTIONS">
											<Color r="1" g="1" b="1" a="1"/>
											<Anchors>
												<Anchor point="LEFT"/>
											</Anchors>
										</FontString>
									</Layer>
								</Layers>
							</Button>

							<CheckButton name="$parent_TargetsTarget" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Title">
										<Offset>
											<AbsDimension x="0" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_TARGET")
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "Buffs")
											TPerl_Options_EnableSibling(self, "Debuffs")
											TPerl_Options_EnableSibling(self, "BigBuffs", "Buffs")
											TPerl_Options_EnableSibling(self, "BigPet", "BigBuffs", "Buffs")
											TPerl_Options_EnableSibling(self, "BigDebuffs", "Buffs")
											TPerl_Options_EnableSibling(self, "BigPet", "Buffs", "BigBuffs")
											TPerl_Options_EnableSibling(self, "Above")
											TPerl_Options_EnableSibling(self, "Level")
											TPerl_Options_EnableSibling(self, "Values")
											TPerl_Options_EnableSibling(self, "Percent")
											TPerl_Options_EnableSibling(self, "Mana")
											TPerl_Options_EnableSibling(self, "HealPrediction")
											TPerl_Options_EnableSibling(self, "Absorbs")
											TPerl_Options_EnableSibling(self, "ScaleFocusTarget")
											TPerl_Options_EnableSibling(self, "Width")
											TPerl_Options_EnableSibling(self, "Healer_Healer")
											TPerl_Options_EnableSibling(self, "Healer_DeficitOnly", "Healer_Healer")
											TPerl_Options_EnableSibling(self, "Healer_DeficitMax", "Healer_Healer")
											TPerl_Options_EnableSibling(self, "Healer_CurMaxDeficit", "Healer_Healer")
											TPerl_Options_EnableSibling(self, "Hots")
										end
										self.flashFrame = TPerl_FocusTarget
										self.configBase = "TPerlDB.focustarget"
										self.configIndex = "enable"
										self.configClick = TPerl_TargetTarget_Reset
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Buffs" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOP" relativeTo="$parent_TargetsTarget" relativePoint="BOTTOMRIGHT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUSTARGET_BUFFS")
										self.flashFrame = TPerl_FocusTargetbuffFrame
										self.configBase = "TPerlDB.focustarget.buffs"
										self.configIndex = "enable"
										self.configClick = TPerl_TargetTarget_Reset
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "BigBuffs")
											TPerl_Options_EnableSibling(self, "BigPet", "BigBuffs")
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_BigBuffs" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Buffs" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUSTARGET_BIGBUFFS")
										self.flashFrame = {TPerl_FocusTargetbuffFrame, TPerl_FocusTargetdebuffFrame}
										self.configBase = "TPerlDB.focustarget.buffs"
										self.configIndex = "big"
										self.configClick = TPerl_TargetTarget_Reset
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "BigPet")
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_BigPet" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_BigBuffs" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUSTARGET_BIGPETBUFFS")
										self.flashFrame = {TPerl_FocusTargetbuffFrame, TPerl_FocusTargetdebuffFrame}
										self.configBase = "TPerlDB.focustarget.buffs"
										self.configIndex = "bigpet"
										self.configClick = TPerl_TargetTarget_Reset
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Debuffs" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="LEFT" relativeTo="$parent_Buffs" relativePoint="RIGHT">
										<Offset>
											<AbsDimension x="125" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUSTARGET_DEBUFFS")
										self.flashFrame = TPerl_FocusTargetdebuffFrame
										self.configBase = "TPerlDB.focustarget.debuffs"
										self.configIndex = "enable"
										self.configClick = TPerl_TargetTarget_Reset
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "BigDebuffs")
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_BigDebuffs" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Debuffs" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUSTARGET_BIGDEBUFFS")
										self.flashFrame = {TPerl_FocusTargetbuffFrame, TPerl_FocusTargetdebuffFrame}
										self.configBase = "TPerlDB.pettarget.debuffs"
										self.configIndex = "big"
										self.configClick = TPerl_TargetTarget_Reset
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Above" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Buffs" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-32"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUSTARGET_BUFFSABOVE")
										self.flashFrame = {TPerl_FocusTargetbuffFrame, TPerl_FocusTargetdebuffFrame}
										self.configBase = "TPerlDB.focustarget.buffs"
										self.configIndex = "above"
										self.configClick = TPerl_TargetTarget_Reset
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Level" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOP" relativeTo="$parent_Above" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUSTARGET_LEVEL")
										self.flashFrame = TPerl_FocusTargetlevelFrame
										self.configBase = "TPerlDB.focustarget"
										self.configIndex = "level"
										self.configClick = TPerl_TargetTarget_Reset
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Mana" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Level" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="50" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUSTARGET_MANA")
										self.flashFrame = {TPerl_FocusTargetstatsFramemanaBar, TPerl_FocusTargetTargetstatsFramemanaBar}
										self.configBase = "TPerlDB.focustarget"
										self.configIndex = "mana"
										self.configClick = TPerl_TargetTarget_Reset
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_HealPrediction" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Mana" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="70" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUSTARGET_HEAL_PREDICTION")
										self.configBase = "TPerlDB.focustarget"
										self.configIndex = "healprediction"
										self.configClick = TPerl_TargetTarget_Reset
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Absorbs" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOP" relativeTo="$parent_HealPrediction" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUSTARGET_ABSORBS")
										self.configBase = "TPerlDB.focustarget"
										self.configIndex = "absorbs"
										self.configClick = TPerl_TargetTarget_Reset
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Hots" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="BOTTOM" relativeTo="$parent_HealPrediction" relativePoint="TOP">
										<Offset>
											<AbsDimension x="0" y="-7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										if WOW_PROJECT_ID ~= WOW_PROJECT_MISTS_CLASSIC then
											self:Hide()
											return
										end
										TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUSTARGET_HOTS")
										self.configBase = "TPerlDB.focustarget"
										self.configIndex = "hotPrediction"
										self.configClick = TPerl_TargetTarget_Reset
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Values" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Level" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="7"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUSTARGET_VALUES")
										self.flashFrame = {TPerl_FocusTargetstatsFramehealthBartext, TPerl_FocusTargetstatsFramemanaBartext, TPerl_FocusTargetTargetstatsFramehealthBartext, TPerl_FocusTargetTargetstatsFramemanaBartext}
										self.configBase = "TPerlDB.focustarget"
										self.configIndex = "values"
										self.configClick = TPerl_TargetTarget_Reset
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Percent" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Values" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="50" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUSTARGET_PERCENT")
										self.flashFrame = {TPerl_FocusTargetstatsFramehealthBarpercent, TPerl_FocusTargetstatsFramemanaBarpercent, TPerl_FocusTargetTargetstatsFramehealthBarpercent, TPerl_FocusTargetTargetstatsFramemanaBarpercent}
										self.configBase = "TPerlDB.focustarget"
										self.configIndex = "percent"
										self.configClick = TPerl_TargetTarget_Reset
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<Slider name="$parent_ScaleFocusTarget" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="120" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Values" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-10"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self.configBase = "TPerlDB.focustarget"
										self.configIndex = "scale"
										self.configClick = TPerl_TargetTarget_Reset
										TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUSTARGET_SCALE")
										TPerl_Options_RegisterScalingSlider(self, 40)
									</OnLoad>
								</Scripts>
							</Slider>

							<Slider name="$parent_Width" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="120" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ScaleFocusTarget" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="10" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetMinMaxValues(0, 100)
										self:SetValueStep(1)
										self:SetObeyStepOnDrag(true)
										TPerl_SliderSetup(self)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUSTARGET_WIDTHBONUS")
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
									<OnShow>
										self:SetValue(TPerlDB.focustarget.size.width or 0)
									</OnShow>
									<OnValueChanged>
										if (TPerlDB.focustarget.size.width ~= value) then
											TPerlDB.focustarget.size.width = value
											if (TPerl_FocusTarget) then
												TPerl_TargetTarget_SetWidth(TPerl_FocusTarget)
											end
											TPerl_TargetTarget_Reset()
										end
										_G[self:GetName().."Current"]:SetText(value)
									</OnValueChanged>
								</Scripts>
							</Slider>
							<Frame name="$parent_Healer" inherits="TPerl_Options_HealerModeTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ScaleFocusTarget" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-10"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:OnBackdropLoaded()
										self.getEnable = function()
											return TPerlDB.focustarget.healerMode.enable
										end
										self.setEnable = function(n)
											TPerlDB.focustarget.healerMode.enable = n
											TPerl_TargetTarget_Reset()
										end
										self.getType = function()
											return TPerlDB.focustarget.healerMode.type
										end
										self.setType = function(n)
											TPerlDB.focustarget.healerMode.type = n
											TPerl_TargetTarget_Reset()
										end
									</OnLoad>
								</Scripts>
							</Frame>
						</Frames>
					</Frame>

					<CheckButton name="$parent_Buffs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_FocusTarget" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="-3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_BUFFS_ENABLE")
								self.flashFrame = TPerl_FocusbuffFrame
								self.configBase = "TPerlDB.focus.buffs"
								self.configIndex = "enable"
								self.configClick = TPerl_Target_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "Castable", "Enable")
									TPerl_Options_EnableSibling(self, "OnlyMyBuffs", "Enable")
									TPerl_Options_EnableSibling(self, "BigBuffs", "Enable")
									TPerl_Options_EnableSibling(self, "BigPet", "BigBuffs", "Enable")
									TPerl_Options_EnableSibling(self, "BigBuffsStealable", "Enable")
									TPerl_Options_EnableSibling(self, "BuffSize", "Enable")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Castable" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Buffs" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_CASTABLE")
								self.configBase = "TPerlDB.focus.buffs"
								self.configIndex = "castable"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_OnlyMyBuffs" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Castable" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_ONLYMYBUFFS")
								self.configBase = "TPerlDB.focus.buffs"
								self.configIndex = "onlyMine"
								self.configClick = function()
									TPerlDB.focustarget.buffs.onlyMine = TPerlDB.focus.buffs.onlyMine
									TPerl_Target_Reset()
									TPerl_TargetTarget_Reset()
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BigBuffs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_OnlyMyBuffs" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_BIGBUFFS")
								self.flashFrame = {TPerl_FocusbuffFrame, TPerl_FocusdebuffFrame}
								self.configBase = "TPerlDB.focus.buffs"
								self.configIndex = "big"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BigPet" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BigBuffs" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="7"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_BIGPETBUFFS")
								self.flashFrame = {TPerl_FocusbuffFrame, TPerl_FocusdebuffFrame}
								self.configBase = "TPerlDB.focus.buffs"
								self.configIndex = "bigpet"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BigBuffsStealable" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BigBuffs" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="-14"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_BIGSTEALABLE")
								self.flashFrame = TPerl_Target_BuffFrame
								self.configBase = "TPerlDB.focus.buffs"
								self.configIndex = "bigStealable"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Debuffs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Buffs" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="100" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_DEBUFFS_ENABLE")
								self.flashFrame = TPerl_FocusdebuffFrame
								self.configBase = "TPerlDB.focus.debuffs"
								self.configIndex = "enable"
								self.configClick = TPerl_Target_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "Curable", "Enable")
									TPerl_Options_EnableSibling(self, "OnlyMyDebuffs", "Enable")
									TPerl_Options_EnableSibling(self, "BigDebuffs", "Enable")
									TPerl_Options_EnableSibling(self, "DebuffSize", "Enable")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Curable" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Debuffs" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_CURABLE")
								self.configBase = "TPerlDB.focus.debuffs"
								self.configIndex = "curable"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_OnlyMyDebuffs" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Curable" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_ONLYMYDEBUFFS")
								self.configBase = "TPerlDB.focus.debuffs"
								self.configIndex = "onlyMine"
								self.configClick = function()
									TPerlDB.focustarget.debuffs.onlyMine = TPerlDB.focus.debuffs.onlyMine
									TPerl_Target_Reset()
									TPerl_TargetTarget_Reset()
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BigDebuffs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_OnlyMyDebuffs" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_BIGDEBUFFS")
								self.flashFrame = {TPerl_FocusbuffFrame, TPerl_FocusdebuffFrame}
								self.configBase = "TPerlDB.focus.debuffs"
								self.configIndex = "big"
								self.configClick = TPerl_Target_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "BigPet", "Enable")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Slider name="$parent_BuffSize" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="120" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BigBuffsStealable" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="3" y="-8"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(7, 38)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_BUFF_SIZE")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.focus.buffs.size)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.focus.buffs.size ~= value) then
									TPerlDB.focus.buffs.size = value
									TPerlDB.focustarget.buffs.size = value
									TPerl_Target_Reset()
									TPerl_TargetTarget_Reset()
								end
								_G[self:GetName().."Current"]:SetText(value)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Slider name="$parent_DebuffSize" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="120" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BuffSize" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="10" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(7, 45)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_DEBUFF_SIZE")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.focus.debuffs.size or TPerlDB.focus.buffs.size)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.focus.debuffs.size ~= value) then
									TPerlDB.focus.debuffs.size = value
									TPerlDB.focustarget.debuffs.size = value
									TPerl_Target_Reset()
									TPerl_TargetTarget_Reset()
								end
								_G[self:GetName().."Current"]:SetText(value)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<CheckButton name="$parent_BuffWrap" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Buffs" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="-135"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_WRAPBUFFS")
								self.flashFrame = {TPerl_FocusbuffFrame, TPerl_FocusdebuffFrame}
								self.configBase = "TPerlDB.focus.buffs"
								self.configIndex = "wrap"
								self.configClick = function()
									TPerlDB.focustarget.buffs.wrap = TPerlDB.focus.buffs.wrap
									TPerl_Target_Reset()
									TPerl_TargetTarget_Reset()
								end
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "MaxRows", "Enable")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Slider name="$parent_MaxRows" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="120" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_BuffWrap" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="80" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetScale(0.8)
								self:SetMinMaxValues(1, 10)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)

								local t = TPerl_Options_GetSibling("BuffWrap",self)
								local t2 = _G[t:GetName().."Text"]
								self:SetPoint("LEFT", t, "RIGHT", (t2:GetStringWidth() + 10) / 0.8, 0)

								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_BUFF_ROWS")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.focus.buffs.rows or 2)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.focus.buffs.rows ~= value) then
									TPerlDB.focus.buffs.rows = value
									TPerlDB.focustarget.buffs.rows = value
									TPerl_Target_Reset()
									TPerl_TargetTarget_Reset()
								end
								_G[self:GetName().."Current"]:SetText(value)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<CheckButton name="$parent_Above" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BuffWrap" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_BUFFSABOVE")
								self.flashFrame = {TPerl_FocusbuffFrame, TPerl_FocusdebuffFrame}
								self.configBase = "TPerlDB.focus.buffs"
								self.configIndex = "above"
								self.configClick = TPerl_Target_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_DebuffHighlight" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Above" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_DEBUFFHIGHLIGHT")
								self.configBase = "TPerlDB.focus.highlightDebuffs"
								self.configIndex = "enable"
								self.configClick = TPerl_Target_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "All", "Enable")
									TPerl_Options_EnableSibling(self, "Friend", "Enable")
									TPerl_Options_EnableSibling(self, "Enemy", "Enable")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_All" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_DebuffHighlight" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="2"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_DEBUFFHIGHLIGHT_ALL")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.focus.highlightDebuffs.who == 1)
							</OnShow>
							<OnClick>
								TPerlDB.focus.highlightDebuffs.who = 1
								TPerl_Options_CheckRadio(self,{"All", "Friend", "Enemy"})
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Friend" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_All" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="50" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_DEBUFFHIGHLIGHT_FRIEND")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.focus.highlightDebuffs.who == 2)
							</OnShow>
							<OnClick>
								TPerlDB.focus.highlightDebuffs.who = 2
								TPerl_Options_CheckRadio(self,{"All", "Friend", "Enemy"})
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Enemy" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Friend" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="50" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_FOCUS_DEBUFFHIGHLIGHT_FOE")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.focus.highlightDebuffs.who == 3)
							</OnShow>
							<OnClick>
								TPerlDB.focus.highlightDebuffs.who = 3
								TPerl_Options_CheckRadio(self,{"All", "Friend", "Enemy"})
							</OnClick>
						</Scripts>
					</CheckButton>
				</Frames>
			</Frame>

			<!-- Party Options -->
			<Frame name="$parent_Party_Options"  inherits="TPerlBackdropTemplate" hidden="true">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="TPerl_Options_Area_Tabs"/>
					<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs"/>
				</Anchors>
				<Scripts>
					<OnLoad>
						self:OnBackdropLoaded()
						self:SetScale(0.9)
					</OnLoad>
					<OnShow>
						if (not C_AddOns.IsAddOnLoaded("TPerl_ArcaneBar")) then
							TPerl_Options_EnableCheck(_G[self:GetName().."_".."ArcaneBar"])
						end
					</OnShow>
				</Scripts>
				<Frames>
					<CheckButton name="$parent_Enable" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="6" y="-3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_SHOW")
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "Name")
									TPerl_Options_EnableSibling(self, "Portrait")
									TPerl_Options_EnableSibling(self, "Portrait3D", "Portrait")
									TPerl_Options_EnableSibling(self, "ClassPortrait", "Portrait")
									TPerl_Options_EnableSibling(self, "HitIndicator", "Portrait")
									TPerl_Options_EnableSibling(self, "Threat")
									TPerl_Options_EnableSibling(self, "ThreatName", "Threat")
									TPerl_Options_EnableSibling(self, "ThreatPortrait", "Threat")
									TPerl_Options_EnableSibling(self, "ArcaneBar")
									TPerl_Options_EnableSibling(self, "Level")
									TPerl_Options_EnableSibling(self, "HealPrediction")
									TPerl_Options_EnableSibling(self, "Absorbs")
									TPerl_Options_EnableSibling(self, "Target")
									TPerl_Options_EnableSibling(self, "TargetLarge", "Target")
									TPerl_Options_EnableSibling(self, "TargetSize", "Target")
									TPerl_Options_EnableSibling(self, "Icon")
									TPerl_Options_EnableSibling(self, "Values")
									TPerl_Options_EnableSibling(self, "Percent")
									TPerl_Options_EnableSibling(self, "InRaid")
									TPerl_Options_EnableSibling(self, "PVPIcon")
									TPerl_Options_EnableSibling(self, "ShowPlayer")
									TPerl_Options_EnableSibling(self, "SmallRaid")
									TPerl_Options_EnableSibling(self, "30yd")
									TPerl_Options_EnableSibling(self, "Healer_Healer")
									TPerl_Options_EnableSibling(self, "Healer_DeficitOnly", "Healer_Healer")
									TPerl_Options_EnableSibling(self, "Healer_DeficitMax", "Healer_Healer")
									TPerl_Options_EnableSibling(self, "Healer_CurMaxDeficit", "Healer_Healer")
									TPerl_Options_EnableSibling(self, "Width")
									TPerl_Options_EnableSibling(self, "Buffs")
									TPerl_Options_EnableSibling(self, "Castable", "Buffs")
									TPerl_Options_EnableSibling(self, "OnlyMyBuffs", "Buffs")
									TPerl_Options_EnableSibling(self, "Debuffs")
									TPerl_Options_EnableSibling(self, "Curable", "Debuffs")
									TPerl_Options_EnableSibling(self, "Below", "Debuffs")
									TPerl_Options_EnableSibling(self, "HalfSize", "Debuffs")
									TPerl_Options_EnableSibling(self, "BuffSize", "Buffs")
									TPerl_Options_EnableSibling(self, "DebuffSize", "Debuffs")
									TPerl_Options_EnableSibling(self, "BuffWrap")
									TPerl_Options_EnableSibling(self, "MaxRows", "BuffWrap")
									TPerl_Options_EnableSibling(self, "BigBuffs")
									TPerl_Options_EnableSibling(self, "BigPet", "BigBuffs")
									TPerl_Options_EnableSibling(self, "Hots")
								end
								self.configBase = "TPerlDB.party"
								self.configIndex = "enable"
								self.configClick = TPerl_Party_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Name" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Enable" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_NAMES")
								self.flashFrame = {TPerl_party1nameFrame, TPerl_party2nameFrame, TPerl_party3nameFrame, TPerl_party4nameFrame}
								self.configBase = "TPerlDB.party"
								self.configIndex = "name"
								self.configClick = TPerl_Party_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Portrait" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Name" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_PORTRAIT")
								self.flashFrame = {TPerl_party1portraitFrame, TPerl_party2portraitFrame, TPerl_party3portraitFrame, TPerl_party4portraitFrame}
								self.configBase = "TPerlDB.party"
								self.configIndex = "portrait"
								self.configClick = TPerl_Party_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "Portrait3D", "Enable")
									TPerl_Options_EnableSibling(self, "ClassPortrait", "Enable")
									TPerl_Options_EnableSibling(self, "HitIndicator", "Enable")
								end
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Portrait3D" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Portrait" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_PORTRAIT3D")
								self.flashFrame = {TPerl_party1portraitFrame, TPerl_party2portraitFrame, TPerl_party3portraitFrame, TPerl_party4portraitFrame}
								self.configBase = "TPerlDB.party"
								self.configIndex = "portrait3D"
								self.configClick = TPerl_Party_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ClassPortrait" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Portrait3D" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_CLASSPORTRAIT")
								self.flashFrame = TPerl_TargetportraitFrame
								self.configBase = "TPerlDB.party"
								self.configIndex = "classPortrait"
								self.configClick = TPerl_Party_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HitIndicator" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ClassPortrait" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_HIT_INDICATOR")
								self.configBase = "TPerlDB.party"
								self.configIndex = "hitIndicator"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Threat" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Portrait" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="-55"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_THREAT")
								self.configBase = "TPerlDB.party"
								self.configIndex = "threat"
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "ThreatName", "Enable")
									TPerl_Options_EnableSibling(self, "ThreatPortrait", "Enable")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ThreatName" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_Threat" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="45" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_THREAT_NAME")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.party.threatMode == "nameFrame")
							</OnShow>
							<OnClick>
								TPerlDB.party.threatMode = "nameFrame"
								TPerl_Options_CheckRadio(self,{"ThreatName", "ThreatPortrait"})
								TPerl_Party_Reset()
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ThreatPortrait" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_ThreatName" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="45" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_THREAT_PORTRAIT")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.party.threatMode == "portraitFrame")
							</OnShow>
							<OnClick>
								TPerlDB.party.threatMode = "portraitFrame"
								TPerl_Options_CheckRadio(self,{"ThreatName", "ThreatPortrait"})
								TPerl_Party_Reset()
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ArcaneBar" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Threat" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_ARCANE_BAR")
								self.configBase = "TPerlDB.party.castBar"
								self.configIndex = "enable"
								self.configClick = TPerl_ArcaneBar_Set
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Level" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ArcaneBar" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_LEVEL")
								self.flashFrame = {TPerl_party1levelFrame, TPerl_party2levelFrame, TPerl_party3levelFrame, TPerl_party4levelFrame}
								self.configBase = "TPerlDB.party"
								self.configIndex = "level"
								self.configClick = TPerl_Party_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HealPrediction" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Level" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_HEAL_PREDICTION")
								self.configBase = "TPerlDB.party"
								self.configIndex = "healprediction"
								self.configClick = TPerl_Party_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Absorbs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_HealPrediction" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_ABSORBS")
								self.configBase = "TPerlDB.party"
								self.configIndex = "absorbs"
								self.configClick = TPerl_Party_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Hots" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_Absorbs" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								if WOW_PROJECT_ID ~= WOW_PROJECT_MISTS_CLASSIC then
									self:Hide()
									return
								end
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_HOTS")
								self.configBase = "TPerlDB.party"
								self.configIndex = "hotPrediction"
								self.configClick = TPerl_Party_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Target" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HealPrediction" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_TARGET")
								self.flashFrame = {TPerl_party1targetFrame, TPerl_party2targetFrame, TPerl_party3targetFrame, TPerl_party4targetFrame}
								self.configBase = "TPerlDB.party.target"
								self.configIndex = "enable"
								self.configClick = TPerl_Party_Reset
								TPerl_Options_RegisterProtected(self)
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "TargetSize", "Enable")
									TPerl_Options_EnableSibling(self, "TargetLarge", "Enable")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_TargetLarge" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Target" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_TARGETLARGE")
								self.configBase = "TPerlDB.party.target"
								self.configIndex = "large"
								self.configClick = TPerl_Party_Set_Bits
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Slider name="$parent_TargetSize" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="150" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_Target" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="80" y="-12"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetScale(0.8)
								self:SetMinMaxValues(66, 200)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)

								local t = TPerl_Options_GetSibling("Target",self)
								local t2 = _G[t:GetName().."Text"]
								self:SetPoint("LEFT", t, "RIGHT", (t2:GetStringWidth() + 10) / 0.8, 0)

								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_TARGETSIZE")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.party.target.size)
							</OnShow>
							<OnValueChanged>
								TPerlDB.party.target.size = value
								_G[self:GetName().."Current"]:SetText(value)
								TPerl_Party_Set_Bits()
							</OnValueChanged>
						</Scripts>
					</Slider>

					<CheckButton name="$parent_Icon" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPRIGHT" relativeTo="$parent_TargetLarge" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_ICON")
								self.flashFrame = {TPerl_party1levelFrameclassTexture, TPerl_party2levelFrameclassTexture, TPerl_party3levelFrameclassTexture, TPerl_party4levelFrameclassTexture}
								self.configBase = "TPerlDB.party"
								self.configIndex = "classIcon"
								self.configClick = TPerl_Party_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Values" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Icon" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_VALUES")
								self.flashFrame = {TPerl_party1statsFramehealthBartext, TPerl_party2statsFramehealthBartext, TPerl_party3statsFramehealthBartext, TPerl_party4statsFramehealthBartext, TPerl_party1statsFramemanaBartext, TPerl_party2statsFramemanaBartext, TPerl_party3statsFramemanaBartext, TPerl_party4statsFramemanaBartext}
								self.configBase = "TPerlDB.party"
								self.configIndex = "values"
								self.configClick = TPerl_Party_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Percent" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Values" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_PERC")
								self.flashFrame = {TPerl_party1statsFramehealthBarpercent, TPerl_party2statsFramehealthBarpercent, TPerl_party3statsFramehealthBarpercent, TPerl_party4statsFramehealthBarpercent, TPerl_party1statsFramemanaBarpercent, TPerl_party2statsFramemanaBarpercent, TPerl_party3statsFramemanaBarpercent, TPerl_party4statsFramemanaBarpercent}
								self.configBase = "TPerlDB.party"
								self.configIndex = "percent"
								self.configClick = TPerl_Party_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_PVPIcon" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Percent" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_PVPICON")
								self.flashFrame = TPerl_PlayernameFramepvpIcon
								self.configBase = "TPerlDB.party"
								self.configIndex = "pvpIcon"
								self.configClick = TPerl_Party_Set_Bits
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ShowPlayer" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_PVPIcon" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_SHOWPLAYER")
								self.configBase = "TPerlDB.party"
								self.configIndex = "showPlayer"
								self.configClick = TPerl_Party_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_InRaid" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ShowPlayer" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_INRAID")
								self.configBase = "TPerlDB.party"
								self.configIndex = "inRaid"
								self.configClick = TPerl_Party_Reset
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_SmallRaid" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_InRaid" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_SMALLRAID")
								self.configBase = "TPerlDB.party"
								self.configIndex = "smallRaid"
								self.configClick = function()
									TPerl_Party_Reset()
									if TPerl_Raid_HideShowRaid then
										TPerl_Raid_HideShowRaid()
									end
									if TPerl_RaidPets_OptionActions then
										TPerl_RaidPets_OptionActions()
									end
								end
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_30yd" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_SmallRaid" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_30YD")
								self.configBase = "TPerlDB.party"
								self.configIndex = "range30yard"
								self.configClick = TPerl_Party_Set_Bits
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Frame name="$parent_Healer" inherits="TPerl_Options_HealerModeTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_30yd" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								self.getEnable = function()
									return TPerlDB.party.healerMode.enable
								end
								self.setEnable = function(n)
									TPerlDB.party.healerMode.enable = n
									TPerl_Party_Reset()
								end
								self.getType = function()
									return TPerlDB.party.healerMode.type
								end
								self.setType = function(n)
									TPerlDB.party.healerMode.type = n
									TPerl_Party_Reset()
								end
							</OnLoad>
						</Scripts>
					</Frame>

					<Slider name="$parent_Width" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="150" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Healer" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="5" y="-10"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(0, 100)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_WIDTHBONUS")
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.party.size.width or 0)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.party.size.width ~= value) then
									TPerlDB.party.size.width = value
									for i = 1, 4 do
										local f = _G["TPerl_party"..i]
										if (f) then
											TPerl_Party_SetWidth(f)
										end
									end
									TPerl_Party_Virtual(true)
								end
								_G[self:GetName().."Current"]:SetText(value)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<CheckButton name="$parent_Buffs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="TOP">
								<Offset>
									<AbsDimension x="0" y="-3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_BUFFS")
								self.flashFrame = {TPerl_party1buffFrame, TPerl_party2buffFrame, TPerl_party3buffFrame, TPerl_party4buffFrame}
								self.configBase = "TPerlDB.party.buffs"
								self.configIndex = "enable"
								self.configClick = TPerl_Party_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "Castable", "Enable")
									TPerl_Options_EnableSibling(self, "OnlyMyBuffs", "Enable")
									TPerl_Options_EnableSibling(self, "BuffSize", "Enable")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Castable" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Buffs" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_CASTABLE")
								self.configBase = "TPerlDB.party.buffs"
								self.configIndex = "castable"
								self.configClick = TPerl_Party_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_OnlyMyBuffs" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Castable" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_ONLYMYBUFFS")
								self.configBase = "TPerlDB.party.buffs"
								self.configIndex = "onlyMine"
								self.configClick = TPerl_Party_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Debuffs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPRIGHT" relativeTo="$parent_OnlyMyBuffs" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_DEBUFFS")
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "Curable", "Enable")
									TPerl_Options_EnableSibling(self, "Below", "Enable")
									TPerl_Options_EnableSibling(self, "HalfSize", "Enable")
									TPerl_Options_EnableSibling(self, "DebuffSize", "Enable")
								end
								self.flashFrame = {TPerl_party1buffFrame, TPerl_party2buffFrame, TPerl_party3buffFrame, TPerl_party4buffFrame}
								self.configBase = "TPerlDB.party.debuffs"
								self.configIndex = "enable"
								self.configClick = TPerl_Party_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Curable" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Debuffs" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_CURABLE")
								self.configBase = "TPerlDB.party.debuffs"
								self.configIndex = "curable"
								self.configClick = TPerl_Party_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Below" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Curable" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_DEBUFFSBELOW")
								self.flashFrame = {TPerl_party1buffFrame, TPerl_party2buffFrame, TPerl_party3buffFrame, TPerl_party4buffFrame}
								self.configBase = "TPerlDB.party.debuffs"
								self.configIndex = "below"
								self.configClick = TPerl_Party_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HalfSize" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Below" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_DEBUFFSHALFSIZE")
								self.flashFrame = {TPerl_party1debuffFrame, TPerl_party2debuffFrame, TPerl_party3debuffFrame, TPerl_party4debuffFrame}
								self.configBase = "TPerlDB.party.debuffs"
								self.configIndex = "halfSize"
								self.configClick = TPerl_Party_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Slider name="$parent_BuffSize" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="120" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HalfSize" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="-13" y="-13"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(7, 38)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_BUFF_SIZE")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.party.buffs.size)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.party.buffs.size ~= value) then
									TPerlDB.party.buffs.size = value
									TPerl_Party_Reset()
								end
								_G[self:GetName().."Current"]:SetText(value)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Slider name="$parent_DebuffSize" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="120" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BuffSize" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="10" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(7, 45)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_DEBUFF_SIZE")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.party.debuffs.size or TPerlDB.party.buffs.size)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.party.debuffs.size ~= value) then
									TPerlDB.party.debuffs.size = value
									TPerl_Party_Reset()
								end
								_G[self:GetName().."Current"]:SetText(value)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<CheckButton name="$parent_BuffWrap" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BuffSize" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="-3" y="-6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_WRAPBUFFS")
								self.flashFrame = {TPerl_party1buffFrame, TPerl_party2buffFrame, TPerl_party3buffFrame, TPerl_party4buffFrame}
								self.configBase = "TPerlDB.party.buffs"
								self.configIndex = "wrap"
								self.configClick = TPerl_Party_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "MaxRows", "Enable")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Slider name="$parent_MaxRows" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="120" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_BuffWrap" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="80" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetScale(0.8)
								self:SetMinMaxValues(1, 10)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								local t = TPerl_Options_GetSibling("BuffWrap",self)
								local t2 = _G[t:GetName().."Text"]
								self:SetPoint("LEFT", t, "RIGHT", (t2:GetStringWidth() + 10) / 0.8, 0)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_BUFF_ROWS")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.party.buffs.rows or 2)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.party.buffs.rows ~= value) then
									TPerlDB.party.buffs.rows = value
									TPerl_Party_Reset()
								end
								_G[self:GetName().."Current"]:SetText(value)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<CheckButton name="$parent_BigBuffs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BuffWrap" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_BIGBUFFS")
								self.flashFrame = {TPerl_party1buffFrame, TPerl_party2buffFrame, TPerl_party3buffFrame, TPerl_party4buffFrame}
								self.configBase = "TPerlDB.party.buffs"
								self.configIndex = "big"
								self.configClick = TPerl_Party_Reset
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "BigPet", "Enable")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BigPet" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BigBuffs" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="7"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_BIGPETBUFFS")
								self.flashFrame = {TPerl_party1buffFrame, TPerl_party2buffFrame, TPerl_party3buffFrame, TPerl_party4buffFrame}
								self.configBase = "TPerlDB.party.buffs"
								self.configIndex = "bigpet"
								self.configClick = TPerl_Party_Reset
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Frame name="$parent_PartyPets" inherits="TPerlBackdropTemplate">
						<KeyValues>
							<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_6" type="global"/>
						</KeyValues>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								self:SetScale(0.9)
							</OnLoad>
							<OnShow>
								if (not C_AddOns.IsAddOnLoaded("TPerl_PartyPet")) then
									self:Hide()
								end
							</OnShow>
						</Scripts>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="CENTER" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="5" y="-25"/>
								</Offset>
							</Anchor>
							<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="-5" y="5"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Frames>
							<Button name="$parent_Title">
								<Size>
									<AbsDimension x="60" y="10"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT">
										<Offset>
											<AbsDimension x="6" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Layers>
									<Layer level="ARTWORK">
										<FontString name="$parentText" inherits="GameFontNormalSmall" text="TPERL_CONF_PARTY_PETS_TITLE">
											<Color r="1" g="1" b="1" a="1"/>
											<Anchors>
												<Anchor point="LEFT"/>
											</Anchors>
										</FontString>
									</Layer>
								</Layers>
							</Button>

							<CheckButton name="$parent_Pets" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Title" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="-3" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_PETS")
										self.flashFrame = {TPerl_partypet1, TPerl_partypet2, TPerl_partypet3, TPerl_partypet4}
										self.configBase = "TPerlDB.partypet"
										self.configIndex = "enable"
										self.configClick = function()
											TPerl_Party_Reset()
											TPerl_PartyPet_Reset()
										end
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "PetNames")
											TPerl_Options_EnableSibling(self, "PetLevel", "PetNames")
											TPerl_Options_EnableSibling(self, "PetMana")
											TPerl_Options_EnableSibling(self, "PetBuffs")
											TPerl_Options_EnableSibling(self, "BuffSize", "PetBuffs")
											TPerl_Options_EnableSibling(self, "DebuffSize", "PetBuffs")
										end
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_PetNames" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOP" relativeTo="$parent_Pets" relativePoint="BOTTOMRIGHT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_PETNAME")
										self.flashFrame = {TPerl_partypet1nameFrame, TPerl_partypet2nameFrame, TPerl_partypet3nameFrame, TPerl_partypet4nameFrame}
										self.configBase = "TPerlDB.partypet"
										self.configIndex = "name"
										self.configClick = TPerl_PartyPet_Reset
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "PetLevel")
										end
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_PetLevel" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_PetNames" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_PETLEVEL")
										self.flashFrame = {TPerl_partypet1nameFramelevel, TPerl_partypet2nameFramelevel, TPerl_partypet3nameFramelevel, TPerl_partypet4nameFramelevel}
										self.configBase = "TPerlDB.partypet"
										self.configIndex = "level"
										self.configClick = TPerl_PartyPet_Reset
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_PetMana" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPRIGHT" relativeTo="$parent_PetLevel" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_PETMANA")
										self.flashFrame = {TPerl_partypet1statsFramemanaBar, TPerl_partypet2statsFramemanaBar, TPerl_partypet3statsFramemanaBar, TPerl_partypet4statsFramemanaBar}
										self.configBase = "TPerlDB.partypet"
										self.configIndex = "mana"
										self.configClick = TPerl_PartyPet_Reset
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_PetBuffs" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_PetMana" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_PETBUFFS")
										self.flashFrame = {TPerl_partypet1nameFrame, TPerl_partypet2nameFrame, TPerl_partypet3nameFrame, TPerl_partypet4nameFrame}
										self.configBase = "TPerlDB.partypet.buffs"
										self.configIndex = "enable"
										self.configClick = TPerl_PartyPet_Reset
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "BuffSize")
											TPerl_Options_EnableSibling(self, "DebuffSize")
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<Slider name="$parent_BuffSize" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="120" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_PetBuffs" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="-13" y="-13"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetMinMaxValues(5, 20)
										self:SetValueStep(1)
										self:SetObeyStepOnDrag(true)
										TPerl_SliderSetup(self)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_PETBUFF_SIZE")
									</OnLoad>
									<OnShow>
										self:SetValue(TPerlDB.partypet.buffs.size)
									</OnShow>
									<OnValueChanged>
										if (TPerlDB.partypet.buffs.size ~= value) then
											TPerlDB.partypet.buffs.size = value
											TPerl_Party_Reset()
										end
										_G[self:GetName().."Current"]:SetText(value)
									</OnValueChanged>
								</Scripts>
							</Slider>
							<Slider name="$parent_DebuffSize" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="120" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_BuffSize" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="10" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetMinMaxValues(5, 20)
										self:SetValueStep(1)
										self:SetObeyStepOnDrag(true)
										TPerl_SliderSetup(self)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_PARTY_PETDEBUFF_SIZE")
									</OnLoad>
									<OnShow>
										self:SetValue(TPerlDB.partypet.debuffs.size or TPerlDB.partypet.buffs.size)
									</OnShow>
									<OnValueChanged>
										if (TPerlDB.partypet.debuffs.size ~= value) then
											TPerlDB.partypet.debuffs.size = value
											TPerl_Party_Reset()
										end
										_G[self:GetName().."Current"]:SetText(value)
									</OnValueChanged>
								</Scripts>
							</Slider>
						</Frames>
					</Frame>
				</Frames>
			</Frame>

			<!-- Raid Options -->
			<Frame name="$parent_Raid_Options" inherits="TPerlBackdropTemplate" hidden="true">
				<Scripts>
					<OnLoad>
						self:OnBackdropLoaded()
						self:SetScale(0.9)
					</OnLoad>
				</Scripts>
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="TPerl_Options_Area_Tabs"/>
					<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs"/>
				</Anchors>
				<Frames>
					<CheckButton name="$parent_Enable" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="6" y="-3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								local LOCALIZED_CLASS_NAMES_MALE = LOCALIZED_CLASS_NAMES_MALE
								local CLASS_COUNT = 0
								local GROUP_COUNT = 8
								for k, v in pairs(LOCALIZED_CLASS_NAMES_MALE) do
									if k ~= "Adventurer" then
										CLASS_COUNT = CLASS_COUNT + 1
									end
								end
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_SHOW")
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "NotInBG")
									TPerl_Options_EnableSibling(self, "Titles")
									TPerl_Options_EnableSibling(self, "Roles")
									TPerl_Options_EnableSibling(self, "HealthText")
									TPerl_Options_EnableSibling(self, "Percent", "HealthText")
									TPerl_Options_EnableSibling(self, "Values", "HealthText")
									TPerl_Options_EnableSibling(self, "PrecisionPercent", "HealthText")
									TPerl_Options_EnableSibling(self, "HealPrediction")
									TPerl_Options_EnableSibling(self, "Absorbs")
									TPerl_Options_EnableSibling(self, "Hots")
									TPerl_Options_EnableSibling(self, "Mana")
									TPerl_Options_EnableSibling(self, "ManaPercent", "Mana")
									TPerl_Options_EnableSibling(self, "PrecisionManaPercent", "Mana")
									TPerl_Options_EnableSibling(self, "ShowParty")
									TPerl_Options_EnableSibling(self, "Buffs")
									TPerl_Options_EnableSibling(self, "Debuffs")
									TPerl_Options_EnableSibling(self, "Castable")
									TPerl_Options_EnableSibling(self, "BuffsRight")
									TPerl_Options_EnableSibling(self, "BuffsInside", "BuffsRight")
									TPerl_Options_EnableSibling(self, "BuffsUntilDebuffed")
									TPerl_Options_EnableSibling(self, "BuffTooltipHelper")
									TPerl_Options_EnableSibling(self, "BuffHelperNoSort", "BuffTooltipHelper")
									TPerl_Options_EnableSibling(self, "BuffHelperSortGroup", "BuffTooltipHelper")
									TPerl_Options_EnableSibling(self, "BuffHelperSortClass", "BuffTooltipHelper")
									TPerl_Options_EnableSibling(self, "BuffTooltipHelperVis", "BuffTooltipHelper")
									TPerl_Options_EnableSibling(self, "Healer")
									for i = 1, GROUP_COUNT do
									   TPerl_Options_EnableSibling(self, "Groups_Grp"..i)
									end
									for i = 1, CLASS_COUNT do
										TPerl_Options_EnableSibling(self, "Groups_ClassSel"..i.."_Enable")
										TPerl_Options_EnableSibling(self, "Groups_ClassSel"..i.."_Up")
										TPerl_Options_EnableSibling(self, "Groups_ClassSel"..i.."_Down")
									end
									TPerl_Options_EnableSibling(self, "Groups_All")
									TPerl_Options_EnableSibling(self, "Groups_None")
									TPerl_Options_EnableSibling(self, "Groups_ByClass")
									TPerl_Options_EnableSibling(self, "Groups_sortByRole")
									TPerl_Options_EnableSibling(self, "Groups_Alphabetical")
									TPerl_Options_EnableSibling(self, "Groups_VSpacing")

									--TPerl_Options_EnableSibling(self, "Pets_RaidPets")
									TPerl_Options_EnableSibling(self, "Pets_AlignToRaid")

									TPerl_Options_EnableSibling(self, "Custom_Enable")
									TPerl_Options_EnableSibling(self, "Custom_Config")
									TPerl_Options_EnableSibling(self, "Custom_Alpha")
									TPerl_Options_EnableSibling(self, "Custom_Add")
									TPerl_Options_EnableSibling(self, "Custom_Config")
									TPerl_Options_EnableSibling(self, "Width")
								end
								self.configBase = "TPerlDB.raid"
								self.configIndex = "enable"
								self.configClick = function()
									if (not TPerl_Custom) then
										C_AddOns.LoadAddOn("TPerl_CustomHighlight")
									end
									if (TPerl_Custom) then
										TPerl_Custom:PLAYER_ENTERING_WORLD()
										if not TPerlDB.raid.enable or not TPerlDB.custom.enable then
											TPerl_Custom:ClearAll()
										end
									end
									TPerl_Raid_OptionActions()
								end
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_NotInBG" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Enable" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_NOTINBG")
								self.configBase = "TPerlDB.raid"
								self.configIndex = "notInBG"
								self.configClick = TPerl_Raid_OptionActions
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Titles" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Enable" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="-15"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_TITLES")
								self.configBase = "TPerlDB.raid"
								self.configIndex = "titles"
								self.configClick = TPerl_Raid_OptionActions
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Roles" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Titles" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_ROLE_ICONS")
								self.configBase = "TPerlDB.raid"
								self.configIndex = "role"
								self.configClick = TPerl_Raid_OptionActions
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HealthText" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Roles" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_HEALTHTEXT")
								self.configBase = "TPerlDB.raid"
								self.configIndex = "percent"
								self.configClick = TPerl_Raid_OptionActions
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "Percent", "Enable")
									TPerl_Options_EnableSibling(self, "PrecisionPercent", "Enable")
									TPerl_Options_EnableSibling(self, "Values", "Enable")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Percent" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HealthText" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="4"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_PERCENTS")
							</OnLoad>
							<OnShow>
								self:SetChecked(not TPerlDB.raid.values)
							</OnShow>
							<OnClick>
								self:SetChecked(true)
								TPerlDB.raid.values = nil
								TPerl_Raid_OptionActions()
								TPerl_Options_CheckRadio(self,{"Percent", "Values"})
								TPerl_Options_EnableCheck(_G[self:GetParent():GetName().."_PrecisionPercent"], true)
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_PrecisionPercent" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPRIGHT" relativeTo="$parent_Percent" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="100" y="4"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_PRECISIONPERCENTS")
								self.configBase = "TPerlDB.raid"
								self.configIndex = "precisionPercent"
								self.configClick = TPerl_Raid_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Values" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Percent" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_VALUES")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.raid.values)
								--TPerl_Options_EnableCheck(_G[self:GetParent():GetName().."_PrecisionPercent"], not TPerlDB.raid.values)
							</OnShow>
							<OnClick>
								self:SetChecked(true)
								TPerlDB.raid.values = 1
								TPerl_Raid_OptionActions()
								TPerl_Options_CheckRadio(self,{"Percent", "Values"})
								TPerl_Options_EnableCheck(_G[self:GetParent():GetName().."_PrecisionPercent"], false)
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HealPrediction" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HealthText" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="-26"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_HEAL_PREDICTION")
								self.configBase = "TPerlDB.raid"
								self.configIndex = "healprediction"
								self.configClick = TPerl_Raid_OptionActions
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Absorbs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_HealPrediction" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_ABSORBS")
								self.configBase = "TPerlDB.raid"
								self.configIndex = "absorbs"
								self.configClick = TPerl_Raid_OptionActions
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Hots" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="LEFT" relativeTo="$parent_Absorbs" relativePoint="RIGHT">
								<Offset>
									<AbsDimension x="85" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								if WOW_PROJECT_ID ~= WOW_PROJECT_MISTS_CLASSIC then
									self:Hide()
									return
								end
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_HOTS")
								self.configBase = "TPerlDB.raid"
								self.configIndex = "hotPrediction"
								self.configClick = TPerl_Raid_OptionActions
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Mana" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HealPrediction" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_MANA")
								self.configBase = "TPerlDB.raid"
								self.configIndex = "mana"
								self.configClick = TPerl_Raid_OptionActions
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "ManaPercent", "Enable")
								end
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ManaPercent" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Mana" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_MANAPERCENT")
								self.configBase = "TPerlDB.raid"
								self.configIndex = "manaPercent"
								self.configClick = TPerl_Raid_OptionActions
								TPerl_Options_RegisterProtected(self)
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "PrecisionManaPercent", "Enable")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_PrecisionManaPercent" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPRIGHT" relativeTo="$parent_ManaPercent" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="100" y="2"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_MANAPRECISIONPERCENT")
								self.configBase = "TPerlDB.raid"
								self.configIndex = "precisionManaPercent"
								self.configClick = TPerl_Raid_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ShowParty" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPRIGHT" relativeTo="$parent_ManaPercent" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_SHOWPARTY")
								self.configBase = "TPerlDB.raid"
								self.configIndex = "inParty"
								self.configClick = function()
									TPerl_Raid_ChangeAttributes()
									TPerl_Raid_OptionActions()
								end
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Buffs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ShowParty" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_BUFFS")
								self.configBase = "TPerlDB.raid.buffs"
								self.configIndex = "enable"
								self.Validate = function()
									--TPerl_Options_EnableSibling(self, "Castable", "or", _G[self:GetParent():GetName().."_Debuffs"])
								end
								self.configClick = function()
									if (TPerlDB.raid.buffs.enable) then
										TPerlDB.raid.debuffs.enable = nil
										_G[self:GetParent():GetName().."_Debuffs"]:SetChecked(false)
									end
									self.Validate()
									TPerl_Raid_OptionActions()
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Debuffs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Buffs" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_DEBUFFS")
								self.configBase = "TPerlDB.raid.debuffs"
								self.configIndex = "enable"
								self.Validate = function()
									--TPerl_Options_EnableSibling(self, "Castable", "or", "Buffs")
								end
								self.configClick = function()
									if (TPerlDB.raid.debuffs.enable) then
										TPerlDB.raid.buffs.enable = nil
										_G[self:GetParent():GetName().."_Buffs"]:SetChecked(false)
									end
									self.Validate()
									TPerl_Raid_OptionActions()
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Castable" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Debuffs" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_CASTABLE")
								self.configBase = "TPerlDB.raid.buffs"
								self.configIndex = "castable"
								self.configClick = TPerl_Raid_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BuffsRight" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPRIGHT" relativeTo="$parent_Castable" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_BUFFSRIGHT")
								self.configBase = "TPerlDB.raid.buffs"
								self.configIndex = "right"
								self.configClick = TPerl_Raid_OptionActions
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "BuffsInside", "Enable")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BuffsInside" inherits="TPerlCheckButtonTemplate">
						<Size><AbsDimension x="26" y="26"/></Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_BuffsRight" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_BUFFSINSIDE")
								self.configBase = "TPerlDB.raid.buffs"
								self.configIndex = "inside"
								self.configClick = TPerl_Raid_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BuffsUntilDebuffed" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPRIGHT" relativeTo="$parent_BuffsInside" relativePoint="BOTTOM">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BUFFSUNTILDEBUFFED")
								self.configBase = "TPerlDB.raid.buffs"
								self.configIndex = "untilDebuffed"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BuffTooltipHelper" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BuffsUntilDebuffed" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BUFFTOOLTIPHELPER")
								self.configBase = "TPerlDB.buffHelper"
								self.configIndex = "enable"
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "BuffTooltipHelperVis", "Enable")
									TPerl_Options_EnableSibling(self, "BuffHelperNoSort", "Enable")
									TPerl_Options_EnableSibling(self, "BuffHelperSortGroup", "Enable")
									TPerl_Options_EnableSibling(self, "BuffHelperSortClass", "Enable")
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BuffHelperNoSort" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BuffTooltipHelper" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BUFFTOOLTIPHELPER_NOSORT")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.buffHelper.sort == nil)
							</OnShow>
							<OnClick>
								self:SetChecked(true)
								TPerlDB.buffHelper.sort = nil
								TPerl_Options_CheckRadio(self,{"BuffHelperSortGroup", "BuffHelperSortClass"})
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BuffHelperSortGroup" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BuffHelperNoSort" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="55" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BUFFTOOLTIPHELPER_SORTGROUP")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.buffHelper.sort == "group")
							</OnShow>
							<OnClick>
								self:SetChecked(true)
								TPerlDB.buffHelper.sort = "group"
								TPerl_Options_CheckRadio(self,{"BuffHelperNoSort", "BuffHelperSortClass"})
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BuffHelperSortClass" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BuffHelperSortGroup" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="65" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BUFFTOOLTIPHELPER_SORTCLASS")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlDB.buffHelper.sort == "class")
							</OnShow>
							<OnClick>
								self:SetChecked(true)
								TPerlDB.buffHelper.sort = "class"
								TPerl_Options_CheckRadio(self,{"BuffHelperNoSort", "BuffHelperSortGroup"})
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BuffTooltipHelperVis" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BuffHelperNoSort" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="1"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_BUFFTOOLTIPHELPER_VIS")
								self.configBase = "TPerlDB.buffHelper"
								self.configIndex = "visible"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Healer" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPRIGHT" relativeTo="$parent_BuffTooltipHelperVis" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_HEALER_MODE", true)
								self.configBase = "TPerlDB.raid.healerMode"
								self.configIndex = "enable"
								self.configClick = TPerl_Raid_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Slider name="$parent_Width" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="150" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Healer" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="5" y="-10"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(0, 100)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_WIDTHBONUS")
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.raid.size.width or 0)
							</OnShow>
							<OnValueChanged>
								if TPerlDB.raid.size.width ~= value then
									TPerlDB.raid.size.width = value
									TPerl_Raid_SetWidth()
									TPerl_Raid_SetGap(TPerlDB.raid.gap or 0)
								end
								_G[self:GetName().."Current"]:SetText(TPerlDB.raid.size.width)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<CheckButton name="$parent_DisableDefault" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Width" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="-5" y="-15"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_DISABLE_DEFAULT")
								self.configBase = "TPerlDB.raid"
								self.configIndex = "disableDefault"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Frame name="$parent_Groups" inherits="TPerlBackdropTemplate">
						<KeyValues>
							<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_6" type="global"/>
						</KeyValues>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								self:SetScale(0.9)
							</OnLoad>
						</Scripts>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="TOP" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="0" y="-5"/>
								</Offset>
							</Anchor>
							<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="-5" y="205"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Frames>
							<Button name="$parent_Title">
								<Size>
									<AbsDimension x="60" y="10"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT">
										<Offset>
											<AbsDimension x="6" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Layers>
									<Layer level="ARTWORK">
										<FontString name="$parentText" inherits="GameFontNormalSmall" text="TPERL_CONF_GROUPS">
											<Color r="1" g="1" b="1" a="1"/>
											<Anchors>
												<Anchor point="LEFT"/>
											</Anchors>
										</FontString>
									</Layer>
								</Layers>
							</Button>

							<CheckButton name="$parent_Grp1" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Title" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="-3" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										_G[self:GetName().."Text"]:SetText("1")
										self.tooltipText = TPERL_CONF_RAID_GROUP_DESC
										self.configBase = "TPerlDB.raid.group"
										self.configIndex = 1
										self.configClick = function()
											TPerl_Raid_ChangeAttributes()
											TPerl_Raid_OptionActions()
										end
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>
							<CheckButton name="$parent_Grp2" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Grp1" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										_G[self:GetName().."Text"]:SetText("2")
										self.tooltipText = TPERL_CONF_RAID_GROUP_DESC
										self.configBase = "TPerlDB.raid.group"
										self.configIndex = 2
										self.configClick = function()
											TPerl_Raid_ChangeAttributes()
											TPerl_Raid_OptionActions()
										end
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>
							<CheckButton name="$parent_Grp3" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Grp2" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										_G[self:GetName().."Text"]:SetText("3")
										self.tooltipText = TPERL_CONF_RAID_GROUP_DESC
										self.configBase = "TPerlDB.raid.group"
										self.configIndex = 3
										self.configClick = function()
											TPerl_Raid_ChangeAttributes()
											TPerl_Raid_OptionActions()
										end
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>
							<CheckButton name="$parent_Grp4" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Grp3" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										_G[self:GetName().."Text"]:SetText("4")
										self.tooltipText = TPERL_CONF_RAID_GROUP_DESC
										self.configBase = "TPerlDB.raid.group"
										self.configIndex = 4
										self.configClick = function()
											TPerl_Raid_ChangeAttributes()
											TPerl_Raid_OptionActions()
										end
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>
							<CheckButton name="$parent_Grp5" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Grp4" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										_G[self:GetName().."Text"]:SetText("5")
										self.tooltipText = TPERL_CONF_RAID_GROUP_DESC
										self.configBase = "TPerlDB.raid.group"
										self.configIndex = 5
										self.configClick = function()
											TPerl_Raid_ChangeAttributes()
											TPerl_Raid_OptionActions()
										end
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>
							<CheckButton name="$parent_Grp6" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Grp5" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										_G[self:GetName().."Text"]:SetText("6")
										self.tooltipText = TPERL_CONF_RAID_GROUP_DESC
										self.configBase = "TPerlDB.raid.group"
										self.configIndex = 6
										self.configClick = function()
											TPerl_Raid_ChangeAttributes()
											TPerl_Raid_OptionActions()
										end
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>
							<CheckButton name="$parent_Grp7" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Grp6" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										_G[self:GetName().."Text"]:SetText("7")
										self.tooltipText = TPERL_CONF_RAID_GROUP_DESC
										self.configBase = "TPerlDB.raid.group"
										self.configIndex = 7
										self.configClick = function()
											TPerl_Raid_ChangeAttributes()
											TPerl_Raid_OptionActions()
										end
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>
							<CheckButton name="$parent_Grp8" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Grp7" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										_G[self:GetName().."Text"]:SetText("8")
										self.tooltipText = TPERL_CONF_RAID_GROUP_DESC
										self.configBase = "TPerlDB.raid.group"
										self.configIndex = 8
										self.configClick = function()
											TPerl_Raid_ChangeAttributes()
											TPerl_Raid_OptionActions()
										end
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>
							

							<Frame name="$parent_Title2" inherits="TPerlBackdropTemplate">
								<Size>
									<AbsDimension x="60" y="10"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Title" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="10" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Layers>
									<Layer level="ARTWORK">
										<FontString name="$parentText" inherits="GameFontNormalSmall" text="TPERL_CONF_CLASSES">
											<Color r="1" g="1" b="1" a="1"/>
											<Anchors>
												<Anchor point="LEFT"/>
											</Anchors>
										</FontString>
									</Layer>
								</Layers>
							</Frame>

							<Frame name="$parent_ClassSel1" inherits="TPerl_OptClassSelTemplate" id="1">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Title2" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="-3" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
							</Frame>
							<Frame name="$parent_ClassSel2" inherits="TPerl_OptClassSelTemplate" id="2">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ClassSel1" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="2"/>
										</Offset>
									</Anchor>
								</Anchors>
							</Frame>
							<Frame name="$parent_ClassSel3" inherits="TPerl_OptClassSelTemplate" id="3">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ClassSel2" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="2"/>
										</Offset>
									</Anchor>
								</Anchors>
							</Frame>
							<Frame name="$parent_ClassSel4" inherits="TPerl_OptClassSelTemplate" id="4">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ClassSel3" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="2"/>
										</Offset>
									</Anchor>
								</Anchors>
							</Frame>
							<Frame name="$parent_ClassSel5" inherits="TPerl_OptClassSelTemplate" id="5">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ClassSel4" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="2"/>
										</Offset>
									</Anchor>
								</Anchors>
							</Frame>
							<Frame name="$parent_ClassSel6" inherits="TPerl_OptClassSelTemplate" id="6">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ClassSel5" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="2"/>
										</Offset>
									</Anchor>
								</Anchors>
							</Frame>
							<Frame name="$parent_ClassSel7" inherits="TPerl_OptClassSelTemplate" id="7">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ClassSel6" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="2"/>
										</Offset>
									</Anchor>
								</Anchors>
							</Frame>
							<Frame name="$parent_ClassSel8" inherits="TPerl_OptClassSelTemplate" id="8">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ClassSel7" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="2"/>
										</Offset>
									</Anchor>
								</Anchors>
							</Frame>
							<Frame name="$parent_ClassSel9" inherits="TPerl_OptClassSelTemplate" id="9">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ClassSel8" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="2"/>
										</Offset>
									</Anchor>
								</Anchors>
							</Frame>
							<Frame name="$parent_ClassSel10" inherits="TPerl_OptClassSelTemplate" id="10">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ClassSel9" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										if WOW_PROJECT_ID == WOW_PROJECT_CLASSIC then
											self:Hide()
										end
									</OnLoad>
								</Scripts>
							</Frame>
							<Frame name="$parent_ClassSel11" inherits="TPerl_OptClassSelTemplate" id="11">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ClassSel10" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										if WOW_PROJECT_ID == WOW_PROJECT_CLASSIC or WOW_PROJECT_ID == WOW_PROJECT_CATA_CLASSIC then
											self:Hide()
										end
									</OnLoad>
								</Scripts>
							</Frame>

							<Frame name="$parent_ClassSel12" inherits="TPerl_OptClassSelTemplate" id="12">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ClassSel11" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										if WOW_PROJECT_ID == WOW_PROJECT_CLASSIC or WOW_PROJECT_ID == WOW_PROJECT_CATA_CLASSIC or WOW_PROJECT_ID == WOW_PROJECT_MISTS_CLASSIC then
											self:Hide()
										end
									</OnLoad>
								</Scripts>
							</Frame>

							<Frame name="$parent_ClassSel13" inherits="TPerl_OptClassSelTemplate" id="13">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ClassSel12" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										if WOW_PROJECT_ID == WOW_PROJECT_CLASSIC or WOW_PROJECT_ID == WOW_PROJECT_CATA_CLASSIC or WOW_PROJECT_ID == WOW_PROJECT_MISTS_CLASSIC then
											self:Hide()
										end
									</OnLoad>
								</Scripts>
							</Frame>

							<Button name="$parent_All" inherits="TPerlButtonTemplate">
								<Size>
									<AbsDimension x="70" y="24"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Grp8" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="3" y="-110"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_SELECTALL")
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
									<OnClick>
										TPerl_Options_RaidSelectAll(self, true)
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_None" inherits="TPerlButtonTemplate">
								<Size>
									<AbsDimension x="70" y="24"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_All" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="6" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_SELECTNONE")
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
									<OnClick>
										TPerl_Options_RaidSelectAll(self, false)
									</OnClick>
								</Scripts>
							</Button>

							<CheckButton name="$parent_ByClass" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_All" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="-3" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_SORTBYCLASS")
										self.configBase = "TPerlDB.raid"
										self.configIndex = "sortByClass"
										self.configClick = function()
											TPerl_Raid_ChangeAttributes()
											TPerl_Raid_OptionActions()
										end
										TPerl_Options_RegisterProtected(self)
										self.Validate = function()
											TPerl_Options_EnableCheck(_G[self:GetParent():GetName().."_sortByRole"], not TPerlDB.raid.sortByClass)
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_sortByRole" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPRIGHT" relativeTo="$parent_ByClass" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="200" y="30"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_SORTBYROLE", true)
										self.configBase = "TPerlDB.raid"
										self.configIndex = "sortByRole"
										self.configClick = function()
											TPerl_Raid_ChangeAttributes()
											TPerl_Raid_OptionActions()
										end
										TPerl_Options_RegisterProtected(self)
										self.Validate = function()
											TPerl_Options_EnableCheck(_G[self:GetParent():GetName().."_ByClass"], not TPerlDB.raid.sortByRole)
										end
									</OnLoad>

								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Alphabetical" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ByClass" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_ALPHABETICAL")
										self.configBase = "TPerlDB.raid"
										self.configIndex = "sortAlpha"
										self.configClick = function()
											TPerl_Raid_ChangeAttributes()
											TPerl_Raid_OptionActions()
										end
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<Slider name="$parent_VSpacing" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="150" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_sortByRole">
										<Offset>
											<AbsDimension x="0" y="-10"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetMinMaxValues(-5, 20)
										self:SetValueStep(1)
										self:SetObeyStepOnDrag(true)
										TPerl_SliderSetup(self)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_SPACING")
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
									<OnShow>
										self:SetValue(TPerlDB.raid.spacing)
									</OnShow>
									<OnValueChanged>
										if (TPerlDB.raid.spacing ~= value) then
											TPerlDB.raid.spacing = value
											TPerl_Raid_ChangeAttributes()
											TPerl_RaidTitles()
										end
										_G[self:GetName().."Current"]:SetText(value)
									</OnValueChanged>
								</Scripts>
							</Slider>
						</Frames>
					</Frame>

					<Frame name="$parent_Pets" inherits="TPerlBackdropTemplate">
						<KeyValues>
							<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_6" type="global"/>
						</KeyValues>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								local _, _, _, _, reason = C_AddOns.GetAddOnInfo("TPerl_RaidPets")
								if (reason == "DISABLED" or reason == "MISSING") then
									self:Hide()
								end
							</OnLoad>
						</Scripts>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Groups">
								<Offset>
									<AbsDimension x="0" y="-5"/>
								</Offset>
							</Anchor>
							<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="-5" y="105"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Frames>
							<CheckButton name="$parent_RaidPets" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT">
										<Offset>
											<AbsDimension x="4" y="-15"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_PETS")
										self.configBase = "TPerlDB.raidpet"
										self.configIndex = "enable"
										self.configClick = TPerl_RaidPets_OptionActions
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "AlignToRaid")
										end
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_AlignToRaid" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_RaidPets" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_PETS_ALIGN")
										self.configBase = "TPerlDB.raidpet"
										self.configIndex = "alignToRaid"
										self.configClick = TPerl_RaidPets_OptionActions
										TPerl_Options_RegisterProtected(self)
									</OnLoad>
								</Scripts>
							</CheckButton>
						</Frames>
						<Layers>
							<Layer level="BORDER">
								<FontString inherits="GameFontNormalSmall" text="TPERL_CONF_RAID_PET">
									<Color r="1" g="1" b="1" a="1"/>
									<Anchors>
										<Anchor point="TOPLEFT">
											<Offset>
												<AbsDimension x="3" y="-3"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
					</Frame>

					<Frame name="$parent_Custom" inherits="TPerlBackdropTemplate">
						<KeyValues>
							<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_6" type="global"/>
						</KeyValues>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								local _, _, _, _, reason = C_AddOns.GetAddOnInfo("TPerl_CustomHighlight")
								if (reason == "DISABLED" or reason == "MISSING") then
									self:Hide()
								end
							</OnLoad>
						</Scripts>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Pets">
								<Offset>
									<AbsDimension x="0" y="-5"/>
								</Offset>
							</Anchor>
							<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="-5" y="5"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Frames>
							<CheckButton name="$parent_Enable" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT">
										<Offset>
											<AbsDimension x="4" y="-15"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_CUSTOM_ENABLE")
										self.configBase = "TPerlDB.custom"
										self.configIndex = "enable"
										self.configClick = function()
											if (not TPerl_Custom) then
												C_AddOns.LoadAddOn("TPerl_CustomHighlight")
											end
											if (TPerl_Custom) then
												TPerl_Custom:PLAYER_ENTERING_WORLD()
												if not TPerlDB.custom.enable then
													TPerl_Custom:ClearAll()
												end
											end
										end
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "Config")
											TPerl_Options_EnableSibling(self, "Alpha")
											TPerl_Options_EnableSibling(self, "Add")
											TPerl_Options_EnableSibling(self, "Blend")
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<Button name="$parent_Config" inherits="TPerlButtonTemplate">
								<Size>
									<AbsDimension x="70" y="24"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Enable" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_CUSTOM_CONFIG")
									</OnLoad>
									<OnClick>
										TPerl_Custom_Config:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Slider name="$parent_Alpha" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="150" y="20"/>
								</Size>
								<Anchors>
									<Anchor point="LEFT" relativeTo="$parent_Enable" relativePoint="RIGHT">
										<Offset>
											<AbsDimension x="70" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_SliderSetup(self)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_CUSTOM_ALPHA")
										self:SetMinMaxValues(0, 1)
										self:SetValueStep(0.05)
										self:SetObeyStepOnDrag(true)
										_G[self:GetName().."Low"]:SetText("0%")
										_G[self:GetName().."High"]:SetText("100%")
									</OnLoad>
									<OnShow>
										self:SetValue(TPerlDB.custom and TPerlDB.custom.alpha or 0.5)
									</OnShow>
									<OnValueChanged>
										if (TPerlDB.custom) then
											TPerlDB.custom.alpha = self:GetValue()
											_G[self:GetName().."Current"]:SetFormattedText("%d%%", TPerlDB.custom.alpha * 100)
										end
									</OnValueChanged>
								</Scripts>
							</Slider>

							<CheckButton name="$parent_Add" inherits="TPerlRadioButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Alpha" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-13"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetChecked(TPerlDB and TPerlDB.custom and TPerlDB.custom.blend == "ADD")
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_CUSTOM_BLEND_ADD")
									</OnLoad>
									<OnClick>
										if (TPerlDB.custom) then
											TPerlDB.custom.blend = "ADD"
										end
										TPerl_Options_CheckRadio(self, {"Add", "Blend"})
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Blend" inherits="TPerlRadioButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Add" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetChecked(TPerlDB and TPerlDB.custom and TPerlDB.custom.blend == "BLEND")
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_CUSTOM_BLEND_BLEND")
									</OnLoad>
									<OnClick>
										if (TPerlDB.custom) then
											TPerlDB.custom.blend = "BLEND"
										end
										TPerl_Options_CheckRadio(self, {"Add", "Blend"})
									</OnClick>
								</Scripts>
							</CheckButton>
						</Frames>
						<Layers>
							<Layer level="BORDER">
								<FontString inherits="GameFontNormalSmall" text="TPERL_CONF_RAID_CUSTOM">
									<Color r="1" g="1" b="1" a="1"/>
									<Anchors>
										<Anchor point="TOPLEFT">
											<Offset>
												<AbsDimension x="3" y="-3"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
					</Frame>
				</Frames>
			</Frame>

			<!-- All Options -->
			<Frame name="$parent_All_Options" inherits="TPerlBackdropTemplate" hidden="true">
				<Scripts>
					<OnLoad>
						self:OnBackdropLoaded()
						self:SetScale(0.9)
					</OnLoad>
				</Scripts>
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="TPerl_Options_Area_Tabs"/>
					<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs"/>
				</Anchors>
				<Frames>
					<CheckButton name="$parent_Portrait" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="6" y="-3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_Options_RegisterProtected(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALL_PORTRAIT")
								self.flashFrame = {TPerl_PlayerportraitFrame, TPerl_Player_PetportraitFrame, TPerl_TargetportraitFrame, TPerl_FocusportraitFrame, TPerl_party1portraitFrame, TPerl_party2portraitFrame, TPerl_party3portraitFrame, TPerl_party4portraitFrame}
								self.configClick = TPerl_OptionActions
								self.configSelection = {"TPerlDB.player", "TPerlDB.pet", "TPerlDB.target", "TPerlDB.focus", "TPerlDB.party"}
								self.configIndex = "portrait"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Portrait3D" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Portrait" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALL_PORTRAIT3D")
								self.flashFrame = {TPerl_PlayerportraitFrame, TPerl_Player_PetportraitFrame, TPerl_TargetportraitFrame, TPerl_FocusportraitFrame, TPerl_party1portraitFrame, TPerl_party2portraitFrame, TPerl_party3portraitFrame, TPerl_party4portraitFrame}
								self.configClick = TPerl_OptionActions
								self.configSelection = {"TPerlDB.player", "TPerlDB.pet", "TPerlDB.target", "TPerlDB.focus", "TPerlDB.party"}
								self.configIndex = "portrait3D"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ClassPortrait" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Portrait3D" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALL_CLASSPORTRAIT")
								self.flashFrame = {TPerl_PlayerportraitFrame, TPerl_TargetportraitFrame, TPerl_FocusportraitFrame, TPerl_party1portraitFrame, TPerl_party2portraitFrame, TPerl_party3portraitFrame, TPerl_party4portraitFrame}
								self.configClick = TPerl_OptionActions
								self.configSelection = {"TPerlDB.player", "TPerlDB.target", "TPerlDB.focus", "TPerlDB.party"}
								self.configIndex = "classPortrait"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Level" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ClassPortrait" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALL_LEVEL")
								self.flashFrame = {TPerl_PlayerlevelFrame, TPerl_Player_PetlevelFrame, TPerl_TargetlevelFrame, TPerl_FocuslevelFrame, TPerl_TargetTargetlevelFrame, TPerl_TargetTargetTargetlevelFrame, TPerl_party1levelFrame, TPerl_party2levelFrame, TPerl_party3levelFrame, TPerl_party4levelFrame}
								self.configClick = TPerl_OptionActions
								self.configSelection = {"TPerlDB.player", "TPerlDB.pet", "TPerlDB.target", "TPerlDB.focus", "TPerlDB.targettarget", "TPerlDB.party", "TPerlDB.pettarget", "TPerlDB.focustarget", "TPerlDB.targettargettarget"}
								self.configIndex = "level"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_HealPrediction" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Level" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALL_HEAL_PREDICTION")
								self.configClick = TPerl_OptionActions
								self.configSelection = {"TPerlDB.player", "TPerlDB.pet", "TPerlDB.target", "TPerlDB.targettarget", "TPerlDB.focus", "TPerlDB.focustarget", "TPerlDB.party", "TPerlDB.raid"}
								self.configIndex = "healprediction"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Absorbs" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_HealPrediction" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALL_ABSORBS")
								self.configClick = TPerl_OptionActions
								self.configSelection = {"TPerlDB.player", "TPerlDB.pet", "TPerlDB.target", "TPerlDB.targettarget", "TPerlDB.focus", "TPerlDB.focustarget", "TPerlDB.party", "TPerlDB.raid"}
								self.configIndex = "absorbs"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Hots" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Absorbs" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								if WOW_PROJECT_ID ~= WOW_PROJECT_MISTS_CLASSIC then
									self:Hide()
									return
								end
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALL_HOTS")
								self.configClick = TPerl_OptionActions
								self.configSelection = {"TPerlDB.player", "TPerlDB.pet", "TPerlDB.target", "TPerlDB.targettarget", "TPerlDB.focus", "TPerlDB.focustarget", "TPerlDB.party", "TPerlDB.raid"}
								self.configIndex = "hotPrediction"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_ClassIcon" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Hots" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALL_ICON")
								self.flashFrame = {TPerl_PlayerclassFrame, TPerl_TargettypeFramePlayerclassTexture, TPerl_FocustypeFramePlayerclassTexture, TPerl_party1levelFrameclassTexture, TPerl_party2levelFrameclassTexture, TPerl_party3levelFrameclassTexture, TPerl_party4levelFrameclassTexture}
								self.configSelection = {"TPerlDB.player", "TPerlDB.target", "TPerlDB.focus", "TPerlDB.party"}
								self.configIndex = "classIcon"
								self.configClick = TPerl_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_PVPIcon" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_ClassIcon" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALL_PVPFLAG")
								self.flashFrame = {TPerl_PlayernameFramepvpIcon, TPerl_TargetnameFramepvpIcon, TPerl_FocusnameFramepvpIcon, TPerl_TargetTargetnameFramepvpIcon, TPerl_TargetTargetTargetnameFramepvpIcon, TPerl_party1nameFramepvpIcon, TPerl_party2nameFramepvpIcon, TPerl_party3nameFramepvpIcon, TPerl_party4nameFramepvpIcon}
								self.configSelection = {"TPerlDB.player", "TPerlDB.target", "TPerlDB.focus", "TPerlDB.party", "TPerlDB.targettarget", "TPerlDB.targettargettarget", "TPerlDB.pettarget", "TPerlDB.focustarget"}
								self.configIndex = "pvpIcon"
								self.configClick = TPerl_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Values" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_PVPIcon" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALL_VALUES")
								self.flashFrame = {TPerl_PlayerstatsFramehealthBartext, TPerl_PlayerstatsFramemanaBartext, TPerl_PlayerstatsFramexpBartext, TPerl_TargetstatsFramehealthBartext, TPerl_TargetstatsFramemanaBartext, TPerl_FocusstatsFramehealthBartext, TPerl_FocusstatsFramemanaBartext, TPerl_TargetTargetstatsFramehealthBartext, TPerl_TargetTargetstatsFramemanaBartext, TPerl_TargetTargetTargetstatsFramehealthBartext, TPerl_TargetTargetTargetstatsFramemanaBartext, TPerl_party1statsFramehealthBartext, TPerl_party1statsFramemanaBartext, TPerl_party2statsFramehealthBartext, TPerl_party2statsFramemanaBartext, TPerl_party3statsFramehealthBartext, TPerl_party3statsFramemanaBartext, TPerl_party4statsFramehealthBartext, TPerl_party4statsFramemanaBartext}
								self.configSelection = {"TPerlDB.player", "TPerlDB.target", "TPerlDB.focus", "TPerlDB.party", "TPerlDB.targettarget", "TPerlDB.targettargettarget", "TPerlDB.pettarget", "TPerlDB.focustarget"}
								self.configIndex = "values"
								self.configClick = TPerl_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Percent" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Values" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_Options_RegisterProtected(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALL_PERCENT")
								self.flashFrame = {TPerl_PlayerstatsFramehealthBarpercent, TPerl_PlayerstatsFramemanaBarpercent, TPerl_PlayerstatsFramexpBarpercent, TPerl_TargetstatsFramehealthBarpercent, TPerl_TargetstatsFramemanaBarpercent, TPerl_FocusstatsFramehealthBarpercent, TPerl_FocusstatsFramemanaBarpercent, TPerl_TargetTargetstatsFramehealthBarpercent, TPerl_TargetTargetTargetstatsFramehealthBarpercent, TPerl_TargetTargetstatsFramemanaBarpercent, TPerl_TargetTargetTargetstatsFramemanaBarpercent, TPerl_party1statsFramehealthBarpercent, TPerl_party1statsFramemanaBarpercent, TPerl_party2statsFramehealthBarpercent, TPerl_party2statsFramemanaBarpercent, TPerl_party3statsFramehealthBarpercent, TPerl_party3statsFramemanaBarpercent, TPerl_party4statsFramehealthBarpercent, TPerl_party1statsFramemanaBarpercent, TPerl_party1statsFramehealthBarpercent, TPerl_party4statsFramemanaBarpercent}
								self.configSelection = {"TPerlDB.player", "TPerlDB.target", "TPerlDB.focus", "TPerlDB.party", "TPerlDB.targettarget", "TPerlDB.targettargettarget", "TPerlDB.pettarget", "TPerlDB.focustarget"}
								self.configIndex = "percent"
								self.configClick = TPerl_OptionActions
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Frame name="$parent_Healer" inherits="TPerl_Options_HealerModeTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Percent" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								self.getEnable = function()
									return TPerlDB.player.healerMode.enable
								end
								self.setEnable = function(n)
									TPerlDB.player.healerMode.enable = n
									TPerlDB.pettarget.healerMode.enable = n
									TPerlDB.target.healerMode.enable = n
									TPerlDB.targettarget.healerMode.enable = n
									TPerlDB.targettargettarget.healerMode.enable = n
									TPerlDB.focus.healerMode.enable = n
									TPerlDB.focustarget.healerMode.enable = n
									TPerlDB.party.healerMode.enable = n
									TPerlDB.raid.healerMode.enable = n
									TPerl_OptionActions()
								end
								self.getType = function()
									return TPerlDB.player.healerMode.type
								end
								self.setType = function(n)
									TPerlDB.player.healerMode.type = n
									TPerlDB.pettarget.healerMode.type = n
									TPerlDB.target.healerMode.type = n
									TPerlDB.targettarget.healerMode.type = n
									TPerlDB.targettargettarget.healerMode.type = n
									TPerlDB.focus.healerMode.type = n
									TPerlDB.focustarget.healerMode.type = n
									TPerlDB.party.healerMode.type = n
									TPerl_OptionActions()
								end
							</OnLoad>
						</Scripts>
					</Frame>

					<Slider name="$parent_Width" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="150" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Healer" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="5" y="-10"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(0, 100)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ALL_WIDTHBONUS")
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlDB.player.size.width or 0)
							</OnShow>
							<OnValueChanged>
								if (TPerlDB.player.size.width ~= value) then
									TPerlDB.player.size.width = value
									TPerlDB.pet.size.width = value
									TPerlDB.pettarget.size.width = value
									TPerlDB.target.size.width = value
									TPerlDB.targettarget.size.width = value
									TPerlDB.targettargettarget.size.width = value
									TPerlDB.party.size.width = value
									TPerlDB.focus.size.width = value
									TPerlDB.focustarget.size.width = value
									if (TPerl_Player) then
										TPerl_Player_SetWidth(TPerl_Player)
										end
									if (TPerl_Player_Pet) then
										TPerl_Player_Pet_SetWidth(TPerl_Player_Pet)
									end
									if (TPerl_PetTarget) then
										TPerl_TargetTarget_SetWidth(TPerl_PetTarget)
									end
									if (TPerl_Target) then
										TPerl_Target_SetWidth(TPerl_Target)
									end
									if (TPerl_TargetTarget) then
										TPerl_TargetTarget_SetWidth(TPerl_TargetTarget)
									end
									if (TPerl_Focus) then
										TPerl_Target_SetWidth(TPerl_Focus)
									end
									if (TPerl_FocusTarget) then
										TPerl_TargetTarget_SetWidth(TPerl_FocusTarget)
									end
									if (TPerl_Party_Virtual) then
										for i = 1, 4 do
											local f = _G["TPerl_party"..i]
											if (f) then
												TPerl_Party_SetWidth(f)
											end
											TPerl_Party_Virtual(true)
										end
									end
									_G[self:GetName().."Current"]:SetText(value)
								end
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Frame name="$parent_AddOns" inherits="TPerlBackdropTemplate">
						<KeyValues>
							<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_6" type="global"/>
						</KeyValues>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								self:SetScale(0.9)
							</OnLoad>
						</Scripts>
						<Size>
							<AbsDimension x="130" y="70"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="TPerl_Options_Area_Tabs" relativePoint="TOP">
								<Offset>
									<AbsDimension x="5" y="-5"/>
								</Offset>
							</Anchor>
							<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="-5" y="5"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Frames>
							<Button name="$parent_Title">
								<Size>
									<AbsDimension x="60" y="10"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT">
										<Offset>
											<AbsDimension x="3" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Layers>
									<Layer level="ARTWORK">
										<FontString name="$parentText" inherits="GameFontNormalSmall" text="TPERL_CONF_ADDONS">
											<Color r="1" g="1" b="1" a="1"/>
											<Anchors>
												<Anchor point="LEFT"/>
											</Anchors>
										</FontString>
									</Layer>
								</Layers>
							</Button>

							<CheckButton name="$parent_Player" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Title" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_ADDON_PLAYER")
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "PlayerPet")
											TPerl_Options_EnableSibling(self, "PlayerBuffs")
										end
									</OnLoad>
									<OnShow>
										self:SetChecked(C_AddOns.IsAddOnLoaded("TPerl_Player"))
									</OnShow>
									<OnClick>
										if (self:GetChecked()) then
											C_AddOns.EnableAddOn("TPerl_Player")
										else
											C_AddOns.DisableAddOn("TPerl_Player")
										end
										self:Validate()
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_PlayerBuffs" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Player" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_ADDON_PLAYERBUFFS")
									</OnLoad>
									<OnShow>
										self:SetChecked(C_AddOns.IsAddOnLoaded("TPerl_PlayerBuffs"))
									</OnShow>
									<OnClick>
										if (self:GetChecked()) then
											C_AddOns.EnableAddOn("TPerl_PlayerBuffs")
										else
											C_AddOns.DisableAddOn("TPerl_PlayerBuffs")
										end
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_PlayerPet" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_PlayerBuffs" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_ADDON_PET")
									</OnLoad>
									<OnShow>
										self:SetChecked(C_AddOns.IsAddOnLoaded("TPerl_PlayerPet"))
									</OnShow>
									<OnClick>
										if (self:GetChecked()) then
											C_AddOns.EnableAddOn("TPerl_PlayerPet")
										else
											C_AddOns.DisableAddOn("TPerl_PlayerPet")
										end
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Target" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_PlayerPet" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_ADDON_TARGET")
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "TargetTarget")
										end
									</OnLoad>
									<OnShow>
										self:SetChecked(C_AddOns.IsAddOnLoaded("TPerl_Target"))
									</OnShow>
									<OnClick>
										if (self:GetChecked()) then
											C_AddOns.EnableAddOn("TPerl_Target")
										else
											C_AddOns.DisableAddOn("TPerl_Target")
										end
										self:Validate()
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_TargetTarget" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Target" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_ADDON_TARGETTARGET")
									</OnLoad>
									<OnShow>
										self:SetChecked(C_AddOns.IsAddOnLoaded("TPerl_TargetTarget"))
									</OnShow>
									<OnClick>
										if (self:GetChecked()) then
											C_AddOns.EnableAddOn("TPerl_TargetTarget")
										else
											C_AddOns.DisableAddOn("TPerl_TargetTarget")
										end
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Party" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_TargetTarget" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_ADDON_PARTY")
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "PartyPet")
										end
									</OnLoad>
									<OnShow>
										self:SetChecked(C_AddOns.IsAddOnLoaded("TPerl_Party"))
									</OnShow>
									<OnClick>
										if (self:GetChecked()) then
											C_AddOns.EnableAddOn("TPerl_Party")
										else
											C_AddOns.DisableAddOn("TPerl_Party")
										end
										self:Validate()
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_PartyPet" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Party" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_ADDON_PARTYPET")
									</OnLoad>
									<OnShow>
										self:SetChecked(C_AddOns.IsAddOnLoaded("TPerl_PartyPet"))
									</OnShow>
									<OnClick>
										if (self:GetChecked()) then
											C_AddOns.EnableAddOn("TPerl_PartyPet")
										else
											C_AddOns.DisableAddOn("TPerl_PartyPet")
										end
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_ArcaneBar" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_PartyPet" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_ADDON_ARCANE")
									</OnLoad>
									<OnShow>
										self:SetChecked(C_AddOns.IsAddOnLoaded("TPerl_ArcaneBar"))
									</OnShow>
									<OnClick>
										if (self:GetChecked()) then
											C_AddOns.EnableAddOn("TPerl_ArcaneBar")
										else
											C_AddOns.DisableAddOn("TPerl_ArcaneBar")
										end
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_RaidFrames" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ArcaneBar" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_ADDON_RAID")
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "RaidPets")
										end
									</OnLoad>
									<OnShow>
										self:SetChecked(C_AddOns.IsAddOnLoaded("TPerl_RaidFrames"))
									</OnShow>
									<OnClick>
										if (self:GetChecked()) then
											C_AddOns.EnableAddOn("TPerl_RaidFrames")
										else
											C_AddOns.DisableAddOn("TPerl_RaidFrames")
										end
										self:Validate()
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_RaidPets" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_RaidFrames" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_ADDON_RAIDPETS")
									</OnLoad>
									<OnShow>
										self:SetChecked(C_AddOns.IsAddOnLoaded("TPerl_RaidPets"))
									</OnShow>
									<OnClick>
										if (self:GetChecked()) then
											C_AddOns.EnableAddOn("TPerl_RaidPets")
										else
											C_AddOns.DisableAddOn("TPerl_RaidPets")
										end
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_RaidHelper" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_RaidPets" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_ADDON_RAIDHELP")
									</OnLoad>
									<OnShow>
										self:SetChecked(C_AddOns.IsAddOnLoaded("TPerl_RaidHelper"))
									</OnShow>
									<OnClick>
										if (self:GetChecked()) then
											C_AddOns.EnableAddOn("TPerl_RaidHelper")
										else
											C_AddOns.DisableAddOn("TPerl_RaidHelper")
										end
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_RaidMonitor" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_RaidHelper" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_ADDON_RAIDMONITOR")
									</OnLoad>
									<OnShow>
										self:SetChecked(C_AddOns.IsAddOnLoaded("TPerl_RaidMonitor"))
									</OnShow>
									<OnClick>
										if (self:GetChecked()) then
											C_AddOns.EnableAddOn("TPerl_RaidMonitor")
										else
											C_AddOns.DisableAddOn("TPerl_RaidMonitor")
										end
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_RaidAdmin" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_RaidMonitor" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_ADDON_RAIDADMIN")
									</OnLoad>
									<OnShow>
										self:SetChecked(C_AddOns.IsAddOnLoaded("TPerl_RaidAdmin"))
									</OnShow>
									<OnClick>
										if (self:GetChecked()) then
											C_AddOns.EnableAddOn("TPerl_RaidAdmin")
										else
											C_AddOns.DisableAddOn("TPerl_RaidAdmin")
										end
									</OnClick>
								</Scripts>
							</CheckButton>

							<Button name="$parent_Reload" inherits="TPerlButtonTemplate">
								<Size>
									<AbsDimension x="80" y="24"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_RaidAdmin" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="3" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_RELOADUI")
										self.Validate = function()
											local list = {"Player", "PlayerBuffs", "PlayerPet", "Target", "TargetTarget", "Party", "PartyPet", "ArcaneBar", "RaidFrames", "RaidPets", "RaidHelper", "RaidMonitor", "RaidAdmin"}
											local enable
											for i, name in pairs(list) do
												if TPerl_Options_GetSiblingChecked(name, self) ~= C_AddOns.IsAddOnLoaded("TPerl_"..name) then
													enable = true
													break
												end
											end
											if enable then
												self:Enable()
											else
												self:Disable()
											end
										end
									</OnLoad>
									<OnUpdate>
										self:Validate()
									</OnUpdate>
									<OnClick>
										ReloadUI()
									</OnClick>
								</Scripts>
							</Button>
						</Frames>
					</Frame>
				</Frames>
			</Frame>

			<!-- Color Options -->
			<Frame name="$parent_Colour_Options" inherits="TPerlBackdropTemplate" hidden="true">
				<Scripts>
					<OnLoad>
						self:OnBackdropLoaded()
						self:SetScale(0.9)
					</OnLoad>
				</Scripts>
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="TPerl_Options_Area_Tabs"/>
					<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs"/>
				</Anchors>
				<Frames>
					<Frame name="$parent_BarColours" inherits="TPerlBackdropTemplate">
						<KeyValues>
							<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_6" type="global"/>
						</KeyValues>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="TOP" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="0" y="-5"/>
								</Offset>
							</Anchor>
							<Anchor point="BOTTOMRIGHT" relativePoint="RIGHT" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="-5" y="-95"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Frames>
							<Button name="$parent_Title">
								<Size>
									<AbsDimension x="60" y="10"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT">
										<Offset>
											<AbsDimension x="3" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Layers>
									<Layer level="ARTWORK">
										<FontString name="$parentText" inherits="GameFontNormalSmall" text="TPERL_CONF_COLOUR_BARS">
											<Color r="1" g="1" b="1" a="1"/>
											<Anchors>
												<Anchor point="LEFT"/>
											</Anchors>
										</FontString>
									</Layer>
								</Layers>
							</Button>

							<CheckButton name="$parent_Coloured" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Title" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="2" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_NAMES")
										self.configBase = "TPerlDB.colour"
										self.configIndex = "class"
										self.configClick = TPerl_OptionActions
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_ClassBar" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOP" relativeTo="$parent_Coloured" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_CLASSBARS")
										self.configBase = "TPerlDB.colour"
										self.configIndex = "classbar"
										self.configClick = TPerl_OptionActions
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "Brightness")
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<Slider name="$parent_Brightness" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="95" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="LEFT" relativeTo="$parent_ClassBar" relativePoint="RIGHT">
										<Offset>
											<AbsDimension x="80" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetScale(0.8)
										local t = TPerl_Options_GetSibling("ClassBar",self)
										local t2 = _G[t:GetName().."Text"]
										self:SetPoint("LEFT", t, "RIGHT", (t2:GetStringWidth() + 10) / 0.8, 0)
										TPerl_SliderSetup(self)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_CLASSBARS_BRIGHT")
										_G[self:GetName().."Low"]:SetText("0")
										_G[self:GetName().."High"]:SetText("2")
										self:SetMinMaxValues(0, 200)
										self:SetValueStep(1)
										self:SetObeyStepOnDrag(true)
									</OnLoad>
									<OnShow>
										self:SetValue(floor(((TPerlDB.colour.classbarBright or 1) + 0.005) * 100))
									</OnShow>
									<OnValueChanged>
										TPerlDB.colour.classbarBright = value / 100
										_G[self:GetName().."Current"]:SetText(string.format("%.2f", TPerlDB.colour.classbarBright))
										TPerl_ResetBarColourCache()
										TPerl_OptionActions()
									</OnValueChanged>
								</Scripts>
							</Slider>

							<CheckButton name="$parent_ClassicHealth" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ClassBar" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_CLASSIC")
										self.configBase = "TPerlDB.colour"
										self.configIndex = "classic"
										self.configClick = TPerl_OptionActions
									</OnLoad>
								</Scripts>
							</CheckButton>

							<Button name="$parent_ColourHealthBarEmpty" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ClassicHealth" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="5" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_HEALTHEMPTY")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.bar.healthEmpty.r, TPerlDB.colour.bar.healthEmpty.g, TPerlDB.colour.bar.healthEmpty.b)
									</OnShow>
									<OnClick>
										TPerlDB.colour.classic = nil
										_G[self:GetParent():GetName().."_ClassicHealth"]:SetChecked(false)

										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.bar.healthEmpty
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.bar.healthEmpty.r = n.r
											TPerlDB.colour.bar.healthEmpty.g = n.g
											TPerlDB.colour.bar.healthEmpty.b = n.b
										end
										TPerl_ColourPicker.alpha = nil
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_ColourHealthBarFull" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ColourHealthBarEmpty" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_HEALTHFULL")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.bar.healthFull.r, TPerlDB.colour.bar.healthFull.g, TPerlDB.colour.bar.healthFull.b)
									</OnShow>
									<OnClick>
										TPerlDB.colour.classic = nil
										_G[self:GetParent():GetName().."_ClassicHealth"]:SetChecked(false)

										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.bar.healthFull
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.bar.healthFull.r = n.r
											TPerlDB.colour.bar.healthFull.g = n.g
											TPerlDB.colour.bar.healthFull.b = n.b
										end
										TPerl_ColourPicker.alpha = nil
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_ColourAbsorbBar" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ColourHealthBarFull" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_ABSORB")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.bar.absorb.r, TPerlDB.colour.bar.absorb.g, TPerlDB.colour.bar.absorb.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.bar.absorb
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.bar.absorb.r = n.r
											TPerlDB.colour.bar.absorb.g = n.g
											TPerlDB.colour.bar.absorb.b = n.b
											TPerlDB.colour.bar.absorb.a = n.a
										end
										TPerl_ColourPicker.alpha = true
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_ColourHealPredictionBar" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ColourAbsorbBar" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_HEALPREDICTION")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.bar.healprediction.r, TPerlDB.colour.bar.healprediction.g, TPerlDB.colour.bar.healprediction.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.bar.healprediction
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.bar.healprediction.r = n.r
											TPerlDB.colour.bar.healprediction.g = n.g
											TPerlDB.colour.bar.healprediction.b = n.b
											TPerlDB.colour.bar.healprediction.a = n.a
										end
										TPerl_ColourPicker.alpha = true
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_ColourHotsBar" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ColourHealPredictionBar" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										if WOW_PROJECT_ID ~= WOW_PROJECT_MISTS_CLASSIC then
											self:Hide()
											return
										end
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_HOT")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.bar.hot.r, TPerlDB.colour.bar.hot.g, TPerlDB.colour.bar.hot.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.bar.hot
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.bar.hot.r = n.r
											TPerlDB.colour.bar.hot.g = n.g
											TPerlDB.colour.bar.hot.b = n.b
											TPerlDB.colour.bar.hot.a = n.a
										end
										TPerl_ColourPicker.alpha = true
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_ColourManaBar" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ColourHotsBar" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										if WOW_PROJECT_ID ~= WOW_PROJECT_MISTS_CLASSIC then
											self:SetPoint("TOPLEFT", self:GetParent():GetName().."_ColourHealPredictionBar", "BOTTOMLEFT", 0, -2)
										end
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_MANA")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.bar.mana.r, TPerlDB.colour.bar.mana.g, TPerlDB.colour.bar.mana.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.bar.mana
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.bar.mana.r = n.r
											TPerlDB.colour.bar.mana.g = n.g
											TPerlDB.colour.bar.mana.b = n.b
										end
										TPerl_ColourPicker.alpha = nil
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_ColourEnergyBar" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ColourManaBar" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_ENERGY")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.bar.energy.r, TPerlDB.colour.bar.energy.g, TPerlDB.colour.bar.energy.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.bar.energy
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.bar.energy.r = n.r
											TPerlDB.colour.bar.energy.g = n.g
											TPerlDB.colour.bar.energy.b = n.b
										end
										TPerl_ColourPicker.alpha = nil
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_ColourRageBar" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ColourEnergyBar" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_RAGE")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.bar.rage.r, TPerlDB.colour.bar.rage.g, TPerlDB.colour.bar.rage.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.bar.rage
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.bar.rage.r = n.r
											TPerlDB.colour.bar.rage.g = n.g
											TPerlDB.colour.bar.rage.b = n.b
										end
										TPerl_ColourPicker.alpha = nil
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_ColourFocusBar" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ColourRageBar" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_FOCUS")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.bar.focus.r, TPerlDB.colour.bar.focus.g, TPerlDB.colour.bar.focus.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.bar.focus
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.bar.focus.r = n.r
											TPerlDB.colour.bar.focus.g = n.g
											TPerlDB.colour.bar.focus.b = n.b
										end
										TPerl_ColourPicker.alpha = nil
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_ColourRunicBar" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ColourFocusBar" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_RUNIC")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.bar.runic_power.r, TPerlDB.colour.bar.runic_power.g, TPerlDB.colour.bar.runic_power.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.bar.runic_power
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.bar.runic_power.r = n.r
											TPerlDB.colour.bar.runic_power.g = n.g
											TPerlDB.colour.bar.runic_power.b = n.b
										end
										TPerl_ColourPicker.alpha = nil
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_ColourInsanity" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ColourRunicBar" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_INSANITY")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.bar.insanity.r, TPerlDB.colour.bar.insanity.g, TPerlDB.colour.bar.insanity.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.bar.insanity
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.bar.insanity.r = n.r
											TPerlDB.colour.bar.insanity.g = n.g
											TPerlDB.colour.bar.insanity.b = n.b
										end
										TPerl_ColourPicker.alpha = nil
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_ColourAstralPower" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ColourInsanity" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_LUNAR_POWER")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.bar.lunar.r, TPerlDB.colour.bar.lunar.g, TPerlDB.colour.bar.lunar.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.bar.lunar
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.bar.lunar.r = n.r
											TPerlDB.colour.bar.lunar.g = n.g
											TPerlDB.colour.bar.lunar.b = n.b
										end
										TPerl_ColourPicker.alpha = nil
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_ColourMaelstrom" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ColourAstralPower" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_MAELSTROM")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.bar.maelstrom.r, TPerlDB.colour.bar.maelstrom.g, TPerlDB.colour.bar.maelstrom.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.bar.maelstrom
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.bar.maelstrom.r = n.r
											TPerlDB.colour.bar.maelstrom.g = n.g
											TPerlDB.colour.bar.maelstrom.b = n.b
										end
										TPerl_ColourPicker.alpha = nil
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_ColourFury" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ColourMaelstrom" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_FURY")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.bar.fury.r, TPerlDB.colour.bar.fury.g, TPerlDB.colour.bar.fury.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.bar.fury
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.bar.fury.r = n.r
											TPerlDB.colour.bar.fury.g = n.g
											TPerlDB.colour.bar.fury.b = n.b
										end
										TPerl_ColourPicker.alpha = nil
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_ColourPain" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_ColourFury" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_PAIN")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.bar.pain.r, TPerlDB.colour.bar.pain.g, TPerlDB.colour.bar.pain.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.bar.pain
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.bar.pain.r = n.r
											TPerlDB.colour.bar.pain.g = n.g
											TPerlDB.colour.bar.pain.b = n.b
										end
										TPerl_ColourPicker.alpha = nil
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_Reset" inherits="TPerlButtonTemplate">
								<Size>
									<AbsDimension x="70" y="24"/>
								</Size>
								<Anchors>
									<Anchor point="BOTTOMRIGHT">
										<Offset>
											<AbsDimension x="-10" y="10"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_RESET_MAIN")
									</OnLoad>
									<OnClick>
										TPerlDB.colour.bar = TPerl_DefaultBarColours()
										self:GetParent():Hide()
										self:GetParent():Show()
										TPerl_OptionActions()
									</OnClick>
								</Scripts>
							</Button>
						</Frames>
					</Frame>

					<Frame name="$parent_UnitReactions" inherits="TPerlBackdropTemplate">
						<KeyValues>
							<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_6" type="global"/>
						</KeyValues>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_BarColours">
								<Offset>
									<AbsDimension x="0" y="-10"/>
								</Offset>
							</Anchor>
							<Anchor point="BOTTOMRIGHT" relativePoint="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="-5" y="5"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Frames>
							<Button name="$parent_Title">
								<Size>
									<AbsDimension x="60" y="10"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT">
										<Offset>
											<AbsDimension x="3" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Layers>
									<Layer level="ARTWORK">
										<FontString name="$parentText" inherits="GameFontNormalSmall" text="TPERL_CONF_COLOUR_REACTIONS">
											<Color r="1" g="1" b="1" a="1"/>
											<Anchors>
												<Anchor point="LEFT"/>
											</Anchors>
										</FontString>
									</Layer>
								</Layers>
							</Button>

							<Button name="$parent_Friend" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Title" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="5" y="-6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_FRIEND")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.reaction.friend.r, TPerlDB.colour.reaction.friend.g, TPerlDB.colour.reaction.friend.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.reaction.friend
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.reaction.friend.r = n.r
											TPerlDB.colour.reaction.friend.g = n.g
											TPerlDB.colour.reaction.friend.b = n.b
										end
										TPerl_ColourPicker.alpha = nil
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_Neutral" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Friend" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_NEUTRAL")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.reaction.neutral.r, TPerlDB.colour.reaction.neutral.g, TPerlDB.colour.reaction.neutral.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.reaction.neutral
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.reaction.neutral.r = n.r
											TPerlDB.colour.reaction.neutral.g = n.g
											TPerlDB.colour.reaction.neutral.b = n.b
										end
										TPerl_ColourPicker.alpha = nil
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_Unfriendly" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Neutral" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_UNFRIENDLY")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.reaction.unfriendly.r, TPerlDB.colour.reaction.unfriendly.g, TPerlDB.colour.reaction.unfriendly.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.reaction.unfriendly
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.reaction.unfriendly.r = n.r
											TPerlDB.colour.reaction.unfriendly.g = n.g
											TPerlDB.colour.reaction.unfriendly.b = n.b
										end
										TPerl_ColourPicker.alpha = nil
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_Enemy" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Unfriendly" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_ENEMY")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.reaction.enemy.r, TPerlDB.colour.reaction.enemy.g, TPerlDB.colour.reaction.enemy.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.reaction.enemy
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.reaction.enemy.r = n.r
											TPerlDB.colour.reaction.enemy.g = n.g
											TPerlDB.colour.reaction.enemy.b = n.b
										end
										TPerl_ColourPicker.alpha = nil
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_None" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Enemy" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_NONE")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.reaction.none.r, TPerlDB.colour.reaction.none.g, TPerlDB.colour.reaction.none.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.reaction.none
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.reaction.none.r = n.r
											TPerlDB.colour.reaction.none.g = n.g
											TPerlDB.colour.reaction.none.b = n.b
										end
										TPerl_ColourPicker.alpha = nil
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_Tapped" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_None" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_TAPPED")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.reaction.tapped.r, TPerlDB.colour.reaction.tapped.g, TPerlDB.colour.reaction.tapped.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.reaction.tapped
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.reaction.tapped.r = n.r
											TPerlDB.colour.reaction.tapped.g = n.g
											TPerlDB.colour.reaction.tapped.b = n.b
										end
										TPerl_ColourPicker.alpha = nil
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_Reset" inherits="TPerlButtonTemplate">
								<Size>
									<AbsDimension x="70" y="24"/>
								</Size>
								<Anchors>
									<Anchor point="BOTTOMRIGHT">
										<Offset>
											<AbsDimension x="-10" y="10"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_RESET_REACTION")
									</OnLoad>
									<OnClick>
										TPerlDB.colour.reaction = TPerl_DefaultReactionColours()
										self:GetParent():Hide()
										self:GetParent():Show()
										TPerl_OptionActions()
									</OnClick>
								</Scripts>
							</Button>
						</Frames>
					</Frame>

					<Frame name="$parent_Appearance" inherits="TPerlBackdropTemplate">
						<KeyValues>
							<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_6" type="global"/>
						</KeyValues>
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="5" y="-5"/>
								</Offset>
							</Anchor>
							<Anchor point="BOTTOMRIGHT" relativePoint="CENTER" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="-5" y="-5"/>
								</Offset>
							</Anchor>
						</Anchors>

						<Frames>
							<Button name="$parent_Title">
								<Size>
									<AbsDimension x="60" y="20"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativePoint="TOPLEFT">
										<Offset>
											<AbsDimension x="4" y="2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Layers>
									<Layer level="ARTWORK">
										<FontString name="$parentText" inherits="GameFontNormalSmall" text="TPERL_CONF_FRAME_APPEARANCE">
											<Color r="1" g="1" b="1" a="1"/>
											<Anchors>
												<Anchor point="LEFT"/>
											</Anchors>
										</FontString>
									</Layer>
								</Layers>
							</Button>

							<Button name="$parent_Border" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Title">
										<Offset>
											<AbsDimension x="5" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_GLOBAL_BORDERS")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.border.r, TPerlDB.colour.border.g, TPerlDB.colour.border.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.border
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.border.r = n.r
											TPerlDB.colour.border.g = n.g
											TPerlDB.colour.border.b = n.b
											TPerlDB.colour.border.a = n.a
										end
										TPerl_ColourPicker.alpha = true
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_Background" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Border">
										<Offset>
											<AbsDimension x="0" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_GLOBAL_BACKGROUND")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.frame.r, TPerlDB.colour.frame.g, TPerlDB.colour.frame.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.frame
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.frame.r = n.r
											TPerlDB.colour.frame.g = n.g
											TPerlDB.colour.frame.b = n.b
											TPerlDB.colour.frame.a = n.a
										end
										TPerl_ColourPicker.alpha = true
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Slider name="$parent_Transparency" inherits="TPerlSlider">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Background" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="-2" y="-20"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetMinMaxValues(0,100)
										self:SetValueStep(1)
										self:SetObeyStepOnDrag(true)
										TPerl_SliderSetup(self, true)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_FRAME_TRANSPARENCY")
									</OnLoad>
									<OnShow>
										self:SetValue(floor(100 * TPerlDB.transparency.frame + 0.5))
									</OnShow>
									<OnValueChanged>
										if (value ~= floor(100 * TPerlDB.transparency.frame + 0.5)) then
											TPerlDB.transparency.frame = value / 100
											TPerl_SetAllFrames()
										end
										_G[self:GetName().."Current"]:SetText(floor(value + 0.5).."%")
									</OnValueChanged>
								</Scripts>
							</Slider>

							<Slider name="$parent_TextTransparency" inherits="TPerlSlider">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Transparency" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-23"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetMinMaxValues(0,100)
										self:SetValueStep(1)
										self:SetObeyStepOnDrag(true)
										TPerl_SliderSetup(self, true)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TEXT_TRANSPARENCY")
									</OnLoad>
									<OnShow>
										self:SetValue(floor(100 * TPerlDB.transparency.text + 0.5))
									</OnShow>
									<OnValueChanged>
										if (value ~= floor(100 * TPerlDB.transparency.text + 0.5)) then
											TPerlDB.transparency.text = value / 100
											TPerl_SetTextTransparency()
										end
										_G[self:GetName().."Current"]:SetText(floor(value + 0.5).."%")
									</OnValueChanged>
								</Scripts>
							</Slider>

							<Slider name="$parent_Scale" inherits="TPerlSlider">
								<Anchors>
									<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_TextTransparency">
										<Offset>
											<AbsDimension x="0" y="-23"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetMinMaxValues(100, 400)
										self:SetValueStep(25)
										self:SetObeyStepOnDrag(true)
										TPerl_SliderSetup(self, true)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_MAXIMUM_SCALE")
									</OnLoad>
									<OnShow>
										self:SetValue(floor(TPerlDB.maximumScale * 100 + 0.5))
									</OnShow>
									<OnValueChanged>
										if (floor(TPerlDB.maximumScale * 100 + 0.5) ~= value) then
											TPerlDB.maximumScale = value / 100
											TPerl_Options_MaxScaleSet()
										end
										_G[self:GetName().."Current"]:SetText(floor(value + 0.5).."%")
									</OnValueChanged>
								</Scripts>
							</Slider>

							<Button name="$parent_Reset" inherits="TPerlButtonTemplate">
								<Size>
									<AbsDimension x="70" y="24"/>
								</Size>
								<Anchors>
									<Anchor point="BOTTOMRIGHT">
										<Offset>
											<AbsDimension x="-10" y="10"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_FRAME_APPEARANCE_RESET")
									</OnLoad>
									<OnClick>
										TPerl_DefaultFrameAppearance()
										self:GetParent():Hide()
										self:GetParent():Show()
										TPerl_OptionActions()
									</OnClick>
								</Scripts>
							</Button>
						</Frames>
					</Frame>

					<Frame name="$parent_FrameColours" inherits="TPerlBackdropTemplate">
						<KeyValues>
							<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_6" type="global"/>
						</KeyValues>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Appearance">
								<Offset>
									<AbsDimension x="0" y="-10"/>
								</Offset>
							</Anchor>
							<Anchor point="BOTTOMRIGHT" relativePoint="BOTTOM" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="-5" y="5"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Frames>
							<Button name="$parent_Title">
								<Size>
									<AbsDimension x="60" y="10"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT">
										<Offset>
											<AbsDimension x="3" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Layers>
									<Layer level="ARTWORK">
										<FontString name="$parentText" inherits="GameFontNormalSmall" text="TPERL_CONF_COLOUR_FRAMES">
											<Color r="1" g="1" b="1" a="1"/>
											<Anchors>
												<Anchor point="LEFT"/>
											</Anchors>
										</FontString>
									</Layer>
								</Layers>
							</Button>

							<CheckButton name="$parent_Gradient" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Title" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="2" y="-2"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_FRAMES_GRADIENT")
										self.configBase = "TPerlDB.colour.gradient"
										self.configIndex = "enable"
										self.configClick = function()
											TPerl_OptionActions()
											TPerl_DoGradient(TPerl_Options)
										end
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "Vertical")
											TPerl_Options_EnableSibling(self, "Horizontal")
											TPerl_Options_EnableSibling(self, "Start")
											TPerl_Options_EnableSibling(self, "End")
										end
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Vertical" inherits="TPerlRadioButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Gradient" relativePoint="BOTTOMRIGHT">
										<Offset>
											<AbsDimension x="0" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_FRAMES_VERTICAL")
										self.configClick = function()
											TPerl_OptionActions()
										end
									</OnLoad>
									<OnShow>
										self:SetChecked(not TPerlDB.colour.gradient.horizontal)
									</OnShow>
									<OnClick>
										TPerlDB.colour.gradient.horizontal = nil
										TPerl_OptionActions()
										TPerl_DoGradient(TPerl_Options)
										TPerl_Options_CheckRadio(self, {"Vertical", "Horizontal"})
									</OnClick>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Horizontal" inherits="TPerlRadioButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Vertical" relativePoint="TOPRIGHT">
										<Offset>
											<AbsDimension x="40" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_FRAMES_HORIZONTAL")
										self.configClick = function()
											TPerl_OptionActions()
										end
									</OnLoad>
									<OnShow>
										self:SetChecked(TPerlDB.colour.gradient.horizontal)
									</OnShow>
									<OnClick>
										TPerlDB.colour.gradient.horizontal = 1
										TPerl_OptionActions()
										TPerl_DoGradient(TPerl_Options)
										TPerl_Options_CheckRadio(self, {"Vertical", "Horizontal"})
									</OnClick>
								</Scripts>
							</CheckButton>

							<Button name="$parent_Start" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Vertical" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="-5"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_FRAMES_GRADSTART")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.gradient.s.r, TPerlDB.colour.gradient.s.g, TPerlDB.colour.gradient.s.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.gradient.s
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.gradient.s = n
											TPerl_OptionActions()
										end
										TPerl_ColourPicker.alpha = true
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_End" inherits="TPerlColorPickerTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Start" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="0"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_FRAMES_GRADEND")
									</OnLoad>
									<OnShow>
										local f = _G[self:GetName().."_Colour"]
										f:SetVertexColor(TPerlDB.colour.gradient.e.r, TPerlDB.colour.gradient.e.g, TPerlDB.colour.gradient.e.b)
									</OnShow>
									<OnClick>
										TPerlLocked = 1
										TPerl_ColourPicker.ParentFrame = TPerl_Options
										TPerl_ColourPicker.varGet = function()
											return TPerlDB and TPerlDB.colour.gradient.e
										end
										TPerl_ColourPicker.varSet = function(n)
											TPerlDB.colour.gradient.e = n
											TPerl_OptionActions()
										end
										TPerl_ColourPicker.alpha = true
										TPerl_ColourPicker:Show()
									</OnClick>
								</Scripts>
							</Button>

							<Button name="$parent_Reset" inherits="TPerlButtonTemplate">
								<Size>
									<AbsDimension x="70" y="24"/>
								</Size>
								<Anchors>
									<Anchor point="BOTTOMRIGHT">
										<Offset>
											<AbsDimension x="-10" y="10"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_COLOUR_FRAMES_RESET")
									</OnLoad>
									<OnClick>
										TPerlDB.colour.gradient = TPerl_DefaultGradientColours()
										self:GetParent():Hide()
										self:GetParent():Show()
										TPerl_OptionActions()
									</OnClick>
								</Scripts>
							</Button>
						</Frames>
					</Frame>
				</Frames>
			</Frame>

			<!-- Helper Options -->
			<Frame name="$parent_Helper_Options" inherits="TPerlBackdropTemplate" hidden="true">
				<Scripts>
					<OnLoad>
						self:OnBackdropLoaded()
						self:SetScale(0.9)
					</OnLoad>
				</Scripts>
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="TPerl_Options_Area_Tabs"/>
					<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs"/>
				</Anchors>
				<Frames>
					<Button name="$parent_Title">
						<Size>
							<AbsDimension x="60" y="10"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="3" y="-3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<FontString name="$parentText" inherits="GameFontNormalSmall" text="TPERL_CONF_TANK_TARGETS">
									<Color r="1" g="1" b="1" a="1"/>
									<Anchors>
										<Anchor point="LEFT"/>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
					</Button>

					<CheckButton name="$parent_Enable" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Title">
								<Offset>
									<AbsDimension x="0" y="-3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAIDHELP_ENABLE")
								self.XconfigVar = "RaidHelper"
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "CTTargets")
									TPerl_Options_EnableSibling(self, "BlizzTargets")
									TPerl_Options_EnableSibling(self, "NoAuto")
									TPerl_Options_EnableSibling(self, "Tooltips")
									TPerl_Options_EnableSibling(self, "TooltipTarget", "Tooltips")
									TPerl_Options_EnableSibling(self, "TooltipTank", "Tooltips")
									TPerl_Options_EnableSibling(self, "TooltipBoth", "Tooltips")
									TPerl_Options_EnableSibling(self, "GrowUp")
									TPerl_Options_EnableSibling(self, "Healer_Healer")
									TPerl_Options_EnableSibling(self, "Healer_DeficitOnly", "Healer_Healer")
									TPerl_Options_EnableSibling(self, "Healer_DeficitMax", "Healer_Healer")
									TPerl_Options_EnableSibling(self, "Healer_CurMaxDeficit", "Healer_Healer")
									TPerl_Options_EnableSibling(self, "MaxTanks")
									TPerl_Options_EnableSibling(self, "UnitWidth")
									TPerl_Options_EnableSibling(self, "UnitHeight")
									TPerl_Options_EnableSibling(self, "Transparency")
									TPerl_Options_EnableSibling(self, "BkTransparency")
								end
								self.configClick = function()
									TPerl_EnableDisable()
								end
							</OnLoad>
							<OnShow>
								if TPerlConfigHelper.RaidHelper == 1 then
									self:SetChecked(true)
								else
									self:SetChecked(false)
								end
								self:Validate()
							</OnShow>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_CTTargets" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativePoint="BOTTOMRIGHT" relativeTo="$parent_Enable">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAIDHELP_CTTARGETS")
								self.XconfigVar = "UseCTRATargets"
								self.configClick = TPerl_MTRosterChanged
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_BlizzTargets" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_CTTargets">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAIDHELP_BLIZZMTTARGETS")
								self.XconfigVar = "UseBlizzardMTTargets"
								self.configClick = TPerl_MTRosterChanged
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_NoAuto" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_BlizzTargets" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAIDHELP_NOAUTO")
								self.XconfigVar = "NoAutoList"
								self.configClick = TPerl_MTRosterChanged
								TPerl_Options_RegisterProtected(self)
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_GrowUp" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_NoAuto" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAIDHELP_GROWUP")
								self.XconfigVar = "MTListUpward"
								self.configClick = TPerl_MakeTankList
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Frame name="$parent_Healer" inherits="TPerl_Options_HealerModeTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_GrowUp" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								self.hideOptions = "2"
								self.getEnable = function()
									return TPerlDB.player.healerMode.enable
								end
								self.setEnable = function(n)
									TPerlConfigHelper.HealerMode = n
									TPerl_MakeTankList()
								end
								self.getType = function()
									return TPerlDB.player.healerMode.type
								end
								self.setType = function(n)
									TPerlConfigHelper.HealerModeType = n
									TPerl_MakeTankList()
								end
								self:SetScale(0.9)
							</OnLoad>
						</Scripts>
					</Frame>

					<Slider name="$parent_MaxTanks" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="155" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Healer" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="-10" y="-10"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(1, 10)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_Options_RegisterProtected(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAIDHELP_MAXTANKS")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlConfigHelper.MaxMainTanks)
							</OnShow>
							<OnValueChanged>
								if (TPerlConfigHelper.MaxMainTanks ~= value) then
									TPerlConfigHelper.MaxMainTanks = value
									TPerl_MakeTankList()
									TPerl_SetTitle()
								end
								_G[self:GetName().."Current"]:SetText(TPerlConfigHelper.MaxMainTanks)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Slider name="$parent_UnitWidth" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="75" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_MaxTanks" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="-19"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								if (TPERL_UNIT_WIDTH_MIN) then
									self:SetMinMaxValues(TPERL_UNIT_WIDTH_MIN, TPERL_UNIT_WIDTH_MAX)
								else
									self:SetMinMaxValues(50, 125)
								end
								self:SetValueStep(5)
								self:SetObeyStepOnDrag(true)
								TPerl_Options_RegisterProtected(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAIDHELP_UNITWIDTH")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlConfigHelper.UnitWidth)
							</OnShow>
							<OnValueChanged>
								if (TPerlConfigHelper.UnitWidth ~= value) then
									TPerlConfigHelper.UnitWidth = value
									TPerl_RaidHelper_MTList_ApplyUnitSizes()
									TPerl_SetFrameSizes()
								end
								_G[self:GetName().."Current"]:SetText(TPerlConfigHelper.UnitWidth)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Slider name="$parent_UnitHeight" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="75" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_UnitWidth" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="5" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								if (TPERL_UNIT_HEIGHT_MIN) then
									self:SetMinMaxValues(TPERL_UNIT_HEIGHT_MIN, TPERL_UNIT_HEIGHT_MAX)
								else
									self:SetMinMaxValues(17, 30)
								end
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_Options_RegisterProtected(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAIDHELP_UNITHEIGHT")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlConfigHelper.UnitHeight)
							</OnShow>
							<OnValueChanged>
								if (TPerlConfigHelper.UnitHeight ~= value) then
									TPerlConfigHelper.UnitHeight = value
									TPerl_RaidHelper_MTList_ApplyUnitSizes()
									TPerl_SetFrameSizes()
								end
								_G[self:GetName().."Current"]:SetText(TPerlConfigHelper.UnitHeight)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Slider name="$parent_Transparency" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="155" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_UnitWidth">
								<Offset>
									<AbsDimension x="0" y="-19"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(0, 100)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self, true)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAIDHELP_ALPHA")
							</OnLoad>
							<OnShow>
								self:SetValue(floor(TPerlConfigHelper.Targets_Transparency * 100))
							</OnShow>
							<OnValueChanged>
								if (TPerlConfigHelper.Targets_Transparency ~= value / 100) then
									TPerlConfigHelper.Targets_Transparency = value / 100
									TPerl_RaidHelper_Frame:SetAlpha(TPerlConfigHelper.Targets_Transparency)
								end
								_G[self:GetName().."Current"]:SetText(value.."%")
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Slider name="$parent_BkTransparency" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="155" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Transparency">
								<Offset>
									<AbsDimension x="0" y="-19"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(0, 100)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self, true)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAIDHELP_BACKALPHA")
							</OnLoad>
							<OnShow>
								self:SetValue(floor(TPerlConfigHelper.Background_Transparency * 100))
							</OnShow>
							<OnValueChanged>
								if (TPerlConfigHelper.Background_Transparency ~= value / 100) then
									TPerlConfigHelper.Background_Transparency = value / 100
									if TPerl_RaidHelper_Frame then
										TPerl_SetupFrameSimple(TPerl_RaidHelper_Frame, TPerlConfigHelper.Background_Transparency)
									end
								end
								_G[self:GetName().."Current"]:SetText(value.."%")
							</OnValueChanged>
						</Scripts>
					</Slider>

					<CheckButton name="$parent_Tooltips" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOP">
								<Offset>
									<AbsDimension x="0" y="-3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAIDHELP_TOOLTIPS")
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "TooltipTarget")
									TPerl_Options_EnableSibling(self, "TooltipTank")
									TPerl_Options_EnableSibling(self, "TooltipBoth")
								end
								self.XconfigVar = "Tooltips"
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlConfigHelper.Tooltips == 1)
								self:Validate()
							</OnShow>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_TooltipTarget" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Tooltips" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAIDHELP_TOOLTIPS_TARGET")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlConfigHelper.TooltipsWhich == 0)
							</OnShow>
							<OnClick>
								TPerlConfigHelper.TooltipsWhich = 0
								TPerl_Options_CheckRadio(self,{"TooltipTarget", "TooltipTank", "TooltipBoth"})
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_TooltipTank" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_TooltipTarget" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="2"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAIDHELP_TOOLTIPS_TANK")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlConfigHelper.TooltipsWhich == 1)
							</OnShow>
							<OnClick>
								TPerlConfigHelper.TooltipsWhich = 1
								TPerl_Options_CheckRadio(self,{"TooltipTarget", "TooltipTank", "TooltipBoth"})
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_TooltipBoth" inherits="TPerlRadioButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_TooltipTank" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="2"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAIDHELP_TOOLTIPS_BOTH")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlConfigHelper.TooltipsWhich == 2)
							</OnShow>
							<OnClick>
								TPerlConfigHelper.TooltipsWhich = 2
								TPerl_Options_CheckRadio(self,{"TooltipTarget", "TooltipTank", "TooltipBoth"})
							</OnClick>
						</Scripts>
					</CheckButton>

					<Frame name="$parent_Assists" inherits="TPerlBackdropTemplate">
						<KeyValues>
							<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_6" type="global"/>
						</KeyValues>
						<Size>
							<AbsDimension x="130" y="70"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="CENTER" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="5" y="66"/>
								</Offset>
							</Anchor>
							<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs">
								<Offset>
									<AbsDimension x="-5" y="5"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Frames>
							<Button name="$parent_Title">
								<Size>
									<AbsDimension x="60" y="10"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT">
										<Offset>
											<AbsDimension x="3" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Layers>
									<Layer level="ARTWORK">
										<FontString name="$parentText" inherits="GameFontNormalSmall" text="TPERL_CONF_TARGET_COUNTERS">
											<Color r="1" g="1" b="1" a="1"/>
											<Anchors>
												<Anchor point="LEFT"/>
											</Anchors>
										</FontString>
									</Layer>
								</Layers>
							</Button>

							<CheckButton name="$parent_TargetCounters" inherits="TPerlCheckButtonTemplate">
								<Anchors>
									<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Title">
										<Offset>
											<AbsDimension x="0" y="-3"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_COUNTERS")
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "TargetCountersSelf")
											TPerl_Options_EnableSibling(self, "Enemy")
											TPerl_Options_EnableSibling(self, "ShowCounters")
											TPerl_Options_EnableSibling(self, "AggroWarning", "Enemy")
											TPerl_Options_EnableSibling(self, "Transparency")
											TPerl_Options_EnableSibling(self, "BackTransparency")
										end
										self.XconfigVar = "TargetCounters"
										self.configClick = TPerl_UpdateAssists
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_TargetCountersSelf" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOP" relativeTo="$parent_TargetCounters" relativePoint="BOTTOMRIGHT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_COUNTERSSELF")
										self.XconfigVar = "TargetCountersSelf"
										self.configClick = TPerl_UpdateAssists
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_Enemy" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_TargetCountersSelf" relativePoint="BOTTOMLEFT">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_COUNTERSENEMY")
										self.Validate = function()
											TPerl_Options_EnableSibling(self, "AggroWarning")
										end
										self.XconfigVar = "TargetCountersEnemy"
										self.configClick = TPerl_UpdateAssists
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_AggroWarning" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativeTo="$parent_Enemy" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="6"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_AGGROWARNING")
										self.XconfigVar = "AggroWarning"
									</OnLoad>
								</Scripts>
							</CheckButton>

							<CheckButton name="$parent_ShowCounters" inherits="TPerlCheckButtonTemplate">
								<Size>
									<AbsDimension x="26" y="26"/>
								</Size>
								<Anchors>
									<Anchor point="TOP" relativeTo="$parent_Enemy" relativePoint="BOTTOM">
										<Offset>
											<AbsDimension x="0" y="-16"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										TPerl_OptionsSetMyText(self, "TPERL_CONF_TARGET_SHOWCOUNTERS")
										self.XconfigVar = "ShowTargetCounters"
										self.configClick = TPerl_UpdateAssists
									</OnLoad>
								</Scripts>
							</CheckButton>

							<Slider name="$parent_Transparency" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="160" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_ShowCounters">
										<Offset>
											<AbsDimension x="0" y="-16"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetMinMaxValues(0, 100)
										self:SetValueStep(1)
										self:SetObeyStepOnDrag(true)
										TPerl_SliderSetup(self, true)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_ASSIST_ALPHA")
									</OnLoad>
									<OnShow>
										self:SetValue(floor(TPerlConfigHelper.AssistsFrame_Transparency * 100))
									</OnShow>
									<OnValueChanged>
										if (TPerlConfigHelper.AssistsFrame_Transparency ~= value / 100) then
											TPerlConfigHelper.AssistsFrame_Transparency = value / 100
											TPerl_SetupFrames()
										end
										_G[self:GetName().."Current"]:SetText(value.."%")
									</OnValueChanged>
								</Scripts>
							</Slider>

							<Slider name="$parent_BackTransparency" inherits="TPerlSlider">
								<Size>
									<AbsDimension x="160" y="16"/>
								</Size>
								<Anchors>
									<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_Transparency">
										<Offset>
											<AbsDimension x="0" y="-28"/>
										</Offset>
									</Anchor>
								</Anchors>
								<Scripts>
									<OnLoad>
										self:SetMinMaxValues(0, 100)
										self:SetValueStep(1)
										self:SetObeyStepOnDrag(true)
										TPerl_SliderSetup(self, true)
										TPerl_OptionsSetMyText(self, "TPERL_CONF_ASSIST_BACKALPHA")
									</OnLoad>
									<OnShow>
										self:SetValue(floor(TPerlConfigHelper.Assists_BackTransparency * 100))
									</OnShow>
									<OnValueChanged>
										if (TPerlConfigHelper.Assists_BackTransparency ~= value / 100) then
											TPerlConfigHelper.Assists_BackTransparency = value / 100
											if (TPerl_Assists_Frame) then
												TPerl_SetupFrameSimple(TPerl_Assists_Frame, TPerlConfigHelper.Assists_BackTransparency)
											end
										end
										_G[self:GetName().."Current"]:SetText(value.."%")
									</OnValueChanged>
								</Scripts>
							</Slider>
						</Frames>
					</Frame>
				</Frames>
			</Frame>

			<!-- Monitor Options -->
			<Frame name="$parent_Monitor_Options" inherits="TPerlBackdropTemplate" hidden="true">
				<Scripts>
					<OnLoad>
						self:OnBackdropLoaded()
						self:SetScale(0.9)
					</OnLoad>
				</Scripts>
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="TPerl_Options_Area_Tabs"/>
					<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs"/>
				</Anchors>
				<Frames>
					<CheckButton name="$parent_Enable" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="6" y="-3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_ENABLE")
								self.XconfigVars = "TPerlRaidMonConfig"
								self.XconfigVar = "enabled"
								self.Validate = function()
									TPerl_Options_EnableSibling(self, "Priest")
									TPerl_Options_EnableSibling(self, "Druid")
									TPerl_Options_EnableSibling(self, "Shaman")
									TPerl_Options_EnableSibling(self, "Paladin")
									TPerl_Options_EnableSibling(self, "Mage")
									TPerl_Options_EnableSibling(self, "Warlock")
									TPerl_Options_EnableSibling(self, "Hunter")
									TPerl_Options_EnableSibling(self, "Rogue")
									TPerl_Options_EnableSibling(self, "Warrior")
									TPerl_Options_EnableSibling(self, "DeathKnight")
									TPerl_Options_EnableSibling(self, "Monk")
									TPerl_Options_EnableSibling(self, "DemonHunter")
									TPerl_Options_EnableSibling(self, "Evoker")
									TPerl_Options_EnableSibling(self, "LowMana")
									TPerl_Options_EnableSibling(self, "HighMana")
									TPerl_Options_EnableSibling(self, "UnitWidth")
									TPerl_Options_EnableSibling(self, "UnitHeight")
									TPerl_Options_EnableSibling(self, "TargetWidth")
									TPerl_Options_EnableSibling(self, "GrowUp")
									TPerl_Options_EnableSibling(self, "Tooltips")
									TPerl_Options_EnableSibling(self, "Alpha")
									TPerl_Options_EnableSibling(self, "BackgroundAlpha")
								end
								self.configClick = function()
									TPerl_RaidMonitor_Frame:Init()
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Priest" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOP" relativeTo="$parent_Enable" relativePoint="BOTTOMRIGHT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_PRIEST")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlRaidMonConfig.classes.PRIEST)
							</OnShow>
							<OnClick>
								TPerlRaidMonConfig.classes.PRIEST = not TPerlRaidMonConfig.classes.PRIEST
								TPerl_RaidMonitor_Frame:Init()
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Druid" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Priest" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_DRUID")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlRaidMonConfig.classes.DRUID)
							</OnShow>
							<OnClick>
								TPerlRaidMonConfig.classes.DRUID = not TPerlRaidMonConfig.classes.DRUID
								TPerl_RaidMonitor_Frame:Init()
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Shaman" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Druid" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_SHAMAN")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlRaidMonConfig.classes.SHAMAN)
							</OnShow>
							<OnClick>
								TPerlRaidMonConfig.classes.SHAMAN = not TPerlRaidMonConfig.classes.SHAMAN
								TPerl_RaidMonitor_Frame:Init()
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Paladin" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Shaman" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_PALADIN")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlRaidMonConfig.classes.PALADIN)
							</OnShow>
							<OnClick>
								TPerlRaidMonConfig.classes.PALADIN = not TPerlRaidMonConfig.classes.PALADIN
								TPerl_RaidMonitor_Frame:Init()
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Mage" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Paladin" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_MAGE")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlRaidMonConfig.classes.MAGE)
							</OnShow>
							<OnClick>
								TPerlRaidMonConfig.classes.MAGE = not TPerlRaidMonConfig.classes.MAGE
								TPerl_RaidMonitor_Frame:Init()
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Warlock" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Mage" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_WARLOCK")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlRaidMonConfig.classes.WARLOCK)
							</OnShow>
							<OnClick>
								TPerlRaidMonConfig.classes.WARLOCK = not TPerlRaidMonConfig.classes.WARLOCK
								TPerl_RaidMonitor_Frame:Init()
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Hunter" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Warlock" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_HUNTER")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlRaidMonConfig.classes.HUNTER)
							</OnShow>
							<OnClick>
								TPerlRaidMonConfig.classes.HUNTER = not TPerlRaidMonConfig.classes.HUNTER
								TPerl_RaidMonitor_Frame:Init()
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Rogue" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Hunter" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_ROGUE")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlRaidMonConfig.classes.ROGUE)
							</OnShow>
							<OnClick>
								TPerlRaidMonConfig.classes.ROGUE = not TPerlRaidMonConfig.classes.ROGUE
								TPerl_RaidMonitor_Frame:Init()
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Warrior" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Rogue" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_WARRIOR")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlRaidMonConfig.classes.WARRIOR)
							</OnShow>
							<OnClick>
								TPerlRaidMonConfig.classes.WARRIOR = not TPerlRaidMonConfig.classes.WARRIOR
								TPerl_RaidMonitor_Frame:Init()
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_DeathKnight" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Warrior" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_DEATHKNIGHT")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlRaidMonConfig.classes.DEATHKNIGHT)
							</OnShow>
							<OnClick>
								TPerlRaidMonConfig.classes.DEATHKNIGHT = not TPerlRaidMonConfig.classes.DEATHKNIGHT
								TPerl_RaidMonitor_Frame:Init()
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Monk" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_DeathKnight" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_MONK")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlRaidMonConfig.classes.MONK)
							</OnShow>
							<OnClick>
								TPerlRaidMonConfig.classes.MONK = not TPerlRaidMonConfig.classes.MONK
								TPerl_RaidMonitor_Frame:Init()
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_DemonHunter" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Monk" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_DEMONHUNTER")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlRaidMonConfig.classes.DEMONHUNTER)
							</OnShow>
							<OnClick>
								TPerlRaidMonConfig.classes.DEMONHUNTER = not TPerlRaidMonConfig.classes.DEMONHUNTER
								TPerl_RaidMonitor_Frame:Init()
							</OnClick>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Evoker" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_DemonHunter" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="6"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_EVOKER")
							</OnLoad>
							<OnShow>
								self:SetChecked(TPerlRaidMonConfig.classes.EVOKER)
							</OnShow>
							<OnClick>
								TPerlRaidMonConfig.classes.EVOKER = not TPerlRaidMonConfig.classes.EVOKER
								TPerl_RaidMonitor_Frame:Init()
							</OnClick>
						</Scripts>
					</CheckButton>

					<Slider name="$parent_LowMana" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="75" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Evoker" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="-10"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(0, 100)
								self:SetValueStep(5)
								self:SetObeyStepOnDrag(true)
								TPerl_Options_RegisterProtected(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_LOWMANA")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlRaidMonConfig.LowMana)
							</OnShow>
							<OnValueChanged>
								if (TPerlRaidMonConfig.LowMana ~= value) then
									TPerlRaidMonConfig.LowMana = value
								end
								_G[self:GetName().."Current"]:SetText(TPerlRaidMonConfig.LowMana)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Slider name="$parent_HighMana" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="75" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_LowMana" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="5" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(0, 100)
								self:SetValueStep(5)
								self:SetObeyStepOnDrag(true)
								TPerl_Options_RegisterProtected(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_HIGHMANA")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlRaidMonConfig.HighMana)
							</OnShow>
							<OnValueChanged>
								if (TPerlRaidMonConfig.HighMana ~= value) then
									TPerlRaidMonConfig.HighMana = value
								end
								_G[self:GetName().."Current"]:SetText(TPerlRaidMonConfig.HighMana)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Slider name="$parent_UnitWidth" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="75" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_LowMana" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="-28"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(TPERL_RAIDMON_UNIT_WIDTH_MIN or 50, TPERL_RAIDMON_UNIT_WIDTH_MAX or 150)
								self:SetValueStep(5)
								self:SetObeyStepOnDrag(true)
								TPerl_Options_RegisterProtected(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_UNITWIDTH")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlRaidMonConfig.UnitWidth)
							</OnShow>
							<OnValueChanged>
								if (TPerlRaidMonConfig.UnitWidth ~= value) then
									TPerlRaidMonConfig.UnitWidth = value
									TPerl_RaidMonitor_Frame:SetUnitSizes()
									TPerl_RaidMonitor_Frame:SetFrameSizes()
								end
								_G[self:GetName().."Current"]:SetText(TPerlRaidMonConfig.UnitWidth)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Slider name="$parent_UnitHeight" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="75" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_UnitWidth" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="5" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(TPERL_RAIDMON_UNIT_HEIGHT_MIN or 9, TPERL_RAIDMON_UNIT_HEIGHT_MAX or 20)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_Options_RegisterProtected(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_UNITHEIGHT")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlRaidMonConfig.UnitHeight)
							</OnShow>
							<OnValueChanged>
								if (TPerlRaidMonConfig.UnitHeight ~= value) then
									TPerlRaidMonConfig.UnitHeight = value
									TPerl_RaidMonitor_Frame:SetUnitSizes()
									TPerl_RaidMonitor_Frame:SetFrameSizes()
								end
								_G[self:GetName().."Current"]:SetText(TPerlRaidMonConfig.UnitHeight)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Slider name="$parent_TargetWidth" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="75" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_UnitHeight" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="5" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(TPERL_RAIDMON_TARGET_WIDTH_MIN or 50, TPERL_RAIDMON_TARGET_WIDTH_MAX or 150)
								self:SetValueStep(5)
								self:SetObeyStepOnDrag(true)
								TPerl_Options_RegisterProtected(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_TARGETWIDTH")
							</OnLoad>
							<OnShow>
								self:SetValue(TPerlRaidMonConfig.TargetWidth)
							</OnShow>
							<OnValueChanged>
								if (TPerlRaidMonConfig.TargetWidth ~= value) then
									TPerlRaidMonConfig.TargetWidth = value
									TPerl_RaidMonitor_Frame:SetUnitSizes()
									TPerl_RaidMonitor_Frame:SetFrameSizes()
								end
								_G[self:GetName().."Current"]:SetText(TPerlRaidMonConfig.TargetWidth)
							</OnValueChanged>
						</Scripts>
					</Slider>

					<CheckButton name="$parent_GrowUp" inherits="TPerlCheckButtonTemplate">
						<Size>
							<AbsDimension x="26" y="26"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_UnitWidth" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="-10"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_Options_RegisterProtected(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_GROWUP")
								self.configBase = "TPerlRaidMonConfig"
								self.configIndex = "GrowUp"
								self.configClick = function()
									TPerl_RaidMonitor_Frame:Init()
									TPerl_RaidMonitor_Frame:SetFrameSizes()
								end
							</OnLoad>
						</Scripts>
					</CheckButton>

					<CheckButton name="$parent_Tooltips" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOP">
								<Offset>
									<AbsDimension x="0" y="-3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_TOOLTIPS")
								self.configBase = "TPerlRaidMonConfig"
								self.configIndex = "Tooltips"
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Slider name="$parent_Alpha" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="160" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Tooltips" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="-10"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(0,100)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_ALPHA")
								TPerl_SliderSetup(self)
							</OnLoad>
							<OnShow>
								self:SetValue(floor(100 * TPerlRaidMonConfig.Alpha + 0.5))
							</OnShow>
							<OnValueChanged>
								if (floor(100 * TPerlRaidMonConfig.Alpha + 0.5) ~= value) then
									TPerlRaidMonConfig.Alpha = value / 100
									TPerl_RaidMonitor_Frame:SetupAlpha()
								end
								_G[self:GetName().."Current"]:SetText(floor(100 * TPerlRaidMonConfig.Alpha + 0.5).."%")
							</OnValueChanged>
						</Scripts>
					</Slider>

					<Slider name="$parent_BackgroundAlpha" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="160" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Alpha" relativePoint="BOTTOMLEFT">
								<Offset>
									<AbsDimension x="0" y="-28"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(0,100)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_MONITOR_BGALPHA")
								TPerl_SliderSetup(self)
							</OnLoad>
							<OnShow>
								self:SetValue(floor(100 * TPerlRaidMonConfig.BackgroundAlpha + 0.5))
							</OnShow>
							<OnValueChanged>
								if (floor(100 * TPerlRaidMonConfig.BackgroundAlpha + 0.5) ~= value) then
									TPerlRaidMonConfig.BackgroundAlpha = value / 100
									TPerl_RaidMonitor_Frame:SetupAlpha()
								end
								_G[self:GetName().."Current"]:SetText(floor(100 * TPerlRaidMonConfig.BackgroundAlpha + 0.5).."%")
							</OnValueChanged>
						</Scripts>
					</Slider>

				</Frames>
			</Frame>

			<!-- Admin Options -->
			<Frame name="$parent_Admin_Options" inherits="TPerlBackdropTemplate" hidden="true">
				<Scripts>
					<OnLoad>
						self:OnBackdropLoaded()
						self:SetScale(0.9)
					</OnLoad>
				</Scripts>
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="TPerl_Options_Area_Tabs"/>
					<Anchor point="BOTTOMRIGHT" relativeTo="TPerl_Options_Area_Tabs"/>
				</Anchors>
				<Frames>
					<CheckButton name="$parent_AutoHideShow" inherits="TPerlCheckButtonTemplate">
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="6" y="-3"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ADMIN_AUTOHIDESHOW")
								self.XconfigVars = "TPerl_Admin"
								self.XconfigVar = "AutoHideShow"
								self.configClick = TPerl_AdminCheckMyRank
							</OnLoad>
						</Scripts>
					</CheckButton>

					<Slider name="$parent_Alpha" inherits="TPerlSlider">
						<Size>
							<AbsDimension x="160" y="16"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="BOTTOMLEFT" relativeTo="$parent_AutoHideShow">
								<Offset>
									<AbsDimension x="3" y="-13"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:SetMinMaxValues(0, 100)
								self:SetValueStep(1)
								self:SetObeyStepOnDrag(true)
								TPerl_SliderSetup(self)
								TPerl_OptionsSetMyText(self, "TPERL_CONF_ADMIN_ALPHA")
							</OnLoad>
							<OnShow>
								self:SetValue(floor(100 * TPerl_Admin.Transparency + 0.5))
							</OnShow>
							<OnValueChanged>
								if (floor(100 * TPerl_Admin.Transparency + 0.5) ~= value) then
									TPerl_Admin.Transparency = value / 100
									if (TPerl_AdminSetupFrames) then
										TPerl_AdminSetupFrames()
									end
								end
								_G[self:GetName().."Current"]:SetText(floor(100 * TPerl_Admin.Transparency + 0.5).."%")
							</OnValueChanged>
						</Scripts>
					</Slider>
				</Frames>
			</Frame>
		</Frames>
	</Frame>

	<Button name="TPerlCustomLineTemplate" virtual="true">
		<NormalFont style="GameFontNormalSmall"/>
		<ButtonText name="$parentText" justifyH="LEFT" setAllPoints="true">
			<Color r="1" g="1" b="1"/>
		</ButtonText>
		<Size>
			<AbsDimension x="190" y="12"/>
		</Size>
		<Scripts>
			<OnLoad>
				self.master = self:GetParent()
				if (not self.master.line) then
					self.master.line = {}
				end
				self.master.line[self:GetID()] = self
			</OnLoad>
			<OnShow>
				TPerl_Options_Custom_Buttons(TPerl_Custom_Config)
			</OnShow>
			<OnClick>
				self.master.selection = self:GetID() + self.master.start - 1
				self.master:FillList()
				self.master:OnClick(self)
				TPerl_Options_Custom_Buttons(TPerl_Custom_Config)
			</OnClick>
			<OnMouseWheel>
				if (delta > 0) then
					self.master.scrollBar.bar:SetValue(self.master.scrollBar.bar:GetValue() - 2)
				else
					self.master.scrollBar.bar:SetValue(self.master.scrollBar.bar:GetValue() + 2)
				end
			</OnMouseWheel>
		</Scripts>
		<HighlightTexture file="Interface\QuestFrame\UI-QuestTitleHighlight" alphaMode="ADD"/>
	</Button>

	<Frame name="TPerlCustomListTemplate" inherits="TPerlBackdropTemplate" virtual="true">
		<KeyValues>
			<KeyValue key="backdropInfo" value="TPerl_Tooltip_Edge_9" type="global"/>
		</KeyValues>
		<Size>
			<AbsDimension x="200" y="130"/>
		</Size>
		<Scripts>
			<OnMouseWheel>
				if (delta > 0) then
					self.scrollBar.bar:SetValue(self.scrollBar.bar:GetValue() - 2)
				else
					self.scrollBar.bar:SetValue(self.scrollBar.bar:GetValue() + 2)
				end
				self:FillList()
			</OnMouseWheel>
			<OnShow>
				self:FillList()
			</OnShow>
		</Scripts>
		<Layers>
			<Layer level="BORDER">
				<FontString name="$parenttitle" inherits="GameFontNormalSmall" justifyH="LEFT">
					<Anchors>
						<Anchor point="TOPLEFT">
							<Offset>
								<AbsDimension x="0" y="-12"/>
							</Offset>
						</Anchor>
						<Anchor point="BOTTOMRIGHT">
							<Offset>
								<AbsDimension x="0" y="0"/>
							</Offset>
						</Anchor>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<Frames>
			<Button name="$parent1" inherits="TPerlCustomLineTemplate" text="Line" id="1">
				<Anchors>
					<Anchor point="TOPLEFT">
						<Offset>
							<AbsDimension x="4" y="-3"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Button>
			<Button name="$parent2" inherits="TPerlCustomLineTemplate" text="Line" id="2">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parent1" relativePoint="BOTTOMLEFT"/>
				</Anchors>
			</Button>
			<Button name="$parent3" inherits="TPerlCustomLineTemplate" text="Line" id="3">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parent2" relativePoint="BOTTOMLEFT"/>
				</Anchors>
			</Button>
			<Button name="$parent4" inherits="TPerlCustomLineTemplate" text="Line" id="4">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parent3" relativePoint="BOTTOMLEFT"/>
				</Anchors>
			</Button>
			<Button name="$parent5" inherits="TPerlCustomLineTemplate" text="Line" id="5">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parent4" relativePoint="BOTTOMLEFT"/>
				</Anchors>
			</Button>
			<Button name="$parent6" inherits="TPerlCustomLineTemplate" text="Line" id="6">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parent5" relativePoint="BOTTOMLEFT"/>
				</Anchors>
			</Button>
			<Button name="$parent7" inherits="TPerlCustomLineTemplate" text="Line" id="7">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parent6" relativePoint="BOTTOMLEFT"/>
				</Anchors>
			</Button>
			<Button name="$parent8" inherits="TPerlCustomLineTemplate" text="Line" id="8">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parent7" relativePoint="BOTTOMLEFT"/>
				</Anchors>
			</Button>
			<Button name="$parent9" inherits="TPerlCustomLineTemplate" text="Line" id="9">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parent8" relativePoint="BOTTOMLEFT"/>
				</Anchors>
			</Button>
			<Button name="$parent10" inherits="TPerlCustomLineTemplate" text="Line" id="10">
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parent9" relativePoint="BOTTOMLEFT"/>
				</Anchors>
			</Button>
			<ScrollFrame name="$parentscrollBar" inherits="FauxScrollFrameTemplate">
				<Size>
					<AbsDimension x="20" y="24"/>
				</Size>
				<Anchors>
					<Anchor point="TOPRIGHT" relativePoint="TOPRIGHT" relativeTo="$parent1">
						<Offset>
							<AbsDimension x="-20" y="1"/>
						</Offset>
					</Anchor>
					<Anchor point="BOTTOMRIGHT"/>
				</Anchors>
				<Scripts>
					<OnVerticalScroll>
						FauxScrollFrame_OnVerticalScroll(self, offset, 1, function()
							self:GetParent():FillList()
						end)
					</OnVerticalScroll>
					<OnMouseWheel>
						local f = _G[self:GetName().."ScrollBar"]
						if (delta > 0) then
							f:SetValue(f:GetValue() + 3)
						else
							f:SetValue(f:GetValue() - 3)
						end

						self:GetParent():FillList()
					</OnMouseWheel>
				</Scripts>
			</ScrollFrame>
		</Frames>
	</Frame>

	<Frame name="TPerl_Custom_Config" frameStrata="DIALOG" inherits="TPerl_OptionsTemplateNaked" parent="UIParent" hidden="true">
		<Scripts>
			<OnShow>
				TPerl_Custom_Config_OnShow(self)
			</OnShow>
			<OnHide>
				TPerl_Options_Mask:Hide()
				TPerl_Options_Custom_CleanupIconDB(self)
			</OnHide>
		</Scripts>
		<Anchors>
			<Anchor point="TOP" relativeTo="TPerl_Options">
				<Offset>
					<AbsDimension x="0" y="-100"/>
				</Offset>
			</Anchor>
		</Anchors>
		<Size>
			<AbsDimension x="470" y="195"/>
		</Size>
		<Frames>
			<Button name="$parent_CloseButton" inherits="UIPanelCloseButton">
				<Anchors>
					<Anchor point="TOPRIGHT" relativePoint="TOPRIGHT">
						<Offset>
							<AbsDimension x="3" y="2"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						self:GetParent():Hide()
					</OnClick>
				</Scripts>
			</Button>

			<Frame name="$parentzoneList" inherits="TPerlCustomListTemplate">
				<Scripts>
					<OnLoad>
						self:OnBackdropLoaded()
						TPerl_Options_Custom_InitList(self, "zone")
					</OnLoad>
				</Scripts>
				<Anchors>
					<Anchor point="TOPLEFT">
						<Offset>
							<AbsDimension x="10" y="-25"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Frame>

			<Frame name="$parentdebuffs" inherits="TPerlCustomListTemplate">
				<Scripts>
					<OnLoad>
						self:OnBackdropLoaded()
						TPerl_Options_Custom_InitList(self, "debuff")
					</OnLoad>
				</Scripts>
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parentzoneList" relativePoint="TOPRIGHT">
						<Offset>
							<AbsDimension x="5" y="0"/>
						</Offset>
					</Anchor>
				</Anchors>
			</Frame>

			<StatusBar name="$parenticonCollect" orientation="VERTICAL">
				<BarTexture file="Interface\Tooltips\UI-Tooltip-Background"/>
				<Scripts>
					<OnShow>
						TPerl_Custom_Config.progress = self
					</OnShow>
				</Scripts>
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parentzoneList" relativePoint="TOPRIGHT">
						<Offset>
							<AbsDimension x="1" y="-5"/>
						</Offset>
					</Anchor>
					<Anchor point="BOTTOMRIGHT" relativeTo="$parentzoneList" relativePoint="BOTTOMRIGHT">
						<Offset>
							<AbsDimension x="3" y="5"/>
						</Offset>
					</Anchor>
				</Anchors>
			</StatusBar>

			<Frame name="$parentEdit" inherits="TPerlBackdropTemplate">
				<Scripts>
					<OnShow>
						TPerl_Options_Custom_Buttons(TPerl_Custom_Config)
					</OnShow>
				</Scripts>
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parentzoneList" relativePoint="BOTTOMLEFT">
						<Offset>
							<AbsDimension x="5" y="-5"/>
						</Offset>
					</Anchor>
					<Anchor point="BOTTOMRIGHT">
						<Offset>
							<AbsDimension x="-10" y="10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Frames>
					<Button name="$parent_Defaults" inherits="TPerlButtonTemplate">
						<Size>
							<AbsDimension x="70" y="24"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT"/>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_CUSTOM_DEFAULTS")
							</OnLoad>
							<OnClick>
								if (not TPerl_Custom) then
									C_AddOns.LoadAddOn("TPerl_CustomHighlight")
								end
								if (TPerl_Custom) then
									TPerl_Custom:SetDefaults()
									TPerl_Custom_Config.listzone:FillList()
									TPerl_Custom_Config.listdebuff:FillList()
								end
							</OnClick>
						</Scripts>
					</Button>
					<Button name="$parent_New" inherits="TPerlButtonTemplate">
						<Size>
							<AbsDimension x="70" y="24"/>
						</Size>
						<Anchors>
							<Anchor point="TOPLEFT" relativePoint="TOP"/>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "TPERL_CONF_RAID_CUSTOM_NEW")
							</OnLoad>
							<OnClick>
								TPerl_Custom_ConfigNew:Show()
							</OnClick>
						</Scripts>
					</Button>
					<Button name="$parent_Delete" inherits="TPerlButtonTemplate">
						<Size>
							<AbsDimension x="70" y="24"/>
						</Size>
						<Anchors>
							<Anchor point="TOPRIGHT"/>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "DELETE", true)
							</OnLoad>
							<OnClick>
								TPerl_Options_Custom_OnDelete(TPerl_Custom_Config)
							</OnClick>
						</Scripts>
					</Button>
				</Frames>
			</Frame>
			<Frame name="$parentNew" inherits="TPerlBackdropTemplate" hidden="true">
				<Scripts>
					<OnShow>
						TPerl_Options_Custom_ScanForIcons(TPerl_Custom_Config)
						TPerl_Custom_ConfigEdit:Hide()
						TPerl_SwitchAnchor(TPerl_Custom_Config, "TOPLEFT")
						TPerl_Custom_Config:SetHeight(430)
					</OnShow>
					<OnHide>
						TPerl_Custom_ConfigEdit:Show()
						TPerl_SwitchAnchor(TPerl_Custom_Config, "TOPLEFT")
						TPerl_Custom_Config:SetHeight(195)
					</OnHide>
				</Scripts>
				<Anchors>
					<Anchor point="TOPLEFT" relativeTo="$parentzoneList" relativePoint="BOTTOMLEFT">
						<Offset>
							<AbsDimension x="5" y="-5"/>
						</Offset>
					</Anchor>
					<Anchor point="BOTTOMRIGHT">
						<Offset>
							<AbsDimension x="-10" y="10"/>
						</Offset>
					</Anchor>
				</Anchors>
				<Frames>
					<EditBox name="$parent_Zone" inherits="TPerlOptEditBox" letters="100">
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="50" y="0"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Size>
							<AbsDimension x="180" y="24"/>
						</Size>
						<Scripts>
							<OnShow>
								self:SetText(GetRealZoneText())
							</OnShow>
						</Scripts>
						<Layers>
							<Layer level="ARTWORK">
								<FontString inherits="GameFontNormal" text="TPERL_CONF_RAID_CUSTOM_ZONE" justifyH="LEFT">
									<Anchors>
										<Anchor point="RIGHT" relativePoint="LEFT">
											<Offset>
												<AbsDimension x="-7" y="0"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
					</EditBox>
					<EditBox name="$parent_Search" inherits="TPerlOptEditBox" letters="100">
						<Anchors>
							<Anchor point="TOPLEFT" relativeTo="$parent_Zone" relativePoint="BOTTOMLEFT"/>
						</Anchors>
						<Size>
							<AbsDimension x="180" y="24"/>
						</Size>
						<Scripts>
							<OnShow>
								self:SetFocus()
							</OnShow>
							<OnTextChanged>
								TPerl_Options_Custom_ScanForIcons(TPerl_Custom_Config)
							</OnTextChanged>
						</Scripts>
						<Layers>
							<Layer level="ARTWORK">
								<FontString inherits="GameFontNormal" text="TPERL_CONF_RAID_CUSTOM_SEARCH" justifyH="LEFT">
									<Anchors>
										<Anchor point="RIGHT" relativePoint="LEFT">
											<Offset>
												<AbsDimension x="-7" y="0"/>
											</Offset>
										</Anchor>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
					</EditBox>
					<Button name="$parent_Cancel" inherits="TPerlButtonTemplate">
						<Size>
							<AbsDimension x="70" y="24"/>
						</Size>
						<Anchors>
							<Anchor point="BOTTOMRIGHT"/>
						</Anchors>
						<Scripts>
							<OnLoad>
								TPerl_OptionsSetMyText(self, "CANCEL", true)
							</OnLoad>
							<OnClick>
								TPerl_Custom_ConfigNew:Hide()
							</OnClick>
						</Scripts>
					</Button>
					<Frame name="$parent_Icons" inherits="TPerlBackdropTemplate">
						<Anchors>
							<Anchor point="TOPLEFT">
								<Offset>
									<AbsDimension x="0" y="-55"/>
								</Offset>
							</Anchor>
							<Anchor point="BOTTOMRIGHT" relativeTo="$parent_Cancel" relativePoint="TOPRIGHT">
								<Offset>
									<AbsDimension x="0" y="5"/>
								</Offset>
							</Anchor>
						</Anchors>
						<Scripts>
							<OnLoad>
								self:OnBackdropLoaded()
								TPerl_Custom_Config.icons = self
							</OnLoad>
						</Scripts>
					</Frame>
				</Frames>
			</Frame>
		</Frames>
	</Frame>
</Ui>
